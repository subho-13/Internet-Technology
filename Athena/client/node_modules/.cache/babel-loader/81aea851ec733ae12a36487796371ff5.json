{"ast":null,"code":"var util = require('util');\n/**\n * Module exports.\n */\n\n\nexports.parse = parse;\nexports.format = format;\n/**\n * Parse extensions header value\n */\n\nfunction parse(value) {\n  value = value || '';\n  var extensions = {};\n  value.split(',').forEach(function (v) {\n    var params = v.split(';');\n    var token = params.shift().trim();\n\n    if (extensions[token] === undefined) {\n      extensions[token] = [];\n    } else if (!extensions.hasOwnProperty(token)) {\n      return;\n    }\n\n    var parsedParams = {};\n    params.forEach(function (param) {\n      var parts = param.trim().split('=');\n      var key = parts[0];\n      var value = parts[1];\n\n      if (typeof value === 'undefined') {\n        value = true;\n      } else {\n        // unquote value\n        if (value[0] === '\"') {\n          value = value.slice(1);\n        }\n\n        if (value[value.length - 1] === '\"') {\n          value = value.slice(0, value.length - 1);\n        }\n      }\n\n      if (parsedParams[key] === undefined) {\n        parsedParams[key] = [value];\n      } else if (parsedParams.hasOwnProperty(key)) {\n        parsedParams[key].push(value);\n      }\n    });\n    extensions[token].push(parsedParams);\n  });\n  return extensions;\n}\n/**\n * Format extensions header value\n */\n\n\nfunction format(value) {\n  return Object.keys(value).map(function (token) {\n    var paramsList = value[token];\n\n    if (!util.isArray(paramsList)) {\n      paramsList = [paramsList];\n    }\n\n    return paramsList.map(function (params) {\n      return [token].concat(Object.keys(params).map(function (k) {\n        var p = params[k];\n        if (!util.isArray(p)) p = [p];\n        return p.map(function (v) {\n          return v === true ? k : k + '=' + v;\n        }).join('; ');\n      })).join('; ');\n    }).join(', ');\n  }).join(', ');\n}","map":{"version":3,"sources":["/home/subho/Programming/Internet-Technology/Athena/node_modules/ws/lib/Extensions.js"],"names":["util","require","exports","parse","format","value","extensions","split","forEach","v","params","token","shift","trim","undefined","hasOwnProperty","parsedParams","param","parts","key","slice","length","push","Object","keys","map","paramsList","isArray","concat","k","p","join"],"mappings":"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","sourcesContent":["\nvar util = require('util');\n\n/**\n * Module exports.\n */\n\nexports.parse = parse;\nexports.format = format;\n\n/**\n * Parse extensions header value\n */\n\nfunction parse(value) {\n  value = value || '';\n\n  var extensions = {};\n\n  value.split(',').forEach(function(v) {\n    var params = v.split(';');\n    var token = params.shift().trim();\n\n    if (extensions[token] === undefined) {\n      extensions[token] = [];\n    } else if (!extensions.hasOwnProperty(token)) {\n      return;\n    }\n\n    var parsedParams = {};\n\n    params.forEach(function(param) {\n      var parts = param.trim().split('=');\n      var key = parts[0];\n      var value = parts[1];\n      if (typeof value === 'undefined') {\n        value = true;\n      } else {\n        // unquote value\n        if (value[0] === '\"') {\n          value = value.slice(1);\n        }\n        if (value[value.length - 1] === '\"') {\n          value = value.slice(0, value.length - 1);\n        }\n      }\n\n      if (parsedParams[key] === undefined) {\n        parsedParams[key] = [value];\n      } else if (parsedParams.hasOwnProperty(key)) {\n        parsedParams[key].push(value);\n      }\n    });\n\n    extensions[token].push(parsedParams);\n  });\n\n  return extensions;\n}\n\n/**\n * Format extensions header value\n */\n\nfunction format(value) {\n  return Object.keys(value).map(function(token) {\n    var paramsList = value[token];\n    if (!util.isArray(paramsList)) {\n      paramsList = [paramsList];\n    }\n    return paramsList.map(function(params) {\n      return [token].concat(Object.keys(params).map(function(k) {\n        var p = params[k];\n        if (!util.isArray(p)) p = [p];\n        return p.map(function(v) {\n          return v === true ? k : k + '=' + v;\n        }).join('; ');\n      })).join('; ');\n    }).join(', ');\n  }).join(', ');\n}\n"]},"metadata":{},"sourceType":"script"}