{"ast":null,"code":"/*!\n * ws: a node.js websocket client\n * Copyright(c) 2011 Einar Otto Stangvik <einaros@gmail.com>\n * MIT Licensed\n */\nvar util = require('util'),\n    isValidUTF8 = require('./Validation'),\n    ErrorCodes = require('./ErrorCodes'),\n    BufferPool = require('./BufferPool'),\n    bufferUtil = require('./BufferUtil'),\n    PerMessageDeflate = require('./PerMessageDeflate');\n/**\n * HyBi Receiver implementation\n */\n\n\nfunction Receiver(extensions, maxPayload) {\n  if (this instanceof Receiver === false) {\n    throw new TypeError(\"Classes can't be function-called\");\n  }\n\n  if (typeof extensions === 'number') {\n    maxPayload = extensions;\n    extensions = {};\n  } // memory pool for fragmented messages\n\n\n  var fragmentedPoolPrevUsed = -1;\n  this.fragmentedBufferPool = new BufferPool(1024, function (db, length) {\n    return db.used + length;\n  }, function (db) {\n    return fragmentedPoolPrevUsed = fragmentedPoolPrevUsed >= 0 ? Math.ceil((fragmentedPoolPrevUsed + db.used) / 2) : db.used;\n  }); // memory pool for unfragmented messages\n\n  var unfragmentedPoolPrevUsed = -1;\n  this.unfragmentedBufferPool = new BufferPool(1024, function (db, length) {\n    return db.used + length;\n  }, function (db) {\n    return unfragmentedPoolPrevUsed = unfragmentedPoolPrevUsed >= 0 ? Math.ceil((unfragmentedPoolPrevUsed + db.used) / 2) : db.used;\n  });\n  this.extensions = extensions || {};\n  this.maxPayload = maxPayload || 0;\n  this.currentPayloadLength = 0;\n  this.state = {\n    activeFragmentedOperation: null,\n    lastFragment: false,\n    masked: false,\n    opcode: 0,\n    fragmentedOperation: false\n  };\n  this.overflow = [];\n  this.headerBuffer = new Buffer(10);\n  this.expectOffset = 0;\n  this.expectBuffer = null;\n  this.expectHandler = null;\n  this.currentMessage = [];\n  this.currentMessageLength = 0;\n  this.messageHandlers = [];\n  this.expectHeader(2, this.processPacket);\n  this.dead = false;\n  this.processing = false;\n\n  this.onerror = function () {};\n\n  this.ontext = function () {};\n\n  this.onbinary = function () {};\n\n  this.onclose = function () {};\n\n  this.onping = function () {};\n\n  this.onpong = function () {};\n}\n\nmodule.exports = Receiver;\n/**\n * Add new data to the parser.\n *\n * @api public\n */\n\nReceiver.prototype.add = function (data) {\n  if (this.dead) return;\n  var dataLength = data.length;\n  if (dataLength == 0) return;\n\n  if (this.expectBuffer == null) {\n    this.overflow.push(data);\n    return;\n  }\n\n  var toRead = Math.min(dataLength, this.expectBuffer.length - this.expectOffset);\n  fastCopy(toRead, data, this.expectBuffer, this.expectOffset);\n  this.expectOffset += toRead;\n\n  if (toRead < dataLength) {\n    this.overflow.push(data.slice(toRead));\n  }\n\n  while (this.expectBuffer && this.expectOffset == this.expectBuffer.length) {\n    var bufferForHandler = this.expectBuffer;\n    this.expectBuffer = null;\n    this.expectOffset = 0;\n    this.expectHandler.call(this, bufferForHandler);\n  }\n};\n/**\n * Releases all resources used by the receiver.\n *\n * @api public\n */\n\n\nReceiver.prototype.cleanup = function () {\n  this.dead = true;\n  this.overflow = null;\n  this.headerBuffer = null;\n  this.expectBuffer = null;\n  this.expectHandler = null;\n  this.unfragmentedBufferPool = null;\n  this.fragmentedBufferPool = null;\n  this.state = null;\n  this.currentMessage = null;\n  this.onerror = null;\n  this.ontext = null;\n  this.onbinary = null;\n  this.onclose = null;\n  this.onping = null;\n  this.onpong = null;\n};\n/**\n * Waits for a certain amount of header bytes to be available, then fires a callback.\n *\n * @api private\n */\n\n\nReceiver.prototype.expectHeader = function (length, handler) {\n  if (length == 0) {\n    handler(null);\n    return;\n  }\n\n  this.expectBuffer = this.headerBuffer.slice(this.expectOffset, this.expectOffset + length);\n  this.expectHandler = handler;\n  var toRead = length;\n\n  while (toRead > 0 && this.overflow.length > 0) {\n    var fromOverflow = this.overflow.pop();\n    if (toRead < fromOverflow.length) this.overflow.push(fromOverflow.slice(toRead));\n    var read = Math.min(fromOverflow.length, toRead);\n    fastCopy(read, fromOverflow, this.expectBuffer, this.expectOffset);\n    this.expectOffset += read;\n    toRead -= read;\n  }\n};\n/**\n * Waits for a certain amount of data bytes to be available, then fires a callback.\n *\n * @api private\n */\n\n\nReceiver.prototype.expectData = function (length, handler) {\n  if (length == 0) {\n    handler(null);\n    return;\n  }\n\n  this.expectBuffer = this.allocateFromPool(length, this.state.fragmentedOperation);\n  this.expectHandler = handler;\n  var toRead = length;\n\n  while (toRead > 0 && this.overflow.length > 0) {\n    var fromOverflow = this.overflow.pop();\n    if (toRead < fromOverflow.length) this.overflow.push(fromOverflow.slice(toRead));\n    var read = Math.min(fromOverflow.length, toRead);\n    fastCopy(read, fromOverflow, this.expectBuffer, this.expectOffset);\n    this.expectOffset += read;\n    toRead -= read;\n  }\n};\n/**\n * Allocates memory from the buffer pool.\n *\n * @api private\n */\n\n\nReceiver.prototype.allocateFromPool = function (length, isFragmented) {\n  return (isFragmented ? this.fragmentedBufferPool : this.unfragmentedBufferPool).get(length);\n};\n/**\n * Start processing a new packet.\n *\n * @api private\n */\n\n\nReceiver.prototype.processPacket = function (data) {\n  if (this.extensions[PerMessageDeflate.extensionName]) {\n    if ((data[0] & 0x30) != 0) {\n      this.error('reserved fields (2, 3) must be empty', 1002);\n      return;\n    }\n  } else {\n    if ((data[0] & 0x70) != 0) {\n      this.error('reserved fields must be empty', 1002);\n      return;\n    }\n  }\n\n  this.state.lastFragment = (data[0] & 0x80) == 0x80;\n  this.state.masked = (data[1] & 0x80) == 0x80;\n  var compressed = (data[0] & 0x40) == 0x40;\n  var opcode = data[0] & 0xf;\n\n  if (opcode === 0) {\n    if (compressed) {\n      this.error('continuation frame cannot have the Per-message Compressed bits', 1002);\n      return;\n    } // continuation frame\n\n\n    this.state.fragmentedOperation = true;\n    this.state.opcode = this.state.activeFragmentedOperation;\n\n    if (!(this.state.opcode == 1 || this.state.opcode == 2)) {\n      this.error('continuation frame cannot follow current opcode', 1002);\n      return;\n    }\n  } else {\n    if (opcode < 3 && this.state.activeFragmentedOperation != null) {\n      this.error('data frames after the initial data frame must have opcode 0', 1002);\n      return;\n    }\n\n    if (opcode >= 8 && compressed) {\n      this.error('control frames cannot have the Per-message Compressed bits', 1002);\n      return;\n    }\n\n    this.state.compressed = compressed;\n    this.state.opcode = opcode;\n\n    if (this.state.lastFragment === false) {\n      this.state.fragmentedOperation = true;\n      this.state.activeFragmentedOperation = opcode;\n    } else this.state.fragmentedOperation = false;\n  }\n\n  var handler = opcodes[this.state.opcode];\n  if (typeof handler == 'undefined') this.error('no handler for opcode ' + this.state.opcode, 1002);else {\n    handler.start.call(this, data);\n  }\n};\n/**\n * Endprocessing a packet.\n *\n * @api private\n */\n\n\nReceiver.prototype.endPacket = function () {\n  if (this.dead) return;\n  if (!this.state.fragmentedOperation) this.unfragmentedBufferPool.reset(true);else if (this.state.lastFragment) this.fragmentedBufferPool.reset(true);\n  this.expectOffset = 0;\n  this.expectBuffer = null;\n  this.expectHandler = null;\n\n  if (this.state.lastFragment && this.state.opcode === this.state.activeFragmentedOperation) {\n    // end current fragmented operation\n    this.state.activeFragmentedOperation = null;\n  }\n\n  this.currentPayloadLength = 0;\n  this.state.lastFragment = false;\n  this.state.opcode = this.state.activeFragmentedOperation != null ? this.state.activeFragmentedOperation : 0;\n  this.state.masked = false;\n  this.expectHeader(2, this.processPacket);\n};\n/**\n * Reset the parser state.\n *\n * @api private\n */\n\n\nReceiver.prototype.reset = function () {\n  if (this.dead) return;\n  this.state = {\n    activeFragmentedOperation: null,\n    lastFragment: false,\n    masked: false,\n    opcode: 0,\n    fragmentedOperation: false\n  };\n  this.fragmentedBufferPool.reset(true);\n  this.unfragmentedBufferPool.reset(true);\n  this.expectOffset = 0;\n  this.expectBuffer = null;\n  this.expectHandler = null;\n  this.overflow = [];\n  this.currentMessage = [];\n  this.currentMessageLength = 0;\n  this.messageHandlers = [];\n  this.currentPayloadLength = 0;\n};\n/**\n * Unmask received data.\n *\n * @api private\n */\n\n\nReceiver.prototype.unmask = function (mask, buf, binary) {\n  if (mask != null && buf != null) bufferUtil.unmask(buf, mask);\n  if (binary) return buf;\n  return buf != null ? buf.toString('utf8') : '';\n};\n/**\n * Handles an error\n *\n * @api private\n */\n\n\nReceiver.prototype.error = function (reason, protocolErrorCode) {\n  if (this.dead) return;\n  this.reset();\n\n  if (typeof reason == 'string') {\n    this.onerror(new Error(reason), protocolErrorCode);\n  } else if (reason.constructor == Error) {\n    this.onerror(reason, protocolErrorCode);\n  } else {\n    this.onerror(new Error(\"An error occured\"), protocolErrorCode);\n  }\n\n  return this;\n};\n/**\n * Execute message handler buffers\n *\n * @api private\n */\n\n\nReceiver.prototype.flush = function () {\n  if (this.processing || this.dead) return;\n  var handler = this.messageHandlers.shift();\n  if (!handler) return;\n  this.processing = true;\n  var self = this;\n  handler(function () {\n    self.processing = false;\n    self.flush();\n  });\n};\n/**\n * Apply extensions to message\n *\n * @api private\n */\n\n\nReceiver.prototype.applyExtensions = function (messageBuffer, fin, compressed, callback) {\n  var self = this;\n\n  if (compressed) {\n    this.extensions[PerMessageDeflate.extensionName].decompress(messageBuffer, fin, function (err, buffer) {\n      if (self.dead) return;\n\n      if (err) {\n        callback(new Error('invalid compressed data'));\n        return;\n      }\n\n      callback(null, buffer);\n    });\n  } else {\n    callback(null, messageBuffer);\n  }\n};\n/**\n* Checks payload size, disconnects socket when it exceeds maxPayload\n*\n* @api private\n*/\n\n\nReceiver.prototype.maxPayloadExceeded = function (length) {\n  if (this.maxPayload === undefined || this.maxPayload === null || this.maxPayload < 1) {\n    return false;\n  }\n\n  var fullLength = this.currentPayloadLength + length;\n\n  if (fullLength < this.maxPayload) {\n    this.currentPayloadLength = fullLength;\n    return false;\n  }\n\n  this.error('payload cannot exceed ' + this.maxPayload + ' bytes', 1009);\n  this.messageBuffer = [];\n  this.cleanup();\n  return true;\n};\n/**\n * Buffer utilities\n */\n\n\nfunction readUInt16BE(start) {\n  return (this[start] << 8) + this[start + 1];\n}\n\nfunction readUInt32BE(start) {\n  return (this[start] << 24) + (this[start + 1] << 16) + (this[start + 2] << 8) + this[start + 3];\n}\n\nfunction fastCopy(length, srcBuffer, dstBuffer, dstOffset) {\n  switch (length) {\n    default:\n      srcBuffer.copy(dstBuffer, dstOffset, 0, length);\n      break;\n\n    case 16:\n      dstBuffer[dstOffset + 15] = srcBuffer[15];\n\n    case 15:\n      dstBuffer[dstOffset + 14] = srcBuffer[14];\n\n    case 14:\n      dstBuffer[dstOffset + 13] = srcBuffer[13];\n\n    case 13:\n      dstBuffer[dstOffset + 12] = srcBuffer[12];\n\n    case 12:\n      dstBuffer[dstOffset + 11] = srcBuffer[11];\n\n    case 11:\n      dstBuffer[dstOffset + 10] = srcBuffer[10];\n\n    case 10:\n      dstBuffer[dstOffset + 9] = srcBuffer[9];\n\n    case 9:\n      dstBuffer[dstOffset + 8] = srcBuffer[8];\n\n    case 8:\n      dstBuffer[dstOffset + 7] = srcBuffer[7];\n\n    case 7:\n      dstBuffer[dstOffset + 6] = srcBuffer[6];\n\n    case 6:\n      dstBuffer[dstOffset + 5] = srcBuffer[5];\n\n    case 5:\n      dstBuffer[dstOffset + 4] = srcBuffer[4];\n\n    case 4:\n      dstBuffer[dstOffset + 3] = srcBuffer[3];\n\n    case 3:\n      dstBuffer[dstOffset + 2] = srcBuffer[2];\n\n    case 2:\n      dstBuffer[dstOffset + 1] = srcBuffer[1];\n\n    case 1:\n      dstBuffer[dstOffset] = srcBuffer[0];\n  }\n}\n\nfunction clone(obj) {\n  var cloned = {};\n\n  for (var k in obj) {\n    if (obj.hasOwnProperty(k)) {\n      cloned[k] = obj[k];\n    }\n  }\n\n  return cloned;\n}\n/**\n * Opcode handlers\n */\n\n\nvar opcodes = {\n  // text\n  '1': {\n    start: function (data) {\n      var self = this; // decode length\n\n      var firstLength = data[1] & 0x7f;\n\n      if (firstLength < 126) {\n        if (self.maxPayloadExceeded(firstLength)) {\n          self.error('Maximumpayload exceeded in compressed text message. Aborting...', 1009);\n          return;\n        }\n\n        opcodes['1'].getData.call(self, firstLength);\n      } else if (firstLength == 126) {\n        self.expectHeader(2, function (data) {\n          var length = readUInt16BE.call(data, 0);\n\n          if (self.maxPayloadExceeded(length)) {\n            self.error('Maximumpayload exceeded in compressed text message. Aborting...', 1009);\n            return;\n          }\n\n          opcodes['1'].getData.call(self, length);\n        });\n      } else if (firstLength == 127) {\n        self.expectHeader(8, function (data) {\n          if (readUInt32BE.call(data, 0) != 0) {\n            self.error('packets with length spanning more than 32 bit is currently not supported', 1008);\n            return;\n          }\n\n          var length = readUInt32BE.call(data, 4);\n\n          if (self.maxPayloadExceeded(length)) {\n            self.error('Maximumpayload exceeded in compressed text message. Aborting...', 1009);\n            return;\n          }\n\n          opcodes['1'].getData.call(self, readUInt32BE.call(data, 4));\n        });\n      }\n    },\n    getData: function (length) {\n      var self = this;\n\n      if (self.state.masked) {\n        self.expectHeader(4, function (data) {\n          var mask = data;\n          self.expectData(length, function (data) {\n            opcodes['1'].finish.call(self, mask, data);\n          });\n        });\n      } else {\n        self.expectData(length, function (data) {\n          opcodes['1'].finish.call(self, null, data);\n        });\n      }\n    },\n    finish: function (mask, data) {\n      var self = this;\n      var packet = this.unmask(mask, data, true) || new Buffer(0);\n      var state = clone(this.state);\n      this.messageHandlers.push(function (callback) {\n        self.applyExtensions(packet, state.lastFragment, state.compressed, function (err, buffer) {\n          if (err) {\n            if (err.type === 1009) {\n              return self.error('Maximumpayload exceeded in compressed text message. Aborting...', 1009);\n            }\n\n            return self.error(err.message, 1007);\n          }\n\n          if (buffer != null) {\n            if (self.maxPayload == 0 || self.maxPayload > 0 && self.currentMessageLength + buffer.length < self.maxPayload) {\n              self.currentMessage.push(buffer);\n            } else {\n              self.currentMessage = null;\n              self.currentMessage = [];\n              self.currentMessageLength = 0;\n              self.error(new Error('Maximum payload exceeded. maxPayload: ' + self.maxPayload), 1009);\n              return;\n            }\n\n            self.currentMessageLength += buffer.length;\n          }\n\n          if (state.lastFragment) {\n            var messageBuffer = Buffer.concat(self.currentMessage);\n            self.currentMessage = [];\n            self.currentMessageLength = 0;\n\n            if (!isValidUTF8(messageBuffer)) {\n              self.error('invalid utf8 sequence', 1007);\n              return;\n            }\n\n            self.ontext(messageBuffer.toString('utf8'), {\n              masked: state.masked,\n              buffer: messageBuffer\n            });\n          }\n\n          callback();\n        });\n      });\n      this.flush();\n      this.endPacket();\n    }\n  },\n  // binary\n  '2': {\n    start: function (data) {\n      var self = this; // decode length\n\n      var firstLength = data[1] & 0x7f;\n\n      if (firstLength < 126) {\n        if (self.maxPayloadExceeded(firstLength)) {\n          self.error('Max payload exceeded in compressed text message. Aborting...', 1009);\n          return;\n        }\n\n        opcodes['2'].getData.call(self, firstLength);\n      } else if (firstLength == 126) {\n        self.expectHeader(2, function (data) {\n          var length = readUInt16BE.call(data, 0);\n\n          if (self.maxPayloadExceeded(length)) {\n            self.error('Max payload exceeded in compressed text message. Aborting...', 1009);\n            return;\n          }\n\n          opcodes['2'].getData.call(self, length);\n        });\n      } else if (firstLength == 127) {\n        self.expectHeader(8, function (data) {\n          if (readUInt32BE.call(data, 0) != 0) {\n            self.error('packets with length spanning more than 32 bit is currently not supported', 1008);\n            return;\n          }\n\n          var length = readUInt32BE.call(data, 4, true);\n\n          if (self.maxPayloadExceeded(length)) {\n            self.error('Max payload exceeded in compressed text message. Aborting...', 1009);\n            return;\n          }\n\n          opcodes['2'].getData.call(self, length);\n        });\n      }\n    },\n    getData: function (length) {\n      var self = this;\n\n      if (self.state.masked) {\n        self.expectHeader(4, function (data) {\n          var mask = data;\n          self.expectData(length, function (data) {\n            opcodes['2'].finish.call(self, mask, data);\n          });\n        });\n      } else {\n        self.expectData(length, function (data) {\n          opcodes['2'].finish.call(self, null, data);\n        });\n      }\n    },\n    finish: function (mask, data) {\n      var self = this;\n      var packet = this.unmask(mask, data, true) || new Buffer(0);\n      var state = clone(this.state);\n      this.messageHandlers.push(function (callback) {\n        self.applyExtensions(packet, state.lastFragment, state.compressed, function (err, buffer) {\n          if (err) {\n            if (err.type === 1009) {\n              return self.error('Max payload exceeded in compressed binary message. Aborting...', 1009);\n            }\n\n            return self.error(err.message, 1007);\n          }\n\n          if (buffer != null) {\n            if (self.maxPayload == 0 || self.maxPayload > 0 && self.currentMessageLength + buffer.length < self.maxPayload) {\n              self.currentMessage.push(buffer);\n            } else {\n              self.currentMessage = null;\n              self.currentMessage = [];\n              self.currentMessageLength = 0;\n              self.error(new Error('Maximum payload exceeded'), 1009);\n              return;\n            }\n\n            self.currentMessageLength += buffer.length;\n          }\n\n          if (state.lastFragment) {\n            var messageBuffer = Buffer.concat(self.currentMessage);\n            self.currentMessage = [];\n            self.currentMessageLength = 0;\n            self.onbinary(messageBuffer, {\n              masked: state.masked,\n              buffer: messageBuffer\n            });\n          }\n\n          callback();\n        });\n      });\n      this.flush();\n      this.endPacket();\n    }\n  },\n  // close\n  '8': {\n    start: function (data) {\n      var self = this;\n\n      if (self.state.lastFragment == false) {\n        self.error('fragmented close is not supported', 1002);\n        return;\n      } // decode length\n\n\n      var firstLength = data[1] & 0x7f;\n\n      if (firstLength < 126) {\n        opcodes['8'].getData.call(self, firstLength);\n      } else {\n        self.error('control frames cannot have more than 125 bytes of data', 1002);\n      }\n    },\n    getData: function (length) {\n      var self = this;\n\n      if (self.state.masked) {\n        self.expectHeader(4, function (data) {\n          var mask = data;\n          self.expectData(length, function (data) {\n            opcodes['8'].finish.call(self, mask, data);\n          });\n        });\n      } else {\n        self.expectData(length, function (data) {\n          opcodes['8'].finish.call(self, null, data);\n        });\n      }\n    },\n    finish: function (mask, data) {\n      var self = this;\n      data = self.unmask(mask, data, true);\n      var state = clone(this.state);\n      this.messageHandlers.push(function () {\n        if (data && data.length == 1) {\n          self.error('close packets with data must be at least two bytes long', 1002);\n          return;\n        }\n\n        var code = data && data.length > 1 ? readUInt16BE.call(data, 0) : 1000;\n\n        if (!ErrorCodes.isValidErrorCode(code)) {\n          self.error('invalid error code', 1002);\n          return;\n        }\n\n        var message = '';\n\n        if (data && data.length > 2) {\n          var messageBuffer = data.slice(2);\n\n          if (!isValidUTF8(messageBuffer)) {\n            self.error('invalid utf8 sequence', 1007);\n            return;\n          }\n\n          message = messageBuffer.toString('utf8');\n        }\n\n        self.onclose(code, message, {\n          masked: state.masked\n        });\n        self.reset();\n      });\n      this.flush();\n    }\n  },\n  // ping\n  '9': {\n    start: function (data) {\n      var self = this;\n\n      if (self.state.lastFragment == false) {\n        self.error('fragmented ping is not supported', 1002);\n        return;\n      } // decode length\n\n\n      var firstLength = data[1] & 0x7f;\n\n      if (firstLength < 126) {\n        opcodes['9'].getData.call(self, firstLength);\n      } else {\n        self.error('control frames cannot have more than 125 bytes of data', 1002);\n      }\n    },\n    getData: function (length) {\n      var self = this;\n\n      if (self.state.masked) {\n        self.expectHeader(4, function (data) {\n          var mask = data;\n          self.expectData(length, function (data) {\n            opcodes['9'].finish.call(self, mask, data);\n          });\n        });\n      } else {\n        self.expectData(length, function (data) {\n          opcodes['9'].finish.call(self, null, data);\n        });\n      }\n    },\n    finish: function (mask, data) {\n      var self = this;\n      data = this.unmask(mask, data, true);\n      var state = clone(this.state);\n      this.messageHandlers.push(function (callback) {\n        self.onping(data, {\n          masked: state.masked,\n          binary: true\n        });\n        callback();\n      });\n      this.flush();\n      this.endPacket();\n    }\n  },\n  // pong\n  '10': {\n    start: function (data) {\n      var self = this;\n\n      if (self.state.lastFragment == false) {\n        self.error('fragmented pong is not supported', 1002);\n        return;\n      } // decode length\n\n\n      var firstLength = data[1] & 0x7f;\n\n      if (firstLength < 126) {\n        opcodes['10'].getData.call(self, firstLength);\n      } else {\n        self.error('control frames cannot have more than 125 bytes of data', 1002);\n      }\n    },\n    getData: function (length) {\n      var self = this;\n\n      if (this.state.masked) {\n        this.expectHeader(4, function (data) {\n          var mask = data;\n          self.expectData(length, function (data) {\n            opcodes['10'].finish.call(self, mask, data);\n          });\n        });\n      } else {\n        this.expectData(length, function (data) {\n          opcodes['10'].finish.call(self, null, data);\n        });\n      }\n    },\n    finish: function (mask, data) {\n      var self = this;\n      data = self.unmask(mask, data, true);\n      var state = clone(this.state);\n      this.messageHandlers.push(function (callback) {\n        self.onpong(data, {\n          masked: state.masked,\n          binary: true\n        });\n        callback();\n      });\n      this.flush();\n      this.endPacket();\n    }\n  }\n};","map":{"version":3,"sources":["/home/subho/Programming/Internet-Technology/Athena/node_modules/ws/lib/Receiver.js"],"names":["util","require","isValidUTF8","ErrorCodes","BufferPool","bufferUtil","PerMessageDeflate","Receiver","extensions","maxPayload","TypeError","fragmentedPoolPrevUsed","fragmentedBufferPool","db","length","used","Math","ceil","unfragmentedPoolPrevUsed","unfragmentedBufferPool","currentPayloadLength","state","activeFragmentedOperation","lastFragment","masked","opcode","fragmentedOperation","overflow","headerBuffer","Buffer","expectOffset","expectBuffer","expectHandler","currentMessage","currentMessageLength","messageHandlers","expectHeader","processPacket","dead","processing","onerror","ontext","onbinary","onclose","onping","onpong","module","exports","prototype","add","data","dataLength","push","toRead","min","fastCopy","slice","bufferForHandler","call","cleanup","handler","fromOverflow","pop","read","expectData","allocateFromPool","isFragmented","get","extensionName","error","compressed","opcodes","start","endPacket","reset","unmask","mask","buf","binary","toString","reason","protocolErrorCode","Error","constructor","flush","shift","self","applyExtensions","messageBuffer","fin","callback","decompress","err","buffer","maxPayloadExceeded","undefined","fullLength","readUInt16BE","readUInt32BE","srcBuffer","dstBuffer","dstOffset","copy","clone","obj","cloned","k","hasOwnProperty","firstLength","getData","finish","packet","type","message","concat","code","isValidErrorCode"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AAEA,IAAIA,IAAI,GAAGC,OAAO,CAAC,MAAD,CAAlB;AAAA,IACIC,WAAW,GAAGD,OAAO,CAAC,cAAD,CADzB;AAAA,IAEIE,UAAU,GAAGF,OAAO,CAAC,cAAD,CAFxB;AAAA,IAGIG,UAAU,GAAGH,OAAO,CAAC,cAAD,CAHxB;AAAA,IAIII,UAAU,GAAGJ,OAAO,CAAC,cAAD,CAJxB;AAAA,IAKIK,iBAAiB,GAAGL,OAAO,CAAC,qBAAD,CAL/B;AAOA;AACA;AACA;;;AAEA,SAASM,QAAT,CAAmBC,UAAnB,EAA8BC,UAA9B,EAA0C;AACxC,MAAI,gBAAgBF,QAAhB,KAA6B,KAAjC,EAAwC;AACtC,UAAM,IAAIG,SAAJ,CAAc,kCAAd,CAAN;AACD;;AACD,MAAG,OAAOF,UAAP,KAAoB,QAAvB,EAAgC;AAC9BC,IAAAA,UAAU,GAACD,UAAX;AACAA,IAAAA,UAAU,GAAC,EAAX;AACD,GAPuC,CAUxC;;;AACA,MAAIG,sBAAsB,GAAG,CAAC,CAA9B;AACA,OAAKC,oBAAL,GAA4B,IAAIR,UAAJ,CAAe,IAAf,EAAqB,UAASS,EAAT,EAAaC,MAAb,EAAqB;AACpE,WAAOD,EAAE,CAACE,IAAH,GAAUD,MAAjB;AACD,GAF2B,EAEzB,UAASD,EAAT,EAAa;AACd,WAAOF,sBAAsB,GAAGA,sBAAsB,IAAI,CAA1B,GAC9BK,IAAI,CAACC,IAAL,CAAU,CAACN,sBAAsB,GAAGE,EAAE,CAACE,IAA7B,IAAqC,CAA/C,CAD8B,GAE9BF,EAAE,CAACE,IAFL;AAGD,GAN2B,CAA5B,CAZwC,CAoBxC;;AACA,MAAIG,wBAAwB,GAAG,CAAC,CAAhC;AACA,OAAKC,sBAAL,GAA8B,IAAIf,UAAJ,CAAe,IAAf,EAAqB,UAASS,EAAT,EAAaC,MAAb,EAAqB;AACtE,WAAOD,EAAE,CAACE,IAAH,GAAUD,MAAjB;AACD,GAF6B,EAE3B,UAASD,EAAT,EAAa;AACd,WAAOK,wBAAwB,GAAGA,wBAAwB,IAAI,CAA5B,GAChCF,IAAI,CAACC,IAAL,CAAU,CAACC,wBAAwB,GAAGL,EAAE,CAACE,IAA/B,IAAuC,CAAjD,CADgC,GAEhCF,EAAE,CAACE,IAFL;AAGD,GAN6B,CAA9B;AAOA,OAAKP,UAAL,GAAkBA,UAAU,IAAI,EAAhC;AACA,OAAKC,UAAL,GAAkBA,UAAU,IAAI,CAAhC;AACA,OAAKW,oBAAL,GAA4B,CAA5B;AACA,OAAKC,KAAL,GAAa;AACXC,IAAAA,yBAAyB,EAAE,IADhB;AAEXC,IAAAA,YAAY,EAAE,KAFH;AAGXC,IAAAA,MAAM,EAAE,KAHG;AAIXC,IAAAA,MAAM,EAAE,CAJG;AAKXC,IAAAA,mBAAmB,EAAE;AALV,GAAb;AAOA,OAAKC,QAAL,GAAgB,EAAhB;AACA,OAAKC,YAAL,GAAoB,IAAIC,MAAJ,CAAW,EAAX,CAApB;AACA,OAAKC,YAAL,GAAoB,CAApB;AACA,OAAKC,YAAL,GAAoB,IAApB;AACA,OAAKC,aAAL,GAAqB,IAArB;AACA,OAAKC,cAAL,GAAsB,EAAtB;AACA,OAAKC,oBAAL,GAA4B,CAA5B;AACA,OAAKC,eAAL,GAAuB,EAAvB;AACA,OAAKC,YAAL,CAAkB,CAAlB,EAAqB,KAAKC,aAA1B;AACA,OAAKC,IAAL,GAAY,KAAZ;AACA,OAAKC,UAAL,GAAkB,KAAlB;;AAEA,OAAKC,OAAL,GAAe,YAAW,CAAE,CAA5B;;AACA,OAAKC,MAAL,GAAc,YAAW,CAAE,CAA3B;;AACA,OAAKC,QAAL,GAAgB,YAAW,CAAE,CAA7B;;AACA,OAAKC,OAAL,GAAe,YAAW,CAAE,CAA5B;;AACA,OAAKC,MAAL,GAAc,YAAW,CAAE,CAA3B;;AACA,OAAKC,MAAL,GAAc,YAAW,CAAE,CAA3B;AACD;;AAEDC,MAAM,CAACC,OAAP,GAAiBxC,QAAjB;AAEA;AACA;AACA;AACA;AACA;;AAEAA,QAAQ,CAACyC,SAAT,CAAmBC,GAAnB,GAAyB,UAASC,IAAT,EAAe;AACtC,MAAI,KAAKZ,IAAT,EAAe;AACf,MAAIa,UAAU,GAAGD,IAAI,CAACpC,MAAtB;AACA,MAAIqC,UAAU,IAAI,CAAlB,EAAqB;;AACrB,MAAI,KAAKpB,YAAL,IAAqB,IAAzB,EAA+B;AAC7B,SAAKJ,QAAL,CAAcyB,IAAd,CAAmBF,IAAnB;AACA;AACD;;AACD,MAAIG,MAAM,GAAGrC,IAAI,CAACsC,GAAL,CAASH,UAAT,EAAqB,KAAKpB,YAAL,CAAkBjB,MAAlB,GAA2B,KAAKgB,YAArD,CAAb;AACAyB,EAAAA,QAAQ,CAACF,MAAD,EAASH,IAAT,EAAe,KAAKnB,YAApB,EAAkC,KAAKD,YAAvC,CAAR;AACA,OAAKA,YAAL,IAAqBuB,MAArB;;AACA,MAAIA,MAAM,GAAGF,UAAb,EAAyB;AACvB,SAAKxB,QAAL,CAAcyB,IAAd,CAAmBF,IAAI,CAACM,KAAL,CAAWH,MAAX,CAAnB;AACD;;AACD,SAAO,KAAKtB,YAAL,IAAqB,KAAKD,YAAL,IAAqB,KAAKC,YAAL,CAAkBjB,MAAnE,EAA2E;AACzE,QAAI2C,gBAAgB,GAAG,KAAK1B,YAA5B;AACA,SAAKA,YAAL,GAAoB,IAApB;AACA,SAAKD,YAAL,GAAoB,CAApB;AACA,SAAKE,aAAL,CAAmB0B,IAAnB,CAAwB,IAAxB,EAA8BD,gBAA9B;AACD;AACF,CApBD;AAsBA;AACA;AACA;AACA;AACA;;;AAEAlD,QAAQ,CAACyC,SAAT,CAAmBW,OAAnB,GAA6B,YAAW;AACtC,OAAKrB,IAAL,GAAY,IAAZ;AACA,OAAKX,QAAL,GAAgB,IAAhB;AACA,OAAKC,YAAL,GAAoB,IAApB;AACA,OAAKG,YAAL,GAAoB,IAApB;AACA,OAAKC,aAAL,GAAqB,IAArB;AACA,OAAKb,sBAAL,GAA8B,IAA9B;AACA,OAAKP,oBAAL,GAA4B,IAA5B;AACA,OAAKS,KAAL,GAAa,IAAb;AACA,OAAKY,cAAL,GAAsB,IAAtB;AACA,OAAKO,OAAL,GAAe,IAAf;AACA,OAAKC,MAAL,GAAc,IAAd;AACA,OAAKC,QAAL,GAAgB,IAAhB;AACA,OAAKC,OAAL,GAAe,IAAf;AACA,OAAKC,MAAL,GAAc,IAAd;AACA,OAAKC,MAAL,GAAc,IAAd;AACD,CAhBD;AAkBA;AACA;AACA;AACA;AACA;;;AAEAtC,QAAQ,CAACyC,SAAT,CAAmBZ,YAAnB,GAAkC,UAAStB,MAAT,EAAiB8C,OAAjB,EAA0B;AAC1D,MAAI9C,MAAM,IAAI,CAAd,EAAiB;AACf8C,IAAAA,OAAO,CAAC,IAAD,CAAP;AACA;AACD;;AACD,OAAK7B,YAAL,GAAoB,KAAKH,YAAL,CAAkB4B,KAAlB,CAAwB,KAAK1B,YAA7B,EAA2C,KAAKA,YAAL,GAAoBhB,MAA/D,CAApB;AACA,OAAKkB,aAAL,GAAqB4B,OAArB;AACA,MAAIP,MAAM,GAAGvC,MAAb;;AACA,SAAOuC,MAAM,GAAG,CAAT,IAAc,KAAK1B,QAAL,CAAcb,MAAd,GAAuB,CAA5C,EAA+C;AAC7C,QAAI+C,YAAY,GAAG,KAAKlC,QAAL,CAAcmC,GAAd,EAAnB;AACA,QAAIT,MAAM,GAAGQ,YAAY,CAAC/C,MAA1B,EAAkC,KAAKa,QAAL,CAAcyB,IAAd,CAAmBS,YAAY,CAACL,KAAb,CAAmBH,MAAnB,CAAnB;AAClC,QAAIU,IAAI,GAAG/C,IAAI,CAACsC,GAAL,CAASO,YAAY,CAAC/C,MAAtB,EAA8BuC,MAA9B,CAAX;AACAE,IAAAA,QAAQ,CAACQ,IAAD,EAAOF,YAAP,EAAqB,KAAK9B,YAA1B,EAAwC,KAAKD,YAA7C,CAAR;AACA,SAAKA,YAAL,IAAqBiC,IAArB;AACAV,IAAAA,MAAM,IAAIU,IAAV;AACD;AACF,CAhBD;AAkBA;AACA;AACA;AACA;AACA;;;AAEAxD,QAAQ,CAACyC,SAAT,CAAmBgB,UAAnB,GAAgC,UAASlD,MAAT,EAAiB8C,OAAjB,EAA0B;AACxD,MAAI9C,MAAM,IAAI,CAAd,EAAiB;AACf8C,IAAAA,OAAO,CAAC,IAAD,CAAP;AACA;AACD;;AACD,OAAK7B,YAAL,GAAoB,KAAKkC,gBAAL,CAAsBnD,MAAtB,EAA8B,KAAKO,KAAL,CAAWK,mBAAzC,CAApB;AACA,OAAKM,aAAL,GAAqB4B,OAArB;AACA,MAAIP,MAAM,GAAGvC,MAAb;;AACA,SAAOuC,MAAM,GAAG,CAAT,IAAc,KAAK1B,QAAL,CAAcb,MAAd,GAAuB,CAA5C,EAA+C;AAC7C,QAAI+C,YAAY,GAAG,KAAKlC,QAAL,CAAcmC,GAAd,EAAnB;AACA,QAAIT,MAAM,GAAGQ,YAAY,CAAC/C,MAA1B,EAAkC,KAAKa,QAAL,CAAcyB,IAAd,CAAmBS,YAAY,CAACL,KAAb,CAAmBH,MAAnB,CAAnB;AAClC,QAAIU,IAAI,GAAG/C,IAAI,CAACsC,GAAL,CAASO,YAAY,CAAC/C,MAAtB,EAA8BuC,MAA9B,CAAX;AACAE,IAAAA,QAAQ,CAACQ,IAAD,EAAOF,YAAP,EAAqB,KAAK9B,YAA1B,EAAwC,KAAKD,YAA7C,CAAR;AACA,SAAKA,YAAL,IAAqBiC,IAArB;AACAV,IAAAA,MAAM,IAAIU,IAAV;AACD;AACF,CAhBD;AAkBA;AACA;AACA;AACA;AACA;;;AAEAxD,QAAQ,CAACyC,SAAT,CAAmBiB,gBAAnB,GAAsC,UAASnD,MAAT,EAAiBoD,YAAjB,EAA+B;AACnE,SAAO,CAACA,YAAY,GAAG,KAAKtD,oBAAR,GAA+B,KAAKO,sBAAjD,EAAyEgD,GAAzE,CAA6ErD,MAA7E,CAAP;AACD,CAFD;AAIA;AACA;AACA;AACA;AACA;;;AAEAP,QAAQ,CAACyC,SAAT,CAAmBX,aAAnB,GAAmC,UAAUa,IAAV,EAAgB;AACjD,MAAI,KAAK1C,UAAL,CAAgBF,iBAAiB,CAAC8D,aAAlC,CAAJ,EAAsD;AACpD,QAAI,CAAClB,IAAI,CAAC,CAAD,CAAJ,GAAU,IAAX,KAAoB,CAAxB,EAA2B;AACzB,WAAKmB,KAAL,CAAW,sCAAX,EAAmD,IAAnD;AACA;AACD;AACF,GALD,MAKO;AACL,QAAI,CAACnB,IAAI,CAAC,CAAD,CAAJ,GAAU,IAAX,KAAoB,CAAxB,EAA2B;AACzB,WAAKmB,KAAL,CAAW,+BAAX,EAA4C,IAA5C;AACA;AACD;AACF;;AACD,OAAKhD,KAAL,CAAWE,YAAX,GAA0B,CAAC2B,IAAI,CAAC,CAAD,CAAJ,GAAU,IAAX,KAAoB,IAA9C;AACA,OAAK7B,KAAL,CAAWG,MAAX,GAAoB,CAAC0B,IAAI,CAAC,CAAD,CAAJ,GAAU,IAAX,KAAoB,IAAxC;AACA,MAAIoB,UAAU,GAAG,CAACpB,IAAI,CAAC,CAAD,CAAJ,GAAU,IAAX,KAAoB,IAArC;AACA,MAAIzB,MAAM,GAAGyB,IAAI,CAAC,CAAD,CAAJ,GAAU,GAAvB;;AACA,MAAIzB,MAAM,KAAK,CAAf,EAAkB;AAChB,QAAI6C,UAAJ,EAAgB;AACd,WAAKD,KAAL,CAAW,gEAAX,EAA6E,IAA7E;AACA;AACD,KAJe,CAKhB;;;AACA,SAAKhD,KAAL,CAAWK,mBAAX,GAAiC,IAAjC;AACA,SAAKL,KAAL,CAAWI,MAAX,GAAoB,KAAKJ,KAAL,CAAWC,yBAA/B;;AACA,QAAI,EAAE,KAAKD,KAAL,CAAWI,MAAX,IAAqB,CAArB,IAA0B,KAAKJ,KAAL,CAAWI,MAAX,IAAqB,CAAjD,CAAJ,EAAyD;AACvD,WAAK4C,KAAL,CAAW,iDAAX,EAA8D,IAA9D;AACA;AACD;AACF,GAZD,MAaK;AACH,QAAI5C,MAAM,GAAG,CAAT,IAAc,KAAKJ,KAAL,CAAWC,yBAAX,IAAwC,IAA1D,EAAgE;AAC9D,WAAK+C,KAAL,CAAW,6DAAX,EAA0E,IAA1E;AACA;AACD;;AACD,QAAI5C,MAAM,IAAI,CAAV,IAAe6C,UAAnB,EAA+B;AAC7B,WAAKD,KAAL,CAAW,4DAAX,EAAyE,IAAzE;AACA;AACD;;AACD,SAAKhD,KAAL,CAAWiD,UAAX,GAAwBA,UAAxB;AACA,SAAKjD,KAAL,CAAWI,MAAX,GAAoBA,MAApB;;AACA,QAAI,KAAKJ,KAAL,CAAWE,YAAX,KAA4B,KAAhC,EAAuC;AACrC,WAAKF,KAAL,CAAWK,mBAAX,GAAiC,IAAjC;AACA,WAAKL,KAAL,CAAWC,yBAAX,GAAuCG,MAAvC;AACD,KAHD,MAIK,KAAKJ,KAAL,CAAWK,mBAAX,GAAiC,KAAjC;AACN;;AACD,MAAIkC,OAAO,GAAGW,OAAO,CAAC,KAAKlD,KAAL,CAAWI,MAAZ,CAArB;AACA,MAAI,OAAOmC,OAAP,IAAkB,WAAtB,EAAmC,KAAKS,KAAL,CAAW,2BAA2B,KAAKhD,KAAL,CAAWI,MAAjD,EAAyD,IAAzD,EAAnC,KACK;AACHmC,IAAAA,OAAO,CAACY,KAAR,CAAcd,IAAd,CAAmB,IAAnB,EAAyBR,IAAzB;AACD;AACF,CAnDD;AAqDA;AACA;AACA;AACA;AACA;;;AAEA3C,QAAQ,CAACyC,SAAT,CAAmByB,SAAnB,GAA+B,YAAW;AACxC,MAAI,KAAKnC,IAAT,EAAe;AACf,MAAI,CAAC,KAAKjB,KAAL,CAAWK,mBAAhB,EAAqC,KAAKP,sBAAL,CAA4BuD,KAA5B,CAAkC,IAAlC,EAArC,KACK,IAAI,KAAKrD,KAAL,CAAWE,YAAf,EAA6B,KAAKX,oBAAL,CAA0B8D,KAA1B,CAAgC,IAAhC;AAClC,OAAK5C,YAAL,GAAoB,CAApB;AACA,OAAKC,YAAL,GAAoB,IAApB;AACA,OAAKC,aAAL,GAAqB,IAArB;;AACA,MAAI,KAAKX,KAAL,CAAWE,YAAX,IAA2B,KAAKF,KAAL,CAAWI,MAAX,KAAsB,KAAKJ,KAAL,CAAWC,yBAAhE,EAA2F;AACzF;AACA,SAAKD,KAAL,CAAWC,yBAAX,GAAuC,IAAvC;AACD;;AACD,OAAKF,oBAAL,GAA4B,CAA5B;AACA,OAAKC,KAAL,CAAWE,YAAX,GAA0B,KAA1B;AACA,OAAKF,KAAL,CAAWI,MAAX,GAAoB,KAAKJ,KAAL,CAAWC,yBAAX,IAAwC,IAAxC,GAA+C,KAAKD,KAAL,CAAWC,yBAA1D,GAAsF,CAA1G;AACA,OAAKD,KAAL,CAAWG,MAAX,GAAoB,KAApB;AACA,OAAKY,YAAL,CAAkB,CAAlB,EAAqB,KAAKC,aAA1B;AACD,CAhBD;AAkBA;AACA;AACA;AACA;AACA;;;AAEA9B,QAAQ,CAACyC,SAAT,CAAmB0B,KAAnB,GAA2B,YAAW;AACpC,MAAI,KAAKpC,IAAT,EAAe;AACf,OAAKjB,KAAL,GAAa;AACXC,IAAAA,yBAAyB,EAAE,IADhB;AAEXC,IAAAA,YAAY,EAAE,KAFH;AAGXC,IAAAA,MAAM,EAAE,KAHG;AAIXC,IAAAA,MAAM,EAAE,CAJG;AAKXC,IAAAA,mBAAmB,EAAE;AALV,GAAb;AAOA,OAAKd,oBAAL,CAA0B8D,KAA1B,CAAgC,IAAhC;AACA,OAAKvD,sBAAL,CAA4BuD,KAA5B,CAAkC,IAAlC;AACA,OAAK5C,YAAL,GAAoB,CAApB;AACA,OAAKC,YAAL,GAAoB,IAApB;AACA,OAAKC,aAAL,GAAqB,IAArB;AACA,OAAKL,QAAL,GAAgB,EAAhB;AACA,OAAKM,cAAL,GAAsB,EAAtB;AACA,OAAKC,oBAAL,GAA4B,CAA5B;AACA,OAAKC,eAAL,GAAuB,EAAvB;AACA,OAAKf,oBAAL,GAA4B,CAA5B;AACD,CAnBD;AAqBA;AACA;AACA;AACA;AACA;;;AAEAb,QAAQ,CAACyC,SAAT,CAAmB2B,MAAnB,GAA4B,UAAUC,IAAV,EAAgBC,GAAhB,EAAqBC,MAArB,EAA6B;AACvD,MAAIF,IAAI,IAAI,IAAR,IAAgBC,GAAG,IAAI,IAA3B,EAAiCxE,UAAU,CAACsE,MAAX,CAAkBE,GAAlB,EAAuBD,IAAvB;AACjC,MAAIE,MAAJ,EAAY,OAAOD,GAAP;AACZ,SAAOA,GAAG,IAAI,IAAP,GAAcA,GAAG,CAACE,QAAJ,CAAa,MAAb,CAAd,GAAqC,EAA5C;AACD,CAJD;AAMA;AACA;AACA;AACA;AACA;;;AAEAxE,QAAQ,CAACyC,SAAT,CAAmBqB,KAAnB,GAA2B,UAAUW,MAAV,EAAkBC,iBAAlB,EAAqC;AAC9D,MAAI,KAAK3C,IAAT,EAAe;AACf,OAAKoC,KAAL;;AACA,MAAG,OAAOM,MAAP,IAAiB,QAApB,EAA6B;AAC3B,SAAKxC,OAAL,CAAa,IAAI0C,KAAJ,CAAUF,MAAV,CAAb,EAAgCC,iBAAhC;AACD,GAFD,MAGK,IAAGD,MAAM,CAACG,WAAP,IAAsBD,KAAzB,EAA+B;AAClC,SAAK1C,OAAL,CAAawC,MAAb,EAAqBC,iBAArB;AACD,GAFI,MAGD;AACF,SAAKzC,OAAL,CAAa,IAAI0C,KAAJ,CAAU,kBAAV,CAAb,EAA2CD,iBAA3C;AACD;;AACD,SAAO,IAAP;AACD,CAbD;AAeA;AACA;AACA;AACA;AACA;;;AAEA1E,QAAQ,CAACyC,SAAT,CAAmBoC,KAAnB,GAA2B,YAAW;AACpC,MAAI,KAAK7C,UAAL,IAAmB,KAAKD,IAA5B,EAAkC;AAElC,MAAIsB,OAAO,GAAG,KAAKzB,eAAL,CAAqBkD,KAArB,EAAd;AACA,MAAI,CAACzB,OAAL,EAAc;AAEd,OAAKrB,UAAL,GAAkB,IAAlB;AACA,MAAI+C,IAAI,GAAG,IAAX;AAEA1B,EAAAA,OAAO,CAAC,YAAW;AACjB0B,IAAAA,IAAI,CAAC/C,UAAL,GAAkB,KAAlB;AACA+C,IAAAA,IAAI,CAACF,KAAL;AACD,GAHM,CAAP;AAID,CAbD;AAeA;AACA;AACA;AACA;AACA;;;AAEA7E,QAAQ,CAACyC,SAAT,CAAmBuC,eAAnB,GAAqC,UAASC,aAAT,EAAwBC,GAAxB,EAA6BnB,UAA7B,EAAyCoB,QAAzC,EAAmD;AACtF,MAAIJ,IAAI,GAAG,IAAX;;AACA,MAAIhB,UAAJ,EAAgB;AACd,SAAK9D,UAAL,CAAgBF,iBAAiB,CAAC8D,aAAlC,EAAiDuB,UAAjD,CAA4DH,aAA5D,EAA2EC,GAA3E,EAAgF,UAASG,GAAT,EAAcC,MAAd,EAAsB;AACpG,UAAIP,IAAI,CAAChD,IAAT,EAAe;;AACf,UAAIsD,GAAJ,EAAS;AACPF,QAAAA,QAAQ,CAAC,IAAIR,KAAJ,CAAU,yBAAV,CAAD,CAAR;AACA;AACD;;AACDQ,MAAAA,QAAQ,CAAC,IAAD,EAAOG,MAAP,CAAR;AACD,KAPD;AAQD,GATD,MASO;AACLH,IAAAA,QAAQ,CAAC,IAAD,EAAOF,aAAP,CAAR;AACD;AACF,CAdD;AAgBA;AACA;AACA;AACA;AACA;;;AACAjF,QAAQ,CAACyC,SAAT,CAAmB8C,kBAAnB,GAAwC,UAAShF,MAAT,EAAiB;AACvD,MAAI,KAAKL,UAAL,KAAmBsF,SAAnB,IAAgC,KAAKtF,UAAL,KAAoB,IAApD,IAA4D,KAAKA,UAAL,GAAkB,CAAlF,EAAqF;AACnF,WAAO,KAAP;AACD;;AACD,MAAIuF,UAAU,GAAG,KAAK5E,oBAAL,GAA4BN,MAA7C;;AACA,MAAIkF,UAAU,GAAG,KAAKvF,UAAtB,EAAkC;AAChC,SAAKW,oBAAL,GAA4B4E,UAA5B;AACA,WAAO,KAAP;AACD;;AACD,OAAK3B,KAAL,CAAW,2BAA2B,KAAK5D,UAAhC,GAA6C,QAAxD,EAAkE,IAAlE;AACA,OAAK+E,aAAL,GAAmB,EAAnB;AACA,OAAK7B,OAAL;AAEA,SAAO,IAAP;AACD,CAdD;AAgBA;AACA;AACA;;;AAEA,SAASsC,YAAT,CAAsBzB,KAAtB,EAA6B;AAC3B,SAAO,CAAC,KAAKA,KAAL,KAAa,CAAd,IACA,KAAKA,KAAK,GAAC,CAAX,CADP;AAED;;AAED,SAAS0B,YAAT,CAAsB1B,KAAtB,EAA6B;AAC3B,SAAO,CAAC,KAAKA,KAAL,KAAa,EAAd,KACC,KAAKA,KAAK,GAAC,CAAX,KAAe,EADhB,KAEC,KAAKA,KAAK,GAAC,CAAX,KAAe,CAFhB,IAGA,KAAKA,KAAK,GAAC,CAAX,CAHP;AAID;;AAED,SAASjB,QAAT,CAAkBzC,MAAlB,EAA0BqF,SAA1B,EAAqCC,SAArC,EAAgDC,SAAhD,EAA2D;AACzD,UAAQvF,MAAR;AACE;AAASqF,MAAAA,SAAS,CAACG,IAAV,CAAeF,SAAf,EAA0BC,SAA1B,EAAqC,CAArC,EAAwCvF,MAAxC;AAAiD;;AAC1D,SAAK,EAAL;AAASsF,MAAAA,SAAS,CAACC,SAAS,GAAC,EAAX,CAAT,GAA0BF,SAAS,CAAC,EAAD,CAAnC;;AACT,SAAK,EAAL;AAASC,MAAAA,SAAS,CAACC,SAAS,GAAC,EAAX,CAAT,GAA0BF,SAAS,CAAC,EAAD,CAAnC;;AACT,SAAK,EAAL;AAASC,MAAAA,SAAS,CAACC,SAAS,GAAC,EAAX,CAAT,GAA0BF,SAAS,CAAC,EAAD,CAAnC;;AACT,SAAK,EAAL;AAASC,MAAAA,SAAS,CAACC,SAAS,GAAC,EAAX,CAAT,GAA0BF,SAAS,CAAC,EAAD,CAAnC;;AACT,SAAK,EAAL;AAASC,MAAAA,SAAS,CAACC,SAAS,GAAC,EAAX,CAAT,GAA0BF,SAAS,CAAC,EAAD,CAAnC;;AACT,SAAK,EAAL;AAASC,MAAAA,SAAS,CAACC,SAAS,GAAC,EAAX,CAAT,GAA0BF,SAAS,CAAC,EAAD,CAAnC;;AACT,SAAK,EAAL;AAASC,MAAAA,SAAS,CAACC,SAAS,GAAC,CAAX,CAAT,GAAyBF,SAAS,CAAC,CAAD,CAAlC;;AACT,SAAK,CAAL;AAAQC,MAAAA,SAAS,CAACC,SAAS,GAAC,CAAX,CAAT,GAAyBF,SAAS,CAAC,CAAD,CAAlC;;AACR,SAAK,CAAL;AAAQC,MAAAA,SAAS,CAACC,SAAS,GAAC,CAAX,CAAT,GAAyBF,SAAS,CAAC,CAAD,CAAlC;;AACR,SAAK,CAAL;AAAQC,MAAAA,SAAS,CAACC,SAAS,GAAC,CAAX,CAAT,GAAyBF,SAAS,CAAC,CAAD,CAAlC;;AACR,SAAK,CAAL;AAAQC,MAAAA,SAAS,CAACC,SAAS,GAAC,CAAX,CAAT,GAAyBF,SAAS,CAAC,CAAD,CAAlC;;AACR,SAAK,CAAL;AAAQC,MAAAA,SAAS,CAACC,SAAS,GAAC,CAAX,CAAT,GAAyBF,SAAS,CAAC,CAAD,CAAlC;;AACR,SAAK,CAAL;AAAQC,MAAAA,SAAS,CAACC,SAAS,GAAC,CAAX,CAAT,GAAyBF,SAAS,CAAC,CAAD,CAAlC;;AACR,SAAK,CAAL;AAAQC,MAAAA,SAAS,CAACC,SAAS,GAAC,CAAX,CAAT,GAAyBF,SAAS,CAAC,CAAD,CAAlC;;AACR,SAAK,CAAL;AAAQC,MAAAA,SAAS,CAACC,SAAS,GAAC,CAAX,CAAT,GAAyBF,SAAS,CAAC,CAAD,CAAlC;;AACR,SAAK,CAAL;AAAQC,MAAAA,SAAS,CAACC,SAAD,CAAT,GAAuBF,SAAS,CAAC,CAAD,CAAhC;AAjBV;AAmBD;;AAED,SAASI,KAAT,CAAeC,GAAf,EAAoB;AAClB,MAAIC,MAAM,GAAG,EAAb;;AACA,OAAK,IAAIC,CAAT,IAAcF,GAAd,EAAmB;AACjB,QAAIA,GAAG,CAACG,cAAJ,CAAmBD,CAAnB,CAAJ,EAA2B;AACzBD,MAAAA,MAAM,CAACC,CAAD,CAAN,GAAYF,GAAG,CAACE,CAAD,CAAf;AACD;AACF;;AACD,SAAOD,MAAP;AACD;AAED;AACA;AACA;;;AAEA,IAAIlC,OAAO,GAAG;AACZ;AACA,OAAK;AACHC,IAAAA,KAAK,EAAE,UAAStB,IAAT,EAAe;AACpB,UAAIoC,IAAI,GAAG,IAAX,CADoB,CAEpB;;AACA,UAAIsB,WAAW,GAAG1D,IAAI,CAAC,CAAD,CAAJ,GAAU,IAA5B;;AACA,UAAI0D,WAAW,GAAG,GAAlB,EAAuB;AACrB,YAAItB,IAAI,CAACQ,kBAAL,CAAwBc,WAAxB,CAAJ,EAAyC;AACvCtB,UAAAA,IAAI,CAACjB,KAAL,CAAW,iEAAX,EAA8E,IAA9E;AACA;AACD;;AACDE,QAAAA,OAAO,CAAC,GAAD,CAAP,CAAasC,OAAb,CAAqBnD,IAArB,CAA0B4B,IAA1B,EAAgCsB,WAAhC;AACD,OAND,MAOK,IAAIA,WAAW,IAAI,GAAnB,EAAwB;AAC3BtB,QAAAA,IAAI,CAAClD,YAAL,CAAkB,CAAlB,EAAqB,UAASc,IAAT,EAAe;AAClC,cAAIpC,MAAM,GAAGmF,YAAY,CAACvC,IAAb,CAAkBR,IAAlB,EAAwB,CAAxB,CAAb;;AACA,cAAIoC,IAAI,CAACQ,kBAAL,CAAwBhF,MAAxB,CAAJ,EAAoC;AAClCwE,YAAAA,IAAI,CAACjB,KAAL,CAAW,iEAAX,EAA8E,IAA9E;AACA;AACD;;AACDE,UAAAA,OAAO,CAAC,GAAD,CAAP,CAAasC,OAAb,CAAqBnD,IAArB,CAA0B4B,IAA1B,EAAgCxE,MAAhC;AACD,SAPD;AAQD,OATI,MAUA,IAAI8F,WAAW,IAAI,GAAnB,EAAwB;AAC3BtB,QAAAA,IAAI,CAAClD,YAAL,CAAkB,CAAlB,EAAqB,UAASc,IAAT,EAAe;AAClC,cAAIgD,YAAY,CAACxC,IAAb,CAAkBR,IAAlB,EAAwB,CAAxB,KAA8B,CAAlC,EAAqC;AACnCoC,YAAAA,IAAI,CAACjB,KAAL,CAAW,0EAAX,EAAuF,IAAvF;AACA;AACD;;AACD,cAAIvD,MAAM,GAAGoF,YAAY,CAACxC,IAAb,CAAkBR,IAAlB,EAAwB,CAAxB,CAAb;;AACA,cAAIoC,IAAI,CAACQ,kBAAL,CAAwBhF,MAAxB,CAAJ,EAAoC;AAClCwE,YAAAA,IAAI,CAACjB,KAAL,CAAW,iEAAX,EAA8E,IAA9E;AACA;AACD;;AACDE,UAAAA,OAAO,CAAC,GAAD,CAAP,CAAasC,OAAb,CAAqBnD,IAArB,CAA0B4B,IAA1B,EAAgCY,YAAY,CAACxC,IAAb,CAAkBR,IAAlB,EAAwB,CAAxB,CAAhC;AACD,SAXD;AAYD;AACF,KApCE;AAqCH2D,IAAAA,OAAO,EAAE,UAAS/F,MAAT,EAAiB;AACxB,UAAIwE,IAAI,GAAG,IAAX;;AACA,UAAIA,IAAI,CAACjE,KAAL,CAAWG,MAAf,EAAuB;AACrB8D,QAAAA,IAAI,CAAClD,YAAL,CAAkB,CAAlB,EAAqB,UAASc,IAAT,EAAe;AAClC,cAAI0B,IAAI,GAAG1B,IAAX;AACAoC,UAAAA,IAAI,CAACtB,UAAL,CAAgBlD,MAAhB,EAAwB,UAASoC,IAAT,EAAe;AACrCqB,YAAAA,OAAO,CAAC,GAAD,CAAP,CAAauC,MAAb,CAAoBpD,IAApB,CAAyB4B,IAAzB,EAA+BV,IAA/B,EAAqC1B,IAArC;AACD,WAFD;AAGD,SALD;AAMD,OAPD,MAQK;AACHoC,QAAAA,IAAI,CAACtB,UAAL,CAAgBlD,MAAhB,EAAwB,UAASoC,IAAT,EAAe;AACrCqB,UAAAA,OAAO,CAAC,GAAD,CAAP,CAAauC,MAAb,CAAoBpD,IAApB,CAAyB4B,IAAzB,EAA+B,IAA/B,EAAqCpC,IAArC;AACD,SAFD;AAGD;AACF,KApDE;AAqDH4D,IAAAA,MAAM,EAAE,UAASlC,IAAT,EAAe1B,IAAf,EAAqB;AAC3B,UAAIoC,IAAI,GAAG,IAAX;AACA,UAAIyB,MAAM,GAAG,KAAKpC,MAAL,CAAYC,IAAZ,EAAkB1B,IAAlB,EAAwB,IAAxB,KAAiC,IAAIrB,MAAJ,CAAW,CAAX,CAA9C;AACA,UAAIR,KAAK,GAAGkF,KAAK,CAAC,KAAKlF,KAAN,CAAjB;AACA,WAAKc,eAAL,CAAqBiB,IAArB,CAA0B,UAASsC,QAAT,EAAmB;AAC3CJ,QAAAA,IAAI,CAACC,eAAL,CAAqBwB,MAArB,EAA6B1F,KAAK,CAACE,YAAnC,EAAiDF,KAAK,CAACiD,UAAvD,EAAmE,UAASsB,GAAT,EAAcC,MAAd,EAAsB;AACvF,cAAID,GAAJ,EAAS;AACP,gBAAGA,GAAG,CAACoB,IAAJ,KAAW,IAAd,EAAmB;AACf,qBAAO1B,IAAI,CAACjB,KAAL,CAAW,iEAAX,EAA8E,IAA9E,CAAP;AACH;;AACD,mBAAOiB,IAAI,CAACjB,KAAL,CAAWuB,GAAG,CAACqB,OAAf,EAAwB,IAAxB,CAAP;AACD;;AACD,cAAIpB,MAAM,IAAI,IAAd,EAAoB;AAClB,gBAAIP,IAAI,CAAC7E,UAAL,IAAiB,CAAjB,IAAuB6E,IAAI,CAAC7E,UAAL,GAAkB,CAAlB,IAAwB6E,IAAI,CAACpD,oBAAL,GAA4B2D,MAAM,CAAC/E,MAApC,GAA8CwE,IAAI,CAAC7E,UAArG,EAAkH;AAChH6E,cAAAA,IAAI,CAACrD,cAAL,CAAoBmB,IAApB,CAAyByC,MAAzB;AACD,aAFD,MAGI;AACAP,cAAAA,IAAI,CAACrD,cAAL,GAAoB,IAApB;AACAqD,cAAAA,IAAI,CAACrD,cAAL,GAAsB,EAAtB;AACAqD,cAAAA,IAAI,CAACpD,oBAAL,GAA4B,CAA5B;AACAoD,cAAAA,IAAI,CAACjB,KAAL,CAAW,IAAIa,KAAJ,CAAU,2CAAyCI,IAAI,CAAC7E,UAAxD,CAAX,EAAgF,IAAhF;AACA;AACH;;AACD6E,YAAAA,IAAI,CAACpD,oBAAL,IAA6B2D,MAAM,CAAC/E,MAApC;AACD;;AACD,cAAIO,KAAK,CAACE,YAAV,EAAwB;AACtB,gBAAIiE,aAAa,GAAG3D,MAAM,CAACqF,MAAP,CAAc5B,IAAI,CAACrD,cAAnB,CAApB;AACAqD,YAAAA,IAAI,CAACrD,cAAL,GAAsB,EAAtB;AACAqD,YAAAA,IAAI,CAACpD,oBAAL,GAA4B,CAA5B;;AACA,gBAAI,CAAChC,WAAW,CAACsF,aAAD,CAAhB,EAAiC;AAC/BF,cAAAA,IAAI,CAACjB,KAAL,CAAW,uBAAX,EAAoC,IAApC;AACA;AACD;;AACDiB,YAAAA,IAAI,CAAC7C,MAAL,CAAY+C,aAAa,CAACT,QAAd,CAAuB,MAAvB,CAAZ,EAA4C;AAACvD,cAAAA,MAAM,EAAEH,KAAK,CAACG,MAAf;AAAuBqE,cAAAA,MAAM,EAAEL;AAA/B,aAA5C;AACD;;AACDE,UAAAA,QAAQ;AACT,SA/BD;AAgCD,OAjCD;AAkCA,WAAKN,KAAL;AACA,WAAKX,SAAL;AACD;AA7FE,GAFO;AAiGZ;AACA,OAAK;AACHD,IAAAA,KAAK,EAAE,UAAStB,IAAT,EAAe;AACpB,UAAIoC,IAAI,GAAG,IAAX,CADoB,CAEpB;;AACA,UAAIsB,WAAW,GAAG1D,IAAI,CAAC,CAAD,CAAJ,GAAU,IAA5B;;AACA,UAAI0D,WAAW,GAAG,GAAlB,EAAuB;AACnB,YAAItB,IAAI,CAACQ,kBAAL,CAAwBc,WAAxB,CAAJ,EAAyC;AACvCtB,UAAAA,IAAI,CAACjB,KAAL,CAAW,8DAAX,EAA2E,IAA3E;AACA;AACD;;AACHE,QAAAA,OAAO,CAAC,GAAD,CAAP,CAAasC,OAAb,CAAqBnD,IAArB,CAA0B4B,IAA1B,EAAgCsB,WAAhC;AACD,OAND,MAOK,IAAIA,WAAW,IAAI,GAAnB,EAAwB;AAC3BtB,QAAAA,IAAI,CAAClD,YAAL,CAAkB,CAAlB,EAAqB,UAASc,IAAT,EAAe;AAClC,cAAIpC,MAAM,GAAGmF,YAAY,CAACvC,IAAb,CAAkBR,IAAlB,EAAwB,CAAxB,CAAb;;AACA,cAAIoC,IAAI,CAACQ,kBAAL,CAAwBhF,MAAxB,CAAJ,EAAoC;AAClCwE,YAAAA,IAAI,CAACjB,KAAL,CAAW,8DAAX,EAA2E,IAA3E;AACA;AACD;;AACDE,UAAAA,OAAO,CAAC,GAAD,CAAP,CAAasC,OAAb,CAAqBnD,IAArB,CAA0B4B,IAA1B,EAAgCxE,MAAhC;AACD,SAPD;AAQD,OATI,MAUA,IAAI8F,WAAW,IAAI,GAAnB,EAAwB;AAC3BtB,QAAAA,IAAI,CAAClD,YAAL,CAAkB,CAAlB,EAAqB,UAASc,IAAT,EAAe;AAClC,cAAIgD,YAAY,CAACxC,IAAb,CAAkBR,IAAlB,EAAwB,CAAxB,KAA8B,CAAlC,EAAqC;AACnCoC,YAAAA,IAAI,CAACjB,KAAL,CAAW,0EAAX,EAAuF,IAAvF;AACA;AACD;;AACD,cAAIvD,MAAM,GAAGoF,YAAY,CAACxC,IAAb,CAAkBR,IAAlB,EAAwB,CAAxB,EAA2B,IAA3B,CAAb;;AACA,cAAIoC,IAAI,CAACQ,kBAAL,CAAwBhF,MAAxB,CAAJ,EAAoC;AAClCwE,YAAAA,IAAI,CAACjB,KAAL,CAAW,8DAAX,EAA2E,IAA3E;AACA;AACD;;AACDE,UAAAA,OAAO,CAAC,GAAD,CAAP,CAAasC,OAAb,CAAqBnD,IAArB,CAA0B4B,IAA1B,EAAgCxE,MAAhC;AACD,SAXD;AAYD;AACF,KApCE;AAqCH+F,IAAAA,OAAO,EAAE,UAAS/F,MAAT,EAAiB;AACxB,UAAIwE,IAAI,GAAG,IAAX;;AACA,UAAIA,IAAI,CAACjE,KAAL,CAAWG,MAAf,EAAuB;AACrB8D,QAAAA,IAAI,CAAClD,YAAL,CAAkB,CAAlB,EAAqB,UAASc,IAAT,EAAe;AAClC,cAAI0B,IAAI,GAAG1B,IAAX;AACAoC,UAAAA,IAAI,CAACtB,UAAL,CAAgBlD,MAAhB,EAAwB,UAASoC,IAAT,EAAe;AACrCqB,YAAAA,OAAO,CAAC,GAAD,CAAP,CAAauC,MAAb,CAAoBpD,IAApB,CAAyB4B,IAAzB,EAA+BV,IAA/B,EAAqC1B,IAArC;AACD,WAFD;AAGD,SALD;AAMD,OAPD,MAQK;AACHoC,QAAAA,IAAI,CAACtB,UAAL,CAAgBlD,MAAhB,EAAwB,UAASoC,IAAT,EAAe;AACrCqB,UAAAA,OAAO,CAAC,GAAD,CAAP,CAAauC,MAAb,CAAoBpD,IAApB,CAAyB4B,IAAzB,EAA+B,IAA/B,EAAqCpC,IAArC;AACD,SAFD;AAGD;AACF,KApDE;AAqDH4D,IAAAA,MAAM,EAAE,UAASlC,IAAT,EAAe1B,IAAf,EAAqB;AAC3B,UAAIoC,IAAI,GAAG,IAAX;AACA,UAAIyB,MAAM,GAAG,KAAKpC,MAAL,CAAYC,IAAZ,EAAkB1B,IAAlB,EAAwB,IAAxB,KAAiC,IAAIrB,MAAJ,CAAW,CAAX,CAA9C;AACA,UAAIR,KAAK,GAAGkF,KAAK,CAAC,KAAKlF,KAAN,CAAjB;AACA,WAAKc,eAAL,CAAqBiB,IAArB,CAA0B,UAASsC,QAAT,EAAmB;AAC3CJ,QAAAA,IAAI,CAACC,eAAL,CAAqBwB,MAArB,EAA6B1F,KAAK,CAACE,YAAnC,EAAiDF,KAAK,CAACiD,UAAvD,EAAmE,UAASsB,GAAT,EAAcC,MAAd,EAAsB;AACvF,cAAID,GAAJ,EAAS;AACP,gBAAGA,GAAG,CAACoB,IAAJ,KAAW,IAAd,EAAmB;AACf,qBAAO1B,IAAI,CAACjB,KAAL,CAAW,gEAAX,EAA6E,IAA7E,CAAP;AACH;;AACD,mBAAOiB,IAAI,CAACjB,KAAL,CAAWuB,GAAG,CAACqB,OAAf,EAAwB,IAAxB,CAAP;AACD;;AACD,cAAIpB,MAAM,IAAI,IAAd,EAAoB;AAClB,gBAAIP,IAAI,CAAC7E,UAAL,IAAiB,CAAjB,IAAuB6E,IAAI,CAAC7E,UAAL,GAAkB,CAAlB,IAAwB6E,IAAI,CAACpD,oBAAL,GAA4B2D,MAAM,CAAC/E,MAApC,GAA8CwE,IAAI,CAAC7E,UAArG,EAAkH;AAChH6E,cAAAA,IAAI,CAACrD,cAAL,CAAoBmB,IAApB,CAAyByC,MAAzB;AACD,aAFD,MAGI;AACAP,cAAAA,IAAI,CAACrD,cAAL,GAAoB,IAApB;AACAqD,cAAAA,IAAI,CAACrD,cAAL,GAAsB,EAAtB;AACAqD,cAAAA,IAAI,CAACpD,oBAAL,GAA4B,CAA5B;AACAoD,cAAAA,IAAI,CAACjB,KAAL,CAAW,IAAIa,KAAJ,CAAU,0BAAV,CAAX,EAAkD,IAAlD;AACA;AACH;;AACDI,YAAAA,IAAI,CAACpD,oBAAL,IAA6B2D,MAAM,CAAC/E,MAApC;AACD;;AACD,cAAIO,KAAK,CAACE,YAAV,EAAwB;AACtB,gBAAIiE,aAAa,GAAG3D,MAAM,CAACqF,MAAP,CAAc5B,IAAI,CAACrD,cAAnB,CAApB;AACAqD,YAAAA,IAAI,CAACrD,cAAL,GAAsB,EAAtB;AACAqD,YAAAA,IAAI,CAACpD,oBAAL,GAA4B,CAA5B;AACAoD,YAAAA,IAAI,CAAC5C,QAAL,CAAc8C,aAAd,EAA6B;AAAChE,cAAAA,MAAM,EAAEH,KAAK,CAACG,MAAf;AAAuBqE,cAAAA,MAAM,EAAEL;AAA/B,aAA7B;AACD;;AACDE,UAAAA,QAAQ;AACT,SA3BD;AA4BD,OA7BD;AA8BA,WAAKN,KAAL;AACA,WAAKX,SAAL;AACD;AAzFE,GAlGO;AA6LZ;AACA,OAAK;AACHD,IAAAA,KAAK,EAAE,UAAStB,IAAT,EAAe;AACpB,UAAIoC,IAAI,GAAG,IAAX;;AACA,UAAIA,IAAI,CAACjE,KAAL,CAAWE,YAAX,IAA2B,KAA/B,EAAsC;AACpC+D,QAAAA,IAAI,CAACjB,KAAL,CAAW,mCAAX,EAAgD,IAAhD;AACA;AACD,OALmB,CAOpB;;;AACA,UAAIuC,WAAW,GAAG1D,IAAI,CAAC,CAAD,CAAJ,GAAU,IAA5B;;AACA,UAAI0D,WAAW,GAAG,GAAlB,EAAuB;AACrBrC,QAAAA,OAAO,CAAC,GAAD,CAAP,CAAasC,OAAb,CAAqBnD,IAArB,CAA0B4B,IAA1B,EAAgCsB,WAAhC;AACD,OAFD,MAGK;AACHtB,QAAAA,IAAI,CAACjB,KAAL,CAAW,wDAAX,EAAqE,IAArE;AACD;AACF,KAhBE;AAiBHwC,IAAAA,OAAO,EAAE,UAAS/F,MAAT,EAAiB;AACxB,UAAIwE,IAAI,GAAG,IAAX;;AACA,UAAIA,IAAI,CAACjE,KAAL,CAAWG,MAAf,EAAuB;AACrB8D,QAAAA,IAAI,CAAClD,YAAL,CAAkB,CAAlB,EAAqB,UAASc,IAAT,EAAe;AAClC,cAAI0B,IAAI,GAAG1B,IAAX;AACAoC,UAAAA,IAAI,CAACtB,UAAL,CAAgBlD,MAAhB,EAAwB,UAASoC,IAAT,EAAe;AACrCqB,YAAAA,OAAO,CAAC,GAAD,CAAP,CAAauC,MAAb,CAAoBpD,IAApB,CAAyB4B,IAAzB,EAA+BV,IAA/B,EAAqC1B,IAArC;AACD,WAFD;AAGD,SALD;AAMD,OAPD,MAQK;AACHoC,QAAAA,IAAI,CAACtB,UAAL,CAAgBlD,MAAhB,EAAwB,UAASoC,IAAT,EAAe;AACrCqB,UAAAA,OAAO,CAAC,GAAD,CAAP,CAAauC,MAAb,CAAoBpD,IAApB,CAAyB4B,IAAzB,EAA+B,IAA/B,EAAqCpC,IAArC;AACD,SAFD;AAGD;AACF,KAhCE;AAiCH4D,IAAAA,MAAM,EAAE,UAASlC,IAAT,EAAe1B,IAAf,EAAqB;AAC3B,UAAIoC,IAAI,GAAG,IAAX;AACApC,MAAAA,IAAI,GAAGoC,IAAI,CAACX,MAAL,CAAYC,IAAZ,EAAkB1B,IAAlB,EAAwB,IAAxB,CAAP;AAEA,UAAI7B,KAAK,GAAGkF,KAAK,CAAC,KAAKlF,KAAN,CAAjB;AACA,WAAKc,eAAL,CAAqBiB,IAArB,CAA0B,YAAW;AACnC,YAAIF,IAAI,IAAIA,IAAI,CAACpC,MAAL,IAAe,CAA3B,EAA8B;AAC5BwE,UAAAA,IAAI,CAACjB,KAAL,CAAW,yDAAX,EAAsE,IAAtE;AACA;AACD;;AACD,YAAI8C,IAAI,GAAGjE,IAAI,IAAIA,IAAI,CAACpC,MAAL,GAAc,CAAtB,GAA0BmF,YAAY,CAACvC,IAAb,CAAkBR,IAAlB,EAAwB,CAAxB,CAA1B,GAAuD,IAAlE;;AACA,YAAI,CAAC/C,UAAU,CAACiH,gBAAX,CAA4BD,IAA5B,CAAL,EAAwC;AACtC7B,UAAAA,IAAI,CAACjB,KAAL,CAAW,oBAAX,EAAiC,IAAjC;AACA;AACD;;AACD,YAAI4C,OAAO,GAAG,EAAd;;AACA,YAAI/D,IAAI,IAAIA,IAAI,CAACpC,MAAL,GAAc,CAA1B,EAA6B;AAC3B,cAAI0E,aAAa,GAAGtC,IAAI,CAACM,KAAL,CAAW,CAAX,CAApB;;AACA,cAAI,CAACtD,WAAW,CAACsF,aAAD,CAAhB,EAAiC;AAC/BF,YAAAA,IAAI,CAACjB,KAAL,CAAW,uBAAX,EAAoC,IAApC;AACA;AACD;;AACD4C,UAAAA,OAAO,GAAGzB,aAAa,CAACT,QAAd,CAAuB,MAAvB,CAAV;AACD;;AACDO,QAAAA,IAAI,CAAC3C,OAAL,CAAawE,IAAb,EAAmBF,OAAnB,EAA4B;AAACzF,UAAAA,MAAM,EAAEH,KAAK,CAACG;AAAf,SAA5B;AACA8D,QAAAA,IAAI,CAACZ,KAAL;AACD,OArBD;AAsBA,WAAKU,KAAL;AACD;AA7DE,GA9LO;AA6PZ;AACA,OAAK;AACHZ,IAAAA,KAAK,EAAE,UAAStB,IAAT,EAAe;AACpB,UAAIoC,IAAI,GAAG,IAAX;;AACA,UAAIA,IAAI,CAACjE,KAAL,CAAWE,YAAX,IAA2B,KAA/B,EAAsC;AACpC+D,QAAAA,IAAI,CAACjB,KAAL,CAAW,kCAAX,EAA+C,IAA/C;AACA;AACD,OALmB,CAOpB;;;AACA,UAAIuC,WAAW,GAAG1D,IAAI,CAAC,CAAD,CAAJ,GAAU,IAA5B;;AACA,UAAI0D,WAAW,GAAG,GAAlB,EAAuB;AACrBrC,QAAAA,OAAO,CAAC,GAAD,CAAP,CAAasC,OAAb,CAAqBnD,IAArB,CAA0B4B,IAA1B,EAAgCsB,WAAhC;AACD,OAFD,MAGK;AACHtB,QAAAA,IAAI,CAACjB,KAAL,CAAW,wDAAX,EAAqE,IAArE;AACD;AACF,KAhBE;AAiBHwC,IAAAA,OAAO,EAAE,UAAS/F,MAAT,EAAiB;AACxB,UAAIwE,IAAI,GAAG,IAAX;;AACA,UAAIA,IAAI,CAACjE,KAAL,CAAWG,MAAf,EAAuB;AACrB8D,QAAAA,IAAI,CAAClD,YAAL,CAAkB,CAAlB,EAAqB,UAASc,IAAT,EAAe;AAClC,cAAI0B,IAAI,GAAG1B,IAAX;AACAoC,UAAAA,IAAI,CAACtB,UAAL,CAAgBlD,MAAhB,EAAwB,UAASoC,IAAT,EAAe;AACrCqB,YAAAA,OAAO,CAAC,GAAD,CAAP,CAAauC,MAAb,CAAoBpD,IAApB,CAAyB4B,IAAzB,EAA+BV,IAA/B,EAAqC1B,IAArC;AACD,WAFD;AAGD,SALD;AAMD,OAPD,MAQK;AACHoC,QAAAA,IAAI,CAACtB,UAAL,CAAgBlD,MAAhB,EAAwB,UAASoC,IAAT,EAAe;AACrCqB,UAAAA,OAAO,CAAC,GAAD,CAAP,CAAauC,MAAb,CAAoBpD,IAApB,CAAyB4B,IAAzB,EAA+B,IAA/B,EAAqCpC,IAArC;AACD,SAFD;AAGD;AACF,KAhCE;AAiCH4D,IAAAA,MAAM,EAAE,UAASlC,IAAT,EAAe1B,IAAf,EAAqB;AAC3B,UAAIoC,IAAI,GAAG,IAAX;AACApC,MAAAA,IAAI,GAAG,KAAKyB,MAAL,CAAYC,IAAZ,EAAkB1B,IAAlB,EAAwB,IAAxB,CAAP;AACA,UAAI7B,KAAK,GAAGkF,KAAK,CAAC,KAAKlF,KAAN,CAAjB;AACA,WAAKc,eAAL,CAAqBiB,IAArB,CAA0B,UAASsC,QAAT,EAAmB;AAC3CJ,QAAAA,IAAI,CAAC1C,MAAL,CAAYM,IAAZ,EAAkB;AAAC1B,UAAAA,MAAM,EAAEH,KAAK,CAACG,MAAf;AAAuBsD,UAAAA,MAAM,EAAE;AAA/B,SAAlB;AACAY,QAAAA,QAAQ;AACT,OAHD;AAIA,WAAKN,KAAL;AACA,WAAKX,SAAL;AACD;AA3CE,GA9PO;AA2SZ;AACA,QAAM;AACJD,IAAAA,KAAK,EAAE,UAAStB,IAAT,EAAe;AACpB,UAAIoC,IAAI,GAAG,IAAX;;AACA,UAAIA,IAAI,CAACjE,KAAL,CAAWE,YAAX,IAA2B,KAA/B,EAAsC;AACpC+D,QAAAA,IAAI,CAACjB,KAAL,CAAW,kCAAX,EAA+C,IAA/C;AACA;AACD,OALmB,CAOpB;;;AACA,UAAIuC,WAAW,GAAG1D,IAAI,CAAC,CAAD,CAAJ,GAAU,IAA5B;;AACA,UAAI0D,WAAW,GAAG,GAAlB,EAAuB;AACrBrC,QAAAA,OAAO,CAAC,IAAD,CAAP,CAAcsC,OAAd,CAAsBnD,IAAtB,CAA2B4B,IAA3B,EAAiCsB,WAAjC;AACD,OAFD,MAGK;AACHtB,QAAAA,IAAI,CAACjB,KAAL,CAAW,wDAAX,EAAqE,IAArE;AACD;AACF,KAhBG;AAiBJwC,IAAAA,OAAO,EAAE,UAAS/F,MAAT,EAAiB;AACxB,UAAIwE,IAAI,GAAG,IAAX;;AACA,UAAI,KAAKjE,KAAL,CAAWG,MAAf,EAAuB;AACrB,aAAKY,YAAL,CAAkB,CAAlB,EAAqB,UAASc,IAAT,EAAe;AAClC,cAAI0B,IAAI,GAAG1B,IAAX;AACAoC,UAAAA,IAAI,CAACtB,UAAL,CAAgBlD,MAAhB,EAAwB,UAASoC,IAAT,EAAe;AACrCqB,YAAAA,OAAO,CAAC,IAAD,CAAP,CAAcuC,MAAd,CAAqBpD,IAArB,CAA0B4B,IAA1B,EAAgCV,IAAhC,EAAsC1B,IAAtC;AACD,WAFD;AAGD,SALD;AAMD,OAPD,MAQK;AACH,aAAKc,UAAL,CAAgBlD,MAAhB,EAAwB,UAASoC,IAAT,EAAe;AACrCqB,UAAAA,OAAO,CAAC,IAAD,CAAP,CAAcuC,MAAd,CAAqBpD,IAArB,CAA0B4B,IAA1B,EAAgC,IAAhC,EAAsCpC,IAAtC;AACD,SAFD;AAGD;AACF,KAhCG;AAiCJ4D,IAAAA,MAAM,EAAE,UAASlC,IAAT,EAAe1B,IAAf,EAAqB;AAC3B,UAAIoC,IAAI,GAAG,IAAX;AACApC,MAAAA,IAAI,GAAGoC,IAAI,CAACX,MAAL,CAAYC,IAAZ,EAAkB1B,IAAlB,EAAwB,IAAxB,CAAP;AACA,UAAI7B,KAAK,GAAGkF,KAAK,CAAC,KAAKlF,KAAN,CAAjB;AACA,WAAKc,eAAL,CAAqBiB,IAArB,CAA0B,UAASsC,QAAT,EAAmB;AAC3CJ,QAAAA,IAAI,CAACzC,MAAL,CAAYK,IAAZ,EAAkB;AAAC1B,UAAAA,MAAM,EAAEH,KAAK,CAACG,MAAf;AAAuBsD,UAAAA,MAAM,EAAE;AAA/B,SAAlB;AACAY,QAAAA,QAAQ;AACT,OAHD;AAIA,WAAKN,KAAL;AACA,WAAKX,SAAL;AACD;AA3CG;AA5SM,CAAd","sourcesContent":["/*!\n * ws: a node.js websocket client\n * Copyright(c) 2011 Einar Otto Stangvik <einaros@gmail.com>\n * MIT Licensed\n */\n\nvar util = require('util')\n  , isValidUTF8 = require('./Validation')\n  , ErrorCodes = require('./ErrorCodes')\n  , BufferPool = require('./BufferPool')\n  , bufferUtil = require('./BufferUtil')\n  , PerMessageDeflate = require('./PerMessageDeflate');\n\n/**\n * HyBi Receiver implementation\n */\n\nfunction Receiver (extensions,maxPayload) {\n  if (this instanceof Receiver === false) {\n    throw new TypeError(\"Classes can't be function-called\");\n  }\n  if(typeof extensions==='number'){\n    maxPayload=extensions;\n    extensions={};\n  }\n\n\n  // memory pool for fragmented messages\n  var fragmentedPoolPrevUsed = -1;\n  this.fragmentedBufferPool = new BufferPool(1024, function(db, length) {\n    return db.used + length;\n  }, function(db) {\n    return fragmentedPoolPrevUsed = fragmentedPoolPrevUsed >= 0 ?\n      Math.ceil((fragmentedPoolPrevUsed + db.used) / 2) :\n      db.used;\n  });\n\n  // memory pool for unfragmented messages\n  var unfragmentedPoolPrevUsed = -1;\n  this.unfragmentedBufferPool = new BufferPool(1024, function(db, length) {\n    return db.used + length;\n  }, function(db) {\n    return unfragmentedPoolPrevUsed = unfragmentedPoolPrevUsed >= 0 ?\n      Math.ceil((unfragmentedPoolPrevUsed + db.used) / 2) :\n      db.used;\n  });\n  this.extensions = extensions || {};\n  this.maxPayload = maxPayload || 0;\n  this.currentPayloadLength = 0;\n  this.state = {\n    activeFragmentedOperation: null,\n    lastFragment: false,\n    masked: false,\n    opcode: 0,\n    fragmentedOperation: false\n  };\n  this.overflow = [];\n  this.headerBuffer = new Buffer(10);\n  this.expectOffset = 0;\n  this.expectBuffer = null;\n  this.expectHandler = null;\n  this.currentMessage = [];\n  this.currentMessageLength = 0;\n  this.messageHandlers = [];\n  this.expectHeader(2, this.processPacket);\n  this.dead = false;\n  this.processing = false;\n\n  this.onerror = function() {};\n  this.ontext = function() {};\n  this.onbinary = function() {};\n  this.onclose = function() {};\n  this.onping = function() {};\n  this.onpong = function() {};\n}\n\nmodule.exports = Receiver;\n\n/**\n * Add new data to the parser.\n *\n * @api public\n */\n\nReceiver.prototype.add = function(data) {\n  if (this.dead) return;\n  var dataLength = data.length;\n  if (dataLength == 0) return;\n  if (this.expectBuffer == null) {\n    this.overflow.push(data);\n    return;\n  }\n  var toRead = Math.min(dataLength, this.expectBuffer.length - this.expectOffset);\n  fastCopy(toRead, data, this.expectBuffer, this.expectOffset);\n  this.expectOffset += toRead;\n  if (toRead < dataLength) {\n    this.overflow.push(data.slice(toRead));\n  }\n  while (this.expectBuffer && this.expectOffset == this.expectBuffer.length) {\n    var bufferForHandler = this.expectBuffer;\n    this.expectBuffer = null;\n    this.expectOffset = 0;\n    this.expectHandler.call(this, bufferForHandler);\n  }\n};\n\n/**\n * Releases all resources used by the receiver.\n *\n * @api public\n */\n\nReceiver.prototype.cleanup = function() {\n  this.dead = true;\n  this.overflow = null;\n  this.headerBuffer = null;\n  this.expectBuffer = null;\n  this.expectHandler = null;\n  this.unfragmentedBufferPool = null;\n  this.fragmentedBufferPool = null;\n  this.state = null;\n  this.currentMessage = null;\n  this.onerror = null;\n  this.ontext = null;\n  this.onbinary = null;\n  this.onclose = null;\n  this.onping = null;\n  this.onpong = null;\n};\n\n/**\n * Waits for a certain amount of header bytes to be available, then fires a callback.\n *\n * @api private\n */\n\nReceiver.prototype.expectHeader = function(length, handler) {\n  if (length == 0) {\n    handler(null);\n    return;\n  }\n  this.expectBuffer = this.headerBuffer.slice(this.expectOffset, this.expectOffset + length);\n  this.expectHandler = handler;\n  var toRead = length;\n  while (toRead > 0 && this.overflow.length > 0) {\n    var fromOverflow = this.overflow.pop();\n    if (toRead < fromOverflow.length) this.overflow.push(fromOverflow.slice(toRead));\n    var read = Math.min(fromOverflow.length, toRead);\n    fastCopy(read, fromOverflow, this.expectBuffer, this.expectOffset);\n    this.expectOffset += read;\n    toRead -= read;\n  }\n};\n\n/**\n * Waits for a certain amount of data bytes to be available, then fires a callback.\n *\n * @api private\n */\n\nReceiver.prototype.expectData = function(length, handler) {\n  if (length == 0) {\n    handler(null);\n    return;\n  }\n  this.expectBuffer = this.allocateFromPool(length, this.state.fragmentedOperation);\n  this.expectHandler = handler;\n  var toRead = length;\n  while (toRead > 0 && this.overflow.length > 0) {\n    var fromOverflow = this.overflow.pop();\n    if (toRead < fromOverflow.length) this.overflow.push(fromOverflow.slice(toRead));\n    var read = Math.min(fromOverflow.length, toRead);\n    fastCopy(read, fromOverflow, this.expectBuffer, this.expectOffset);\n    this.expectOffset += read;\n    toRead -= read;\n  }\n};\n\n/**\n * Allocates memory from the buffer pool.\n *\n * @api private\n */\n\nReceiver.prototype.allocateFromPool = function(length, isFragmented) {\n  return (isFragmented ? this.fragmentedBufferPool : this.unfragmentedBufferPool).get(length);\n};\n\n/**\n * Start processing a new packet.\n *\n * @api private\n */\n\nReceiver.prototype.processPacket = function (data) {\n  if (this.extensions[PerMessageDeflate.extensionName]) {\n    if ((data[0] & 0x30) != 0) {\n      this.error('reserved fields (2, 3) must be empty', 1002);\n      return;\n    }\n  } else {\n    if ((data[0] & 0x70) != 0) {\n      this.error('reserved fields must be empty', 1002);\n      return;\n    }\n  }\n  this.state.lastFragment = (data[0] & 0x80) == 0x80;\n  this.state.masked = (data[1] & 0x80) == 0x80;\n  var compressed = (data[0] & 0x40) == 0x40;\n  var opcode = data[0] & 0xf;\n  if (opcode === 0) {\n    if (compressed) {\n      this.error('continuation frame cannot have the Per-message Compressed bits', 1002);\n      return;\n    }\n    // continuation frame\n    this.state.fragmentedOperation = true;\n    this.state.opcode = this.state.activeFragmentedOperation;\n    if (!(this.state.opcode == 1 || this.state.opcode == 2)) {\n      this.error('continuation frame cannot follow current opcode', 1002);\n      return;\n    }\n  }\n  else {\n    if (opcode < 3 && this.state.activeFragmentedOperation != null) {\n      this.error('data frames after the initial data frame must have opcode 0', 1002);\n      return;\n    }\n    if (opcode >= 8 && compressed) {\n      this.error('control frames cannot have the Per-message Compressed bits', 1002);\n      return;\n    }\n    this.state.compressed = compressed;\n    this.state.opcode = opcode;\n    if (this.state.lastFragment === false) {\n      this.state.fragmentedOperation = true;\n      this.state.activeFragmentedOperation = opcode;\n    }\n    else this.state.fragmentedOperation = false;\n  }\n  var handler = opcodes[this.state.opcode];\n  if (typeof handler == 'undefined') this.error('no handler for opcode ' + this.state.opcode, 1002);\n  else {\n    handler.start.call(this, data);\n  }\n};\n\n/**\n * Endprocessing a packet.\n *\n * @api private\n */\n\nReceiver.prototype.endPacket = function() {\n  if (this.dead) return;\n  if (!this.state.fragmentedOperation) this.unfragmentedBufferPool.reset(true);\n  else if (this.state.lastFragment) this.fragmentedBufferPool.reset(true);\n  this.expectOffset = 0;\n  this.expectBuffer = null;\n  this.expectHandler = null;\n  if (this.state.lastFragment && this.state.opcode === this.state.activeFragmentedOperation) {\n    // end current fragmented operation\n    this.state.activeFragmentedOperation = null;\n  }\n  this.currentPayloadLength = 0;\n  this.state.lastFragment = false;\n  this.state.opcode = this.state.activeFragmentedOperation != null ? this.state.activeFragmentedOperation : 0;\n  this.state.masked = false;\n  this.expectHeader(2, this.processPacket);\n};\n\n/**\n * Reset the parser state.\n *\n * @api private\n */\n\nReceiver.prototype.reset = function() {\n  if (this.dead) return;\n  this.state = {\n    activeFragmentedOperation: null,\n    lastFragment: false,\n    masked: false,\n    opcode: 0,\n    fragmentedOperation: false\n  };\n  this.fragmentedBufferPool.reset(true);\n  this.unfragmentedBufferPool.reset(true);\n  this.expectOffset = 0;\n  this.expectBuffer = null;\n  this.expectHandler = null;\n  this.overflow = [];\n  this.currentMessage = [];\n  this.currentMessageLength = 0;\n  this.messageHandlers = [];\n  this.currentPayloadLength = 0;\n};\n\n/**\n * Unmask received data.\n *\n * @api private\n */\n\nReceiver.prototype.unmask = function (mask, buf, binary) {\n  if (mask != null && buf != null) bufferUtil.unmask(buf, mask);\n  if (binary) return buf;\n  return buf != null ? buf.toString('utf8') : '';\n};\n\n/**\n * Handles an error\n *\n * @api private\n */\n\nReceiver.prototype.error = function (reason, protocolErrorCode) {\n  if (this.dead) return;\n  this.reset();\n  if(typeof reason == 'string'){\n    this.onerror(new Error(reason), protocolErrorCode);\n  }\n  else if(reason.constructor == Error){\n    this.onerror(reason, protocolErrorCode);\n  }\n  else{\n    this.onerror(new Error(\"An error occured\"),protocolErrorCode);\n  }\n  return this;\n};\n\n/**\n * Execute message handler buffers\n *\n * @api private\n */\n\nReceiver.prototype.flush = function() {\n  if (this.processing || this.dead) return;\n\n  var handler = this.messageHandlers.shift();\n  if (!handler) return;\n\n  this.processing = true;\n  var self = this;\n\n  handler(function() {\n    self.processing = false;\n    self.flush();\n  });\n};\n\n/**\n * Apply extensions to message\n *\n * @api private\n */\n\nReceiver.prototype.applyExtensions = function(messageBuffer, fin, compressed, callback) {\n  var self = this;\n  if (compressed) {\n    this.extensions[PerMessageDeflate.extensionName].decompress(messageBuffer, fin, function(err, buffer) {\n      if (self.dead) return;\n      if (err) {\n        callback(new Error('invalid compressed data'));\n        return;\n      }\n      callback(null, buffer);\n    });\n  } else {\n    callback(null, messageBuffer);\n  }\n};\n\n/**\n* Checks payload size, disconnects socket when it exceeds maxPayload\n*\n* @api private\n*/\nReceiver.prototype.maxPayloadExceeded = function(length) {\n  if (this.maxPayload=== undefined || this.maxPayload === null || this.maxPayload < 1) {\n    return false;\n  }\n  var fullLength = this.currentPayloadLength + length;\n  if (fullLength < this.maxPayload) {\n    this.currentPayloadLength = fullLength;\n    return false;\n  }\n  this.error('payload cannot exceed ' + this.maxPayload + ' bytes', 1009);\n  this.messageBuffer=[];\n  this.cleanup();\n\n  return true;\n};\n\n/**\n * Buffer utilities\n */\n\nfunction readUInt16BE(start) {\n  return (this[start]<<8) +\n         this[start+1];\n}\n\nfunction readUInt32BE(start) {\n  return (this[start]<<24) +\n         (this[start+1]<<16) +\n         (this[start+2]<<8) +\n         this[start+3];\n}\n\nfunction fastCopy(length, srcBuffer, dstBuffer, dstOffset) {\n  switch (length) {\n    default: srcBuffer.copy(dstBuffer, dstOffset, 0, length); break;\n    case 16: dstBuffer[dstOffset+15] = srcBuffer[15];\n    case 15: dstBuffer[dstOffset+14] = srcBuffer[14];\n    case 14: dstBuffer[dstOffset+13] = srcBuffer[13];\n    case 13: dstBuffer[dstOffset+12] = srcBuffer[12];\n    case 12: dstBuffer[dstOffset+11] = srcBuffer[11];\n    case 11: dstBuffer[dstOffset+10] = srcBuffer[10];\n    case 10: dstBuffer[dstOffset+9] = srcBuffer[9];\n    case 9: dstBuffer[dstOffset+8] = srcBuffer[8];\n    case 8: dstBuffer[dstOffset+7] = srcBuffer[7];\n    case 7: dstBuffer[dstOffset+6] = srcBuffer[6];\n    case 6: dstBuffer[dstOffset+5] = srcBuffer[5];\n    case 5: dstBuffer[dstOffset+4] = srcBuffer[4];\n    case 4: dstBuffer[dstOffset+3] = srcBuffer[3];\n    case 3: dstBuffer[dstOffset+2] = srcBuffer[2];\n    case 2: dstBuffer[dstOffset+1] = srcBuffer[1];\n    case 1: dstBuffer[dstOffset] = srcBuffer[0];\n  }\n}\n\nfunction clone(obj) {\n  var cloned = {};\n  for (var k in obj) {\n    if (obj.hasOwnProperty(k)) {\n      cloned[k] = obj[k];\n    }\n  }\n  return cloned;\n}\n\n/**\n * Opcode handlers\n */\n\nvar opcodes = {\n  // text\n  '1': {\n    start: function(data) {\n      var self = this;\n      // decode length\n      var firstLength = data[1] & 0x7f;\n      if (firstLength < 126) {\n        if (self.maxPayloadExceeded(firstLength)){\n          self.error('Maximumpayload exceeded in compressed text message. Aborting...', 1009);\n          return;\n        }\n        opcodes['1'].getData.call(self, firstLength);\n      }\n      else if (firstLength == 126) {\n        self.expectHeader(2, function(data) {\n          var length = readUInt16BE.call(data, 0);\n          if (self.maxPayloadExceeded(length)){\n            self.error('Maximumpayload exceeded in compressed text message. Aborting...', 1009);\n            return;\n          }\n          opcodes['1'].getData.call(self, length);\n        });\n      }\n      else if (firstLength == 127) {\n        self.expectHeader(8, function(data) {\n          if (readUInt32BE.call(data, 0) != 0) {\n            self.error('packets with length spanning more than 32 bit is currently not supported', 1008);\n            return;\n          }\n          var length = readUInt32BE.call(data, 4);\n          if (self.maxPayloadExceeded(length)){\n            self.error('Maximumpayload exceeded in compressed text message. Aborting...', 1009);\n            return;\n          }\n          opcodes['1'].getData.call(self, readUInt32BE.call(data, 4));\n        });\n      }\n    },\n    getData: function(length) {\n      var self = this;\n      if (self.state.masked) {\n        self.expectHeader(4, function(data) {\n          var mask = data;\n          self.expectData(length, function(data) {\n            opcodes['1'].finish.call(self, mask, data);\n          });\n        });\n      }\n      else {\n        self.expectData(length, function(data) {\n          opcodes['1'].finish.call(self, null, data);\n        });\n      }\n    },\n    finish: function(mask, data) {\n      var self = this;\n      var packet = this.unmask(mask, data, true) || new Buffer(0);\n      var state = clone(this.state);\n      this.messageHandlers.push(function(callback) {\n        self.applyExtensions(packet, state.lastFragment, state.compressed, function(err, buffer) {\n          if (err) {\n            if(err.type===1009){\n                return self.error('Maximumpayload exceeded in compressed text message. Aborting...', 1009);\n            }\n            return self.error(err.message, 1007);\n          }\n          if (buffer != null) {\n            if( self.maxPayload==0 || (self.maxPayload > 0 && (self.currentMessageLength + buffer.length) < self.maxPayload) ){\n              self.currentMessage.push(buffer);\n            }\n            else{\n                self.currentMessage=null;\n                self.currentMessage = [];\n                self.currentMessageLength = 0;\n                self.error(new Error('Maximum payload exceeded. maxPayload: '+self.maxPayload), 1009);\n                return;\n            }\n            self.currentMessageLength += buffer.length;\n          }\n          if (state.lastFragment) {\n            var messageBuffer = Buffer.concat(self.currentMessage);\n            self.currentMessage = [];\n            self.currentMessageLength = 0;\n            if (!isValidUTF8(messageBuffer)) {\n              self.error('invalid utf8 sequence', 1007);\n              return;\n            }\n            self.ontext(messageBuffer.toString('utf8'), {masked: state.masked, buffer: messageBuffer});\n          }\n          callback();\n        });\n      });\n      this.flush();\n      this.endPacket();\n    }\n  },\n  // binary\n  '2': {\n    start: function(data) {\n      var self = this;\n      // decode length\n      var firstLength = data[1] & 0x7f;\n      if (firstLength < 126) {\n          if (self.maxPayloadExceeded(firstLength)){\n            self.error('Max payload exceeded in compressed text message. Aborting...', 1009);\n            return;\n          }\n        opcodes['2'].getData.call(self, firstLength);\n      }\n      else if (firstLength == 126) {\n        self.expectHeader(2, function(data) {\n          var length = readUInt16BE.call(data, 0);\n          if (self.maxPayloadExceeded(length)){\n            self.error('Max payload exceeded in compressed text message. Aborting...', 1009);\n            return;\n          }\n          opcodes['2'].getData.call(self, length);\n        });\n      }\n      else if (firstLength == 127) {\n        self.expectHeader(8, function(data) {\n          if (readUInt32BE.call(data, 0) != 0) {\n            self.error('packets with length spanning more than 32 bit is currently not supported', 1008);\n            return;\n          }\n          var length = readUInt32BE.call(data, 4, true);\n          if (self.maxPayloadExceeded(length)){\n            self.error('Max payload exceeded in compressed text message. Aborting...', 1009);\n            return;\n          }\n          opcodes['2'].getData.call(self, length);\n        });\n      }\n    },\n    getData: function(length) {\n      var self = this;\n      if (self.state.masked) {\n        self.expectHeader(4, function(data) {\n          var mask = data;\n          self.expectData(length, function(data) {\n            opcodes['2'].finish.call(self, mask, data);\n          });\n        });\n      }\n      else {\n        self.expectData(length, function(data) {\n          opcodes['2'].finish.call(self, null, data);\n        });\n      }\n    },\n    finish: function(mask, data) {\n      var self = this;\n      var packet = this.unmask(mask, data, true) || new Buffer(0);\n      var state = clone(this.state);\n      this.messageHandlers.push(function(callback) {\n        self.applyExtensions(packet, state.lastFragment, state.compressed, function(err, buffer) {\n          if (err) {\n            if(err.type===1009){\n                return self.error('Max payload exceeded in compressed binary message. Aborting...', 1009);\n            }\n            return self.error(err.message, 1007);\n          }\n          if (buffer != null) {\n            if( self.maxPayload==0 || (self.maxPayload > 0 && (self.currentMessageLength + buffer.length) < self.maxPayload) ){\n              self.currentMessage.push(buffer);\n            }\n            else{\n                self.currentMessage=null;\n                self.currentMessage = [];\n                self.currentMessageLength = 0;\n                self.error(new Error('Maximum payload exceeded'), 1009);\n                return;\n            }\n            self.currentMessageLength += buffer.length;\n          }\n          if (state.lastFragment) {\n            var messageBuffer = Buffer.concat(self.currentMessage);\n            self.currentMessage = [];\n            self.currentMessageLength = 0;\n            self.onbinary(messageBuffer, {masked: state.masked, buffer: messageBuffer});\n          }\n          callback();\n        });\n      });\n      this.flush();\n      this.endPacket();\n    }\n  },\n  // close\n  '8': {\n    start: function(data) {\n      var self = this;\n      if (self.state.lastFragment == false) {\n        self.error('fragmented close is not supported', 1002);\n        return;\n      }\n\n      // decode length\n      var firstLength = data[1] & 0x7f;\n      if (firstLength < 126) {\n        opcodes['8'].getData.call(self, firstLength);\n      }\n      else {\n        self.error('control frames cannot have more than 125 bytes of data', 1002);\n      }\n    },\n    getData: function(length) {\n      var self = this;\n      if (self.state.masked) {\n        self.expectHeader(4, function(data) {\n          var mask = data;\n          self.expectData(length, function(data) {\n            opcodes['8'].finish.call(self, mask, data);\n          });\n        });\n      }\n      else {\n        self.expectData(length, function(data) {\n          opcodes['8'].finish.call(self, null, data);\n        });\n      }\n    },\n    finish: function(mask, data) {\n      var self = this;\n      data = self.unmask(mask, data, true);\n\n      var state = clone(this.state);\n      this.messageHandlers.push(function() {\n        if (data && data.length == 1) {\n          self.error('close packets with data must be at least two bytes long', 1002);\n          return;\n        }\n        var code = data && data.length > 1 ? readUInt16BE.call(data, 0) : 1000;\n        if (!ErrorCodes.isValidErrorCode(code)) {\n          self.error('invalid error code', 1002);\n          return;\n        }\n        var message = '';\n        if (data && data.length > 2) {\n          var messageBuffer = data.slice(2);\n          if (!isValidUTF8(messageBuffer)) {\n            self.error('invalid utf8 sequence', 1007);\n            return;\n          }\n          message = messageBuffer.toString('utf8');\n        }\n        self.onclose(code, message, {masked: state.masked});\n        self.reset();\n      });\n      this.flush();\n    },\n  },\n  // ping\n  '9': {\n    start: function(data) {\n      var self = this;\n      if (self.state.lastFragment == false) {\n        self.error('fragmented ping is not supported', 1002);\n        return;\n      }\n\n      // decode length\n      var firstLength = data[1] & 0x7f;\n      if (firstLength < 126) {\n        opcodes['9'].getData.call(self, firstLength);\n      }\n      else {\n        self.error('control frames cannot have more than 125 bytes of data', 1002);\n      }\n    },\n    getData: function(length) {\n      var self = this;\n      if (self.state.masked) {\n        self.expectHeader(4, function(data) {\n          var mask = data;\n          self.expectData(length, function(data) {\n            opcodes['9'].finish.call(self, mask, data);\n          });\n        });\n      }\n      else {\n        self.expectData(length, function(data) {\n          opcodes['9'].finish.call(self, null, data);\n        });\n      }\n    },\n    finish: function(mask, data) {\n      var self = this;\n      data = this.unmask(mask, data, true);\n      var state = clone(this.state);\n      this.messageHandlers.push(function(callback) {\n        self.onping(data, {masked: state.masked, binary: true});\n        callback();\n      });\n      this.flush();\n      this.endPacket();\n    }\n  },\n  // pong\n  '10': {\n    start: function(data) {\n      var self = this;\n      if (self.state.lastFragment == false) {\n        self.error('fragmented pong is not supported', 1002);\n        return;\n      }\n\n      // decode length\n      var firstLength = data[1] & 0x7f;\n      if (firstLength < 126) {\n        opcodes['10'].getData.call(self, firstLength);\n      }\n      else {\n        self.error('control frames cannot have more than 125 bytes of data', 1002);\n      }\n    },\n    getData: function(length) {\n      var self = this;\n      if (this.state.masked) {\n        this.expectHeader(4, function(data) {\n          var mask = data;\n          self.expectData(length, function(data) {\n            opcodes['10'].finish.call(self, mask, data);\n          });\n        });\n      }\n      else {\n        this.expectData(length, function(data) {\n          opcodes['10'].finish.call(self, null, data);\n        });\n      }\n    },\n    finish: function(mask, data) {\n      var self = this;\n      data = self.unmask(mask, data, true);\n      var state = clone(this.state);\n      this.messageHandlers.push(function(callback) {\n        self.onpong(data, {masked: state.masked, binary: true});\n        callback();\n      });\n      this.flush();\n      this.endPacket();\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"script"}