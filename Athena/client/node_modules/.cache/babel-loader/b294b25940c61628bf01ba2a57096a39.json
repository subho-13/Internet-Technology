{"ast":null,"code":"/**\n * This is the web browser implementation of `debug()`.\n *\n * Expose `debug()` as the module.\n */\nexports = module.exports = require('./debug');\nexports.log = log;\nexports.formatArgs = formatArgs;\nexports.save = save;\nexports.load = load;\nexports.useColors = useColors;\nexports.storage = 'undefined' != typeof chrome && 'undefined' != typeof chrome.storage ? chrome.storage.local : localstorage();\n/**\n * Colors.\n */\n\nexports.colors = ['lightseagreen', 'forestgreen', 'goldenrod', 'dodgerblue', 'darkorchid', 'crimson'];\n/**\n * Currently only WebKit-based Web Inspectors, Firefox >= v31,\n * and the Firebug extension (any Firefox version) are known\n * to support \"%c\" CSS customizations.\n *\n * TODO: add a `localStorage` variable to explicitly enable/disable colors\n */\n\nfunction useColors() {\n  // is webkit? http://stackoverflow.com/a/16459606/376773\n  // document is undefined in react-native: https://github.com/facebook/react-native/pull/1632\n  return typeof document !== 'undefined' && 'WebkitAppearance' in document.documentElement.style || // is firebug? http://stackoverflow.com/a/398120/376773\n  window.console && (console.firebug || console.exception && console.table) || // is firefox >= v31?\n  // https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages\n  navigator.userAgent.toLowerCase().match(/firefox\\/(\\d+)/) && parseInt(RegExp.$1, 10) >= 31;\n}\n/**\n * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.\n */\n\n\nexports.formatters.j = function (v) {\n  try {\n    return JSON.stringify(v);\n  } catch (err) {\n    return '[UnexpectedJSONParseError]: ' + err.message;\n  }\n};\n/**\n * Colorize log arguments if enabled.\n *\n * @api public\n */\n\n\nfunction formatArgs() {\n  var args = arguments;\n  var useColors = this.useColors;\n  args[0] = (useColors ? '%c' : '') + this.namespace + (useColors ? ' %c' : ' ') + args[0] + (useColors ? '%c ' : ' ') + '+' + exports.humanize(this.diff);\n  if (!useColors) return args;\n  var c = 'color: ' + this.color;\n  args = [args[0], c, 'color: inherit'].concat(Array.prototype.slice.call(args, 1)); // the final \"%c\" is somewhat tricky, because there could be other\n  // arguments passed either before or after the %c, so we need to\n  // figure out the correct index to insert the CSS into\n\n  var index = 0;\n  var lastC = 0;\n  args[0].replace(/%[a-z%]/g, function (match) {\n    if ('%%' === match) return;\n    index++;\n\n    if ('%c' === match) {\n      // we only are interested in the *last* %c\n      // (the user may have provided their own)\n      lastC = index;\n    }\n  });\n  args.splice(lastC, 0, c);\n  return args;\n}\n/**\n * Invokes `console.log()` when available.\n * No-op when `console.log` is not a \"function\".\n *\n * @api public\n */\n\n\nfunction log() {\n  // this hackery is required for IE8/9, where\n  // the `console.log` function doesn't have 'apply'\n  return 'object' === typeof console && console.log && Function.prototype.apply.call(console.log, console, arguments);\n}\n/**\n * Save `namespaces`.\n *\n * @param {String} namespaces\n * @api private\n */\n\n\nfunction save(namespaces) {\n  try {\n    if (null == namespaces) {\n      exports.storage.removeItem('debug');\n    } else {\n      exports.storage.debug = namespaces;\n    }\n  } catch (e) {}\n}\n/**\n * Load `namespaces`.\n *\n * @return {String} returns the previously persisted debug modes\n * @api private\n */\n\n\nfunction load() {\n  var r;\n\n  try {\n    return exports.storage.debug;\n  } catch (e) {} // If debug isn't set in LS, and we're in Electron, try to load $DEBUG\n\n\n  if (typeof process !== 'undefined' && 'env' in process) {\n    return process.env.DEBUG;\n  }\n}\n/**\n * Enable namespaces listed in `localStorage.debug` initially.\n */\n\n\nexports.enable(load());\n/**\n * Localstorage attempts to return the localstorage.\n *\n * This is necessary because safari throws\n * when a user disables cookies/localstorage\n * and you attempt to access it.\n *\n * @return {LocalStorage}\n * @api private\n */\n\nfunction localstorage() {\n  try {\n    return window.localStorage;\n  } catch (e) {}\n}","map":{"version":3,"sources":["/home/subho/Programming/Internet-Technology/Athena/node_modules/engine.io-client/node_modules/debug/browser.js"],"names":["exports","module","require","log","formatArgs","save","load","useColors","storage","chrome","local","localstorage","colors","document","documentElement","style","window","console","firebug","exception","table","navigator","userAgent","toLowerCase","match","parseInt","RegExp","$1","formatters","j","v","JSON","stringify","err","message","args","arguments","namespace","humanize","diff","c","color","concat","Array","prototype","slice","call","index","lastC","replace","splice","Function","apply","namespaces","removeItem","debug","e","r","process","env","DEBUG","enable","localStorage"],"mappings":"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","sourcesContent":["\n/**\n * This is the web browser implementation of `debug()`.\n *\n * Expose `debug()` as the module.\n */\n\nexports = module.exports = require('./debug');\nexports.log = log;\nexports.formatArgs = formatArgs;\nexports.save = save;\nexports.load = load;\nexports.useColors = useColors;\nexports.storage = 'undefined' != typeof chrome\n               && 'undefined' != typeof chrome.storage\n                  ? chrome.storage.local\n                  : localstorage();\n\n/**\n * Colors.\n */\n\nexports.colors = [\n  'lightseagreen',\n  'forestgreen',\n  'goldenrod',\n  'dodgerblue',\n  'darkorchid',\n  'crimson'\n];\n\n/**\n * Currently only WebKit-based Web Inspectors, Firefox >= v31,\n * and the Firebug extension (any Firefox version) are known\n * to support \"%c\" CSS customizations.\n *\n * TODO: add a `localStorage` variable to explicitly enable/disable colors\n */\n\nfunction useColors() {\n  // is webkit? http://stackoverflow.com/a/16459606/376773\n  // document is undefined in react-native: https://github.com/facebook/react-native/pull/1632\n  return (typeof document !== 'undefined' && 'WebkitAppearance' in document.documentElement.style) ||\n    // is firebug? http://stackoverflow.com/a/398120/376773\n    (window.console && (console.firebug || (console.exception && console.table))) ||\n    // is firefox >= v31?\n    // https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages\n    (navigator.userAgent.toLowerCase().match(/firefox\\/(\\d+)/) && parseInt(RegExp.$1, 10) >= 31);\n}\n\n/**\n * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.\n */\n\nexports.formatters.j = function(v) {\n  try {\n    return JSON.stringify(v);\n  } catch (err) {\n    return '[UnexpectedJSONParseError]: ' + err.message;\n  }\n};\n\n\n/**\n * Colorize log arguments if enabled.\n *\n * @api public\n */\n\nfunction formatArgs() {\n  var args = arguments;\n  var useColors = this.useColors;\n\n  args[0] = (useColors ? '%c' : '')\n    + this.namespace\n    + (useColors ? ' %c' : ' ')\n    + args[0]\n    + (useColors ? '%c ' : ' ')\n    + '+' + exports.humanize(this.diff);\n\n  if (!useColors) return args;\n\n  var c = 'color: ' + this.color;\n  args = [args[0], c, 'color: inherit'].concat(Array.prototype.slice.call(args, 1));\n\n  // the final \"%c\" is somewhat tricky, because there could be other\n  // arguments passed either before or after the %c, so we need to\n  // figure out the correct index to insert the CSS into\n  var index = 0;\n  var lastC = 0;\n  args[0].replace(/%[a-z%]/g, function(match) {\n    if ('%%' === match) return;\n    index++;\n    if ('%c' === match) {\n      // we only are interested in the *last* %c\n      // (the user may have provided their own)\n      lastC = index;\n    }\n  });\n\n  args.splice(lastC, 0, c);\n  return args;\n}\n\n/**\n * Invokes `console.log()` when available.\n * No-op when `console.log` is not a \"function\".\n *\n * @api public\n */\n\nfunction log() {\n  // this hackery is required for IE8/9, where\n  // the `console.log` function doesn't have 'apply'\n  return 'object' === typeof console\n    && console.log\n    && Function.prototype.apply.call(console.log, console, arguments);\n}\n\n/**\n * Save `namespaces`.\n *\n * @param {String} namespaces\n * @api private\n */\n\nfunction save(namespaces) {\n  try {\n    if (null == namespaces) {\n      exports.storage.removeItem('debug');\n    } else {\n      exports.storage.debug = namespaces;\n    }\n  } catch(e) {}\n}\n\n/**\n * Load `namespaces`.\n *\n * @return {String} returns the previously persisted debug modes\n * @api private\n */\n\nfunction load() {\n  var r;\n  try {\n    return exports.storage.debug;\n  } catch(e) {}\n\n  // If debug isn't set in LS, and we're in Electron, try to load $DEBUG\n  if (typeof process !== 'undefined' && 'env' in process) {\n    return process.env.DEBUG;\n  }\n}\n\n/**\n * Enable namespaces listed in `localStorage.debug` initially.\n */\n\nexports.enable(load());\n\n/**\n * Localstorage attempts to return the localstorage.\n *\n * This is necessary because safari throws\n * when a user disables cookies/localstorage\n * and you attempt to access it.\n *\n * @return {LocalStorage}\n * @api private\n */\n\nfunction localstorage(){\n  try {\n    return window.localStorage;\n  } catch (e) {}\n}\n"]},"metadata":{},"sourceType":"script"}