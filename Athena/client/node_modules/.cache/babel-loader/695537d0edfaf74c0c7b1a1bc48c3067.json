{"ast":null,"code":"/**\n * Module dependencies.\n */\nvar debug = require('debug')('socket.io-parser');\n\nvar json = require('json3');\n\nvar Emitter = require('component-emitter');\n\nvar binary = require('./binary');\n\nvar isBuf = require('./is-buffer');\n/**\n * Protocol version.\n *\n * @api public\n */\n\n\nexports.protocol = 4;\n/**\n * Packet types.\n *\n * @api public\n */\n\nexports.types = ['CONNECT', 'DISCONNECT', 'EVENT', 'ACK', 'ERROR', 'BINARY_EVENT', 'BINARY_ACK'];\n/**\n * Packet type `connect`.\n *\n * @api public\n */\n\nexports.CONNECT = 0;\n/**\n * Packet type `disconnect`.\n *\n * @api public\n */\n\nexports.DISCONNECT = 1;\n/**\n * Packet type `event`.\n *\n * @api public\n */\n\nexports.EVENT = 2;\n/**\n * Packet type `ack`.\n *\n * @api public\n */\n\nexports.ACK = 3;\n/**\n * Packet type `error`.\n *\n * @api public\n */\n\nexports.ERROR = 4;\n/**\n * Packet type 'binary event'\n *\n * @api public\n */\n\nexports.BINARY_EVENT = 5;\n/**\n * Packet type `binary ack`. For acks with binary arguments.\n *\n * @api public\n */\n\nexports.BINARY_ACK = 6;\n/**\n * Encoder constructor.\n *\n * @api public\n */\n\nexports.Encoder = Encoder;\n/**\n * Decoder constructor.\n *\n * @api public\n */\n\nexports.Decoder = Decoder;\n/**\n * A socket.io Encoder instance\n *\n * @api public\n */\n\nfunction Encoder() {}\n/**\n * Encode a packet as a single string if non-binary, or as a\n * buffer sequence, depending on packet type.\n *\n * @param {Object} obj - packet object\n * @param {Function} callback - function to handle encodings (likely engine.write)\n * @return Calls callback with Array of encodings\n * @api public\n */\n\n\nEncoder.prototype.encode = function (obj, callback) {\n  debug('encoding packet %j', obj);\n\n  if (exports.BINARY_EVENT == obj.type || exports.BINARY_ACK == obj.type) {\n    encodeAsBinary(obj, callback);\n  } else {\n    var encoding = encodeAsString(obj);\n    callback([encoding]);\n  }\n};\n/**\n * Encode packet as string.\n *\n * @param {Object} packet\n * @return {String} encoded\n * @api private\n */\n\n\nfunction encodeAsString(obj) {\n  var str = '';\n  var nsp = false; // first is type\n\n  str += obj.type; // attachments if we have them\n\n  if (exports.BINARY_EVENT == obj.type || exports.BINARY_ACK == obj.type) {\n    str += obj.attachments;\n    str += '-';\n  } // if we have a namespace other than `/`\n  // we append it followed by a comma `,`\n\n\n  if (obj.nsp && '/' != obj.nsp) {\n    nsp = true;\n    str += obj.nsp;\n  } // immediately followed by the id\n\n\n  if (null != obj.id) {\n    if (nsp) {\n      str += ',';\n      nsp = false;\n    }\n\n    str += obj.id;\n  } // json data\n\n\n  if (null != obj.data) {\n    if (nsp) str += ',';\n    str += json.stringify(obj.data);\n  }\n\n  debug('encoded %j as %s', obj, str);\n  return str;\n}\n/**\n * Encode packet as 'buffer sequence' by removing blobs, and\n * deconstructing packet into object with placeholders and\n * a list of buffers.\n *\n * @param {Object} packet\n * @return {Buffer} encoded\n * @api private\n */\n\n\nfunction encodeAsBinary(obj, callback) {\n  function writeEncoding(bloblessData) {\n    var deconstruction = binary.deconstructPacket(bloblessData);\n    var pack = encodeAsString(deconstruction.packet);\n    var buffers = deconstruction.buffers;\n    buffers.unshift(pack); // add packet info to beginning of data list\n\n    callback(buffers); // write all the buffers\n  }\n\n  binary.removeBlobs(obj, writeEncoding);\n}\n/**\n * A socket.io Decoder instance\n *\n * @return {Object} decoder\n * @api public\n */\n\n\nfunction Decoder() {\n  this.reconstructor = null;\n}\n/**\n * Mix in `Emitter` with Decoder.\n */\n\n\nEmitter(Decoder.prototype);\n/**\n * Decodes an ecoded packet string into packet JSON.\n *\n * @param {String} obj - encoded packet\n * @return {Object} packet\n * @api public\n */\n\nDecoder.prototype.add = function (obj) {\n  var packet;\n\n  if ('string' == typeof obj) {\n    packet = decodeString(obj);\n\n    if (exports.BINARY_EVENT == packet.type || exports.BINARY_ACK == packet.type) {\n      // binary packet's json\n      this.reconstructor = new BinaryReconstructor(packet); // no attachments, labeled binary but no binary data to follow\n\n      if (this.reconstructor.reconPack.attachments === 0) {\n        this.emit('decoded', packet);\n      }\n    } else {\n      // non-binary full packet\n      this.emit('decoded', packet);\n    }\n  } else if (isBuf(obj) || obj.base64) {\n    // raw binary data\n    if (!this.reconstructor) {\n      throw new Error('got binary data when not reconstructing a packet');\n    } else {\n      packet = this.reconstructor.takeBinaryData(obj);\n\n      if (packet) {\n        // received final buffer\n        this.reconstructor = null;\n        this.emit('decoded', packet);\n      }\n    }\n  } else {\n    throw new Error('Unknown type: ' + obj);\n  }\n};\n/**\n * Decode a packet String (JSON data)\n *\n * @param {String} str\n * @return {Object} packet\n * @api private\n */\n\n\nfunction decodeString(str) {\n  var p = {};\n  var i = 0; // look up type\n\n  p.type = Number(str.charAt(0));\n  if (null == exports.types[p.type]) return error(); // look up attachments if type binary\n\n  if (exports.BINARY_EVENT == p.type || exports.BINARY_ACK == p.type) {\n    var buf = '';\n\n    while (str.charAt(++i) != '-') {\n      buf += str.charAt(i);\n      if (i == str.length) break;\n    }\n\n    if (buf != Number(buf) || str.charAt(i) != '-') {\n      throw new Error('Illegal attachments');\n    }\n\n    p.attachments = Number(buf);\n  } // look up namespace (if any)\n\n\n  if ('/' == str.charAt(i + 1)) {\n    p.nsp = '';\n\n    while (++i) {\n      var c = str.charAt(i);\n      if (',' == c) break;\n      p.nsp += c;\n      if (i == str.length) break;\n    }\n  } else {\n    p.nsp = '/';\n  } // look up id\n\n\n  var next = str.charAt(i + 1);\n\n  if ('' !== next && Number(next) == next) {\n    p.id = '';\n\n    while (++i) {\n      var c = str.charAt(i);\n\n      if (null == c || Number(c) != c) {\n        --i;\n        break;\n      }\n\n      p.id += str.charAt(i);\n      if (i == str.length) break;\n    }\n\n    p.id = Number(p.id);\n  } // look up json data\n\n\n  if (str.charAt(++i)) {\n    p = tryParse(p, str.substr(i));\n  }\n\n  debug('decoded %s as %j', str, p);\n  return p;\n}\n\nfunction tryParse(p, str) {\n  try {\n    p.data = json.parse(str);\n  } catch (e) {\n    return error();\n  }\n\n  return p;\n}\n\n;\n/**\n * Deallocates a parser's resources\n *\n * @api public\n */\n\nDecoder.prototype.destroy = function () {\n  if (this.reconstructor) {\n    this.reconstructor.finishedReconstruction();\n  }\n};\n/**\n * A manager of a binary event's 'buffer sequence'. Should\n * be constructed whenever a packet of type BINARY_EVENT is\n * decoded.\n *\n * @param {Object} packet\n * @return {BinaryReconstructor} initialized reconstructor\n * @api private\n */\n\n\nfunction BinaryReconstructor(packet) {\n  this.reconPack = packet;\n  this.buffers = [];\n}\n/**\n * Method to be called when binary data received from connection\n * after a BINARY_EVENT packet.\n *\n * @param {Buffer | ArrayBuffer} binData - the raw binary data received\n * @return {null | Object} returns null if more binary data is expected or\n *   a reconstructed packet object if all buffers have been received.\n * @api private\n */\n\n\nBinaryReconstructor.prototype.takeBinaryData = function (binData) {\n  this.buffers.push(binData);\n\n  if (this.buffers.length == this.reconPack.attachments) {\n    // done with buffer list\n    var packet = binary.reconstructPacket(this.reconPack, this.buffers);\n    this.finishedReconstruction();\n    return packet;\n  }\n\n  return null;\n};\n/**\n * Cleans up binary packet reconstruction variables.\n *\n * @api private\n */\n\n\nBinaryReconstructor.prototype.finishedReconstruction = function () {\n  this.reconPack = null;\n  this.buffers = [];\n};\n\nfunction error(data) {\n  return {\n    type: exports.ERROR,\n    data: 'parser error'\n  };\n}","map":{"version":3,"sources":["/home/subho/Programming/Internet-Technology/Athena/node_modules/socket.io-parser/index.js"],"names":["debug","require","json","Emitter","binary","isBuf","exports","protocol","types","CONNECT","DISCONNECT","EVENT","ACK","ERROR","BINARY_EVENT","BINARY_ACK","Encoder","Decoder","prototype","encode","obj","callback","type","encodeAsBinary","encoding","encodeAsString","str","nsp","attachments","id","data","stringify","writeEncoding","bloblessData","deconstruction","deconstructPacket","pack","packet","buffers","unshift","removeBlobs","reconstructor","add","decodeString","BinaryReconstructor","reconPack","emit","base64","Error","takeBinaryData","p","i","Number","charAt","error","buf","length","c","next","tryParse","substr","parse","e","destroy","finishedReconstruction","binData","push","reconstructPacket"],"mappings":"AACA;AACA;AACA;AAEA,IAAIA,KAAK,GAAGC,OAAO,CAAC,OAAD,CAAP,CAAiB,kBAAjB,CAAZ;;AACA,IAAIC,IAAI,GAAGD,OAAO,CAAC,OAAD,CAAlB;;AACA,IAAIE,OAAO,GAAGF,OAAO,CAAC,mBAAD,CAArB;;AACA,IAAIG,MAAM,GAAGH,OAAO,CAAC,UAAD,CAApB;;AACA,IAAII,KAAK,GAAGJ,OAAO,CAAC,aAAD,CAAnB;AAEA;AACA;AACA;AACA;AACA;;;AAEAK,OAAO,CAACC,QAAR,GAAmB,CAAnB;AAEA;AACA;AACA;AACA;AACA;;AAEAD,OAAO,CAACE,KAAR,GAAgB,CACd,SADc,EAEd,YAFc,EAGd,OAHc,EAId,KAJc,EAKd,OALc,EAMd,cANc,EAOd,YAPc,CAAhB;AAUA;AACA;AACA;AACA;AACA;;AAEAF,OAAO,CAACG,OAAR,GAAkB,CAAlB;AAEA;AACA;AACA;AACA;AACA;;AAEAH,OAAO,CAACI,UAAR,GAAqB,CAArB;AAEA;AACA;AACA;AACA;AACA;;AAEAJ,OAAO,CAACK,KAAR,GAAgB,CAAhB;AAEA;AACA;AACA;AACA;AACA;;AAEAL,OAAO,CAACM,GAAR,GAAc,CAAd;AAEA;AACA;AACA;AACA;AACA;;AAEAN,OAAO,CAACO,KAAR,GAAgB,CAAhB;AAEA;AACA;AACA;AACA;AACA;;AAEAP,OAAO,CAACQ,YAAR,GAAuB,CAAvB;AAEA;AACA;AACA;AACA;AACA;;AAEAR,OAAO,CAACS,UAAR,GAAqB,CAArB;AAEA;AACA;AACA;AACA;AACA;;AAEAT,OAAO,CAACU,OAAR,GAAkBA,OAAlB;AAEA;AACA;AACA;AACA;AACA;;AAEAV,OAAO,CAACW,OAAR,GAAkBA,OAAlB;AAEA;AACA;AACA;AACA;AACA;;AAEA,SAASD,OAAT,GAAmB,CAAE;AAErB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEAA,OAAO,CAACE,SAAR,CAAkBC,MAAlB,GAA2B,UAASC,GAAT,EAAcC,QAAd,EAAuB;AAChDrB,EAAAA,KAAK,CAAC,oBAAD,EAAuBoB,GAAvB,CAAL;;AAEA,MAAId,OAAO,CAACQ,YAAR,IAAwBM,GAAG,CAACE,IAA5B,IAAoChB,OAAO,CAACS,UAAR,IAAsBK,GAAG,CAACE,IAAlE,EAAwE;AACtEC,IAAAA,cAAc,CAACH,GAAD,EAAMC,QAAN,CAAd;AACD,GAFD,MAGK;AACH,QAAIG,QAAQ,GAAGC,cAAc,CAACL,GAAD,CAA7B;AACAC,IAAAA,QAAQ,CAAC,CAACG,QAAD,CAAD,CAAR;AACD;AACF,CAVD;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,SAASC,cAAT,CAAwBL,GAAxB,EAA6B;AAC3B,MAAIM,GAAG,GAAG,EAAV;AACA,MAAIC,GAAG,GAAG,KAAV,CAF2B,CAI3B;;AACAD,EAAAA,GAAG,IAAIN,GAAG,CAACE,IAAX,CAL2B,CAO3B;;AACA,MAAIhB,OAAO,CAACQ,YAAR,IAAwBM,GAAG,CAACE,IAA5B,IAAoChB,OAAO,CAACS,UAAR,IAAsBK,GAAG,CAACE,IAAlE,EAAwE;AACtEI,IAAAA,GAAG,IAAIN,GAAG,CAACQ,WAAX;AACAF,IAAAA,GAAG,IAAI,GAAP;AACD,GAX0B,CAa3B;AACA;;;AACA,MAAIN,GAAG,CAACO,GAAJ,IAAW,OAAOP,GAAG,CAACO,GAA1B,EAA+B;AAC7BA,IAAAA,GAAG,GAAG,IAAN;AACAD,IAAAA,GAAG,IAAIN,GAAG,CAACO,GAAX;AACD,GAlB0B,CAoB3B;;;AACA,MAAI,QAAQP,GAAG,CAACS,EAAhB,EAAoB;AAClB,QAAIF,GAAJ,EAAS;AACPD,MAAAA,GAAG,IAAI,GAAP;AACAC,MAAAA,GAAG,GAAG,KAAN;AACD;;AACDD,IAAAA,GAAG,IAAIN,GAAG,CAACS,EAAX;AACD,GA3B0B,CA6B3B;;;AACA,MAAI,QAAQT,GAAG,CAACU,IAAhB,EAAsB;AACpB,QAAIH,GAAJ,EAASD,GAAG,IAAI,GAAP;AACTA,IAAAA,GAAG,IAAIxB,IAAI,CAAC6B,SAAL,CAAeX,GAAG,CAACU,IAAnB,CAAP;AACD;;AAED9B,EAAAA,KAAK,CAAC,kBAAD,EAAqBoB,GAArB,EAA0BM,GAA1B,CAAL;AACA,SAAOA,GAAP;AACD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,SAASH,cAAT,CAAwBH,GAAxB,EAA6BC,QAA7B,EAAuC;AAErC,WAASW,aAAT,CAAuBC,YAAvB,EAAqC;AACnC,QAAIC,cAAc,GAAG9B,MAAM,CAAC+B,iBAAP,CAAyBF,YAAzB,CAArB;AACA,QAAIG,IAAI,GAAGX,cAAc,CAACS,cAAc,CAACG,MAAhB,CAAzB;AACA,QAAIC,OAAO,GAAGJ,cAAc,CAACI,OAA7B;AAEAA,IAAAA,OAAO,CAACC,OAAR,CAAgBH,IAAhB,EALmC,CAKZ;;AACvBf,IAAAA,QAAQ,CAACiB,OAAD,CAAR,CANmC,CAMhB;AACpB;;AAEDlC,EAAAA,MAAM,CAACoC,WAAP,CAAmBpB,GAAnB,EAAwBY,aAAxB;AACD;AAED;AACA;AACA;AACA;AACA;AACA;;;AAEA,SAASf,OAAT,GAAmB;AACjB,OAAKwB,aAAL,GAAqB,IAArB;AACD;AAED;AACA;AACA;;;AAEAtC,OAAO,CAACc,OAAO,CAACC,SAAT,CAAP;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAD,OAAO,CAACC,SAAR,CAAkBwB,GAAlB,GAAwB,UAAStB,GAAT,EAAc;AACpC,MAAIiB,MAAJ;;AACA,MAAI,YAAY,OAAOjB,GAAvB,EAA4B;AAC1BiB,IAAAA,MAAM,GAAGM,YAAY,CAACvB,GAAD,CAArB;;AACA,QAAId,OAAO,CAACQ,YAAR,IAAwBuB,MAAM,CAACf,IAA/B,IAAuChB,OAAO,CAACS,UAAR,IAAsBsB,MAAM,CAACf,IAAxE,EAA8E;AAAE;AAC9E,WAAKmB,aAAL,GAAqB,IAAIG,mBAAJ,CAAwBP,MAAxB,CAArB,CAD4E,CAG5E;;AACA,UAAI,KAAKI,aAAL,CAAmBI,SAAnB,CAA6BjB,WAA7B,KAA6C,CAAjD,EAAoD;AAClD,aAAKkB,IAAL,CAAU,SAAV,EAAqBT,MAArB;AACD;AACF,KAPD,MAOO;AAAE;AACP,WAAKS,IAAL,CAAU,SAAV,EAAqBT,MAArB;AACD;AACF,GAZD,MAaK,IAAIhC,KAAK,CAACe,GAAD,CAAL,IAAcA,GAAG,CAAC2B,MAAtB,EAA8B;AAAE;AACnC,QAAI,CAAC,KAAKN,aAAV,EAAyB;AACvB,YAAM,IAAIO,KAAJ,CAAU,kDAAV,CAAN;AACD,KAFD,MAEO;AACLX,MAAAA,MAAM,GAAG,KAAKI,aAAL,CAAmBQ,cAAnB,CAAkC7B,GAAlC,CAAT;;AACA,UAAIiB,MAAJ,EAAY;AAAE;AACZ,aAAKI,aAAL,GAAqB,IAArB;AACA,aAAKK,IAAL,CAAU,SAAV,EAAqBT,MAArB;AACD;AACF;AACF,GAVI,MAWA;AACH,UAAM,IAAIW,KAAJ,CAAU,mBAAmB5B,GAA7B,CAAN;AACD;AACF,CA7BD;AA+BA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,SAASuB,YAAT,CAAsBjB,GAAtB,EAA2B;AACzB,MAAIwB,CAAC,GAAG,EAAR;AACA,MAAIC,CAAC,GAAG,CAAR,CAFyB,CAIzB;;AACAD,EAAAA,CAAC,CAAC5B,IAAF,GAAS8B,MAAM,CAAC1B,GAAG,CAAC2B,MAAJ,CAAW,CAAX,CAAD,CAAf;AACA,MAAI,QAAQ/C,OAAO,CAACE,KAAR,CAAc0C,CAAC,CAAC5B,IAAhB,CAAZ,EAAmC,OAAOgC,KAAK,EAAZ,CANV,CAQzB;;AACA,MAAIhD,OAAO,CAACQ,YAAR,IAAwBoC,CAAC,CAAC5B,IAA1B,IAAkChB,OAAO,CAACS,UAAR,IAAsBmC,CAAC,CAAC5B,IAA9D,EAAoE;AAClE,QAAIiC,GAAG,GAAG,EAAV;;AACA,WAAO7B,GAAG,CAAC2B,MAAJ,CAAW,EAAEF,CAAb,KAAmB,GAA1B,EAA+B;AAC7BI,MAAAA,GAAG,IAAI7B,GAAG,CAAC2B,MAAJ,CAAWF,CAAX,CAAP;AACA,UAAIA,CAAC,IAAIzB,GAAG,CAAC8B,MAAb,EAAqB;AACtB;;AACD,QAAID,GAAG,IAAIH,MAAM,CAACG,GAAD,CAAb,IAAsB7B,GAAG,CAAC2B,MAAJ,CAAWF,CAAX,KAAiB,GAA3C,EAAgD;AAC9C,YAAM,IAAIH,KAAJ,CAAU,qBAAV,CAAN;AACD;;AACDE,IAAAA,CAAC,CAACtB,WAAF,GAAgBwB,MAAM,CAACG,GAAD,CAAtB;AACD,GAnBwB,CAqBzB;;;AACA,MAAI,OAAO7B,GAAG,CAAC2B,MAAJ,CAAWF,CAAC,GAAG,CAAf,CAAX,EAA8B;AAC5BD,IAAAA,CAAC,CAACvB,GAAF,GAAQ,EAAR;;AACA,WAAO,EAAEwB,CAAT,EAAY;AACV,UAAIM,CAAC,GAAG/B,GAAG,CAAC2B,MAAJ,CAAWF,CAAX,CAAR;AACA,UAAI,OAAOM,CAAX,EAAc;AACdP,MAAAA,CAAC,CAACvB,GAAF,IAAS8B,CAAT;AACA,UAAIN,CAAC,IAAIzB,GAAG,CAAC8B,MAAb,EAAqB;AACtB;AACF,GARD,MAQO;AACLN,IAAAA,CAAC,CAACvB,GAAF,GAAQ,GAAR;AACD,GAhCwB,CAkCzB;;;AACA,MAAI+B,IAAI,GAAGhC,GAAG,CAAC2B,MAAJ,CAAWF,CAAC,GAAG,CAAf,CAAX;;AACA,MAAI,OAAOO,IAAP,IAAeN,MAAM,CAACM,IAAD,CAAN,IAAgBA,IAAnC,EAAyC;AACvCR,IAAAA,CAAC,CAACrB,EAAF,GAAO,EAAP;;AACA,WAAO,EAAEsB,CAAT,EAAY;AACV,UAAIM,CAAC,GAAG/B,GAAG,CAAC2B,MAAJ,CAAWF,CAAX,CAAR;;AACA,UAAI,QAAQM,CAAR,IAAaL,MAAM,CAACK,CAAD,CAAN,IAAaA,CAA9B,EAAiC;AAC/B,UAAEN,CAAF;AACA;AACD;;AACDD,MAAAA,CAAC,CAACrB,EAAF,IAAQH,GAAG,CAAC2B,MAAJ,CAAWF,CAAX,CAAR;AACA,UAAIA,CAAC,IAAIzB,GAAG,CAAC8B,MAAb,EAAqB;AACtB;;AACDN,IAAAA,CAAC,CAACrB,EAAF,GAAOuB,MAAM,CAACF,CAAC,CAACrB,EAAH,CAAb;AACD,GAhDwB,CAkDzB;;;AACA,MAAIH,GAAG,CAAC2B,MAAJ,CAAW,EAAEF,CAAb,CAAJ,EAAqB;AACnBD,IAAAA,CAAC,GAAGS,QAAQ,CAACT,CAAD,EAAIxB,GAAG,CAACkC,MAAJ,CAAWT,CAAX,CAAJ,CAAZ;AACD;;AAEDnD,EAAAA,KAAK,CAAC,kBAAD,EAAqB0B,GAArB,EAA0BwB,CAA1B,CAAL;AACA,SAAOA,CAAP;AACD;;AAED,SAASS,QAAT,CAAkBT,CAAlB,EAAqBxB,GAArB,EAA0B;AACxB,MAAI;AACFwB,IAAAA,CAAC,CAACpB,IAAF,GAAS5B,IAAI,CAAC2D,KAAL,CAAWnC,GAAX,CAAT;AACD,GAFD,CAEE,OAAMoC,CAAN,EAAQ;AACR,WAAOR,KAAK,EAAZ;AACD;;AACD,SAAOJ,CAAP;AACD;;AAAA;AAED;AACA;AACA;AACA;AACA;;AAEAjC,OAAO,CAACC,SAAR,CAAkB6C,OAAlB,GAA4B,YAAW;AACrC,MAAI,KAAKtB,aAAT,EAAwB;AACtB,SAAKA,aAAL,CAAmBuB,sBAAnB;AACD;AACF,CAJD;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,SAASpB,mBAAT,CAA6BP,MAA7B,EAAqC;AACnC,OAAKQ,SAAL,GAAiBR,MAAjB;AACA,OAAKC,OAAL,GAAe,EAAf;AACD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEAM,mBAAmB,CAAC1B,SAApB,CAA8B+B,cAA9B,GAA+C,UAASgB,OAAT,EAAkB;AAC/D,OAAK3B,OAAL,CAAa4B,IAAb,CAAkBD,OAAlB;;AACA,MAAI,KAAK3B,OAAL,CAAakB,MAAb,IAAuB,KAAKX,SAAL,CAAejB,WAA1C,EAAuD;AAAE;AACvD,QAAIS,MAAM,GAAGjC,MAAM,CAAC+D,iBAAP,CAAyB,KAAKtB,SAA9B,EAAyC,KAAKP,OAA9C,CAAb;AACA,SAAK0B,sBAAL;AACA,WAAO3B,MAAP;AACD;;AACD,SAAO,IAAP;AACD,CARD;AAUA;AACA;AACA;AACA;AACA;;;AAEAO,mBAAmB,CAAC1B,SAApB,CAA8B8C,sBAA9B,GAAuD,YAAW;AAChE,OAAKnB,SAAL,GAAiB,IAAjB;AACA,OAAKP,OAAL,GAAe,EAAf;AACD,CAHD;;AAKA,SAASgB,KAAT,CAAexB,IAAf,EAAoB;AAClB,SAAO;AACLR,IAAAA,IAAI,EAAEhB,OAAO,CAACO,KADT;AAELiB,IAAAA,IAAI,EAAE;AAFD,GAAP;AAID","sourcesContent":["\n/**\n * Module dependencies.\n */\n\nvar debug = require('debug')('socket.io-parser');\nvar json = require('json3');\nvar Emitter = require('component-emitter');\nvar binary = require('./binary');\nvar isBuf = require('./is-buffer');\n\n/**\n * Protocol version.\n *\n * @api public\n */\n\nexports.protocol = 4;\n\n/**\n * Packet types.\n *\n * @api public\n */\n\nexports.types = [\n  'CONNECT',\n  'DISCONNECT',\n  'EVENT',\n  'ACK',\n  'ERROR',\n  'BINARY_EVENT',\n  'BINARY_ACK'\n];\n\n/**\n * Packet type `connect`.\n *\n * @api public\n */\n\nexports.CONNECT = 0;\n\n/**\n * Packet type `disconnect`.\n *\n * @api public\n */\n\nexports.DISCONNECT = 1;\n\n/**\n * Packet type `event`.\n *\n * @api public\n */\n\nexports.EVENT = 2;\n\n/**\n * Packet type `ack`.\n *\n * @api public\n */\n\nexports.ACK = 3;\n\n/**\n * Packet type `error`.\n *\n * @api public\n */\n\nexports.ERROR = 4;\n\n/**\n * Packet type 'binary event'\n *\n * @api public\n */\n\nexports.BINARY_EVENT = 5;\n\n/**\n * Packet type `binary ack`. For acks with binary arguments.\n *\n * @api public\n */\n\nexports.BINARY_ACK = 6;\n\n/**\n * Encoder constructor.\n *\n * @api public\n */\n\nexports.Encoder = Encoder;\n\n/**\n * Decoder constructor.\n *\n * @api public\n */\n\nexports.Decoder = Decoder;\n\n/**\n * A socket.io Encoder instance\n *\n * @api public\n */\n\nfunction Encoder() {}\n\n/**\n * Encode a packet as a single string if non-binary, or as a\n * buffer sequence, depending on packet type.\n *\n * @param {Object} obj - packet object\n * @param {Function} callback - function to handle encodings (likely engine.write)\n * @return Calls callback with Array of encodings\n * @api public\n */\n\nEncoder.prototype.encode = function(obj, callback){\n  debug('encoding packet %j', obj);\n\n  if (exports.BINARY_EVENT == obj.type || exports.BINARY_ACK == obj.type) {\n    encodeAsBinary(obj, callback);\n  }\n  else {\n    var encoding = encodeAsString(obj);\n    callback([encoding]);\n  }\n};\n\n/**\n * Encode packet as string.\n *\n * @param {Object} packet\n * @return {String} encoded\n * @api private\n */\n\nfunction encodeAsString(obj) {\n  var str = '';\n  var nsp = false;\n\n  // first is type\n  str += obj.type;\n\n  // attachments if we have them\n  if (exports.BINARY_EVENT == obj.type || exports.BINARY_ACK == obj.type) {\n    str += obj.attachments;\n    str += '-';\n  }\n\n  // if we have a namespace other than `/`\n  // we append it followed by a comma `,`\n  if (obj.nsp && '/' != obj.nsp) {\n    nsp = true;\n    str += obj.nsp;\n  }\n\n  // immediately followed by the id\n  if (null != obj.id) {\n    if (nsp) {\n      str += ',';\n      nsp = false;\n    }\n    str += obj.id;\n  }\n\n  // json data\n  if (null != obj.data) {\n    if (nsp) str += ',';\n    str += json.stringify(obj.data);\n  }\n\n  debug('encoded %j as %s', obj, str);\n  return str;\n}\n\n/**\n * Encode packet as 'buffer sequence' by removing blobs, and\n * deconstructing packet into object with placeholders and\n * a list of buffers.\n *\n * @param {Object} packet\n * @return {Buffer} encoded\n * @api private\n */\n\nfunction encodeAsBinary(obj, callback) {\n\n  function writeEncoding(bloblessData) {\n    var deconstruction = binary.deconstructPacket(bloblessData);\n    var pack = encodeAsString(deconstruction.packet);\n    var buffers = deconstruction.buffers;\n\n    buffers.unshift(pack); // add packet info to beginning of data list\n    callback(buffers); // write all the buffers\n  }\n\n  binary.removeBlobs(obj, writeEncoding);\n}\n\n/**\n * A socket.io Decoder instance\n *\n * @return {Object} decoder\n * @api public\n */\n\nfunction Decoder() {\n  this.reconstructor = null;\n}\n\n/**\n * Mix in `Emitter` with Decoder.\n */\n\nEmitter(Decoder.prototype);\n\n/**\n * Decodes an ecoded packet string into packet JSON.\n *\n * @param {String} obj - encoded packet\n * @return {Object} packet\n * @api public\n */\n\nDecoder.prototype.add = function(obj) {\n  var packet;\n  if ('string' == typeof obj) {\n    packet = decodeString(obj);\n    if (exports.BINARY_EVENT == packet.type || exports.BINARY_ACK == packet.type) { // binary packet's json\n      this.reconstructor = new BinaryReconstructor(packet);\n\n      // no attachments, labeled binary but no binary data to follow\n      if (this.reconstructor.reconPack.attachments === 0) {\n        this.emit('decoded', packet);\n      }\n    } else { // non-binary full packet\n      this.emit('decoded', packet);\n    }\n  }\n  else if (isBuf(obj) || obj.base64) { // raw binary data\n    if (!this.reconstructor) {\n      throw new Error('got binary data when not reconstructing a packet');\n    } else {\n      packet = this.reconstructor.takeBinaryData(obj);\n      if (packet) { // received final buffer\n        this.reconstructor = null;\n        this.emit('decoded', packet);\n      }\n    }\n  }\n  else {\n    throw new Error('Unknown type: ' + obj);\n  }\n};\n\n/**\n * Decode a packet String (JSON data)\n *\n * @param {String} str\n * @return {Object} packet\n * @api private\n */\n\nfunction decodeString(str) {\n  var p = {};\n  var i = 0;\n\n  // look up type\n  p.type = Number(str.charAt(0));\n  if (null == exports.types[p.type]) return error();\n\n  // look up attachments if type binary\n  if (exports.BINARY_EVENT == p.type || exports.BINARY_ACK == p.type) {\n    var buf = '';\n    while (str.charAt(++i) != '-') {\n      buf += str.charAt(i);\n      if (i == str.length) break;\n    }\n    if (buf != Number(buf) || str.charAt(i) != '-') {\n      throw new Error('Illegal attachments');\n    }\n    p.attachments = Number(buf);\n  }\n\n  // look up namespace (if any)\n  if ('/' == str.charAt(i + 1)) {\n    p.nsp = '';\n    while (++i) {\n      var c = str.charAt(i);\n      if (',' == c) break;\n      p.nsp += c;\n      if (i == str.length) break;\n    }\n  } else {\n    p.nsp = '/';\n  }\n\n  // look up id\n  var next = str.charAt(i + 1);\n  if ('' !== next && Number(next) == next) {\n    p.id = '';\n    while (++i) {\n      var c = str.charAt(i);\n      if (null == c || Number(c) != c) {\n        --i;\n        break;\n      }\n      p.id += str.charAt(i);\n      if (i == str.length) break;\n    }\n    p.id = Number(p.id);\n  }\n\n  // look up json data\n  if (str.charAt(++i)) {\n    p = tryParse(p, str.substr(i));\n  }\n\n  debug('decoded %s as %j', str, p);\n  return p;\n}\n\nfunction tryParse(p, str) {\n  try {\n    p.data = json.parse(str);\n  } catch(e){\n    return error();\n  }\n  return p; \n};\n\n/**\n * Deallocates a parser's resources\n *\n * @api public\n */\n\nDecoder.prototype.destroy = function() {\n  if (this.reconstructor) {\n    this.reconstructor.finishedReconstruction();\n  }\n};\n\n/**\n * A manager of a binary event's 'buffer sequence'. Should\n * be constructed whenever a packet of type BINARY_EVENT is\n * decoded.\n *\n * @param {Object} packet\n * @return {BinaryReconstructor} initialized reconstructor\n * @api private\n */\n\nfunction BinaryReconstructor(packet) {\n  this.reconPack = packet;\n  this.buffers = [];\n}\n\n/**\n * Method to be called when binary data received from connection\n * after a BINARY_EVENT packet.\n *\n * @param {Buffer | ArrayBuffer} binData - the raw binary data received\n * @return {null | Object} returns null if more binary data is expected or\n *   a reconstructed packet object if all buffers have been received.\n * @api private\n */\n\nBinaryReconstructor.prototype.takeBinaryData = function(binData) {\n  this.buffers.push(binData);\n  if (this.buffers.length == this.reconPack.attachments) { // done with buffer list\n    var packet = binary.reconstructPacket(this.reconPack, this.buffers);\n    this.finishedReconstruction();\n    return packet;\n  }\n  return null;\n};\n\n/**\n * Cleans up binary packet reconstruction variables.\n *\n * @api private\n */\n\nBinaryReconstructor.prototype.finishedReconstruction = function() {\n  this.reconPack = null;\n  this.buffers = [];\n};\n\nfunction error(data){\n  return {\n    type: exports.ERROR,\n    data: 'parser error'\n  };\n}\n"]},"metadata":{},"sourceType":"script"}