{"ast":null,"code":"var _jsxFileName = \"/home/subho/Programming/Internet-Technology/Athena/client/src/components/chat/chat.js\";\nimport React, { Component } from \"react\";\nimport ChatHeader from \"./chat-header\";\nimport ChatList from \"./chat-list\";\nimport \"./chat.css\";\nimport Display from \"./display\";\nimport SendBar from \"./sendbar\";\nimport history from \"../../history\";\nimport socket from \"../../socket\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Chat extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleDelete = receiver => {\n      const newReceiverList = this.state.receiverlist;\n      newReceiverList.delete(receiver.username);\n      this.setState({\n        receiverlist: newReceiverList\n      });\n      this.props.socket.emit(\"leave\", receiver.username);\n    };\n\n    this.handleDisplay = receiver => {\n      console.log(receiver);\n      this.setState({\n        receiver: receiver\n      });\n\n      if (this.storage.has(receiver.username)) {\n        this.setState({\n          currentMessages: this.storage.get(receiver.username)\n        });\n      } else {\n        this.setState({\n          currentMessages: []\n        });\n      }\n    };\n\n    this.handleLogout = () => {\n      console.log(this.username);\n      this.props.socket.emit(\"leave\", this.username);\n      history.push(\"/\");\n    };\n\n    this.handleUser = (username, type) => {\n      if (this.state.receiverlist.has(username) === false) {\n        this.setState(prevstate => ({\n          receiverlist: prevstate.receiverlist.set(username, type)\n        }));\n      }\n\n      if (type === group) {\n        this.props.socket.emit(\"join\", username);\n      }\n    };\n\n    this.handleSend = messageBody => {\n      const receivername = this.state.receiver.username;\n      const newMessage = {\n        from: this.username,\n        to: receivername,\n        type: messageBody.type,\n        content: messageBody.content\n      };\n      this.setState({\n        currentMessages: [...this.state.currentMessages, newMessage]\n      });\n\n      if (this.storage.has(receivername)) {\n        this.storage.set(receivername, [...this.storage.get(receivername), newMessage]);\n      } else {\n        this.storage.set(receivername, [newMessage]);\n      }\n\n      this.props.socket.emit(\"send\", newMessage);\n    };\n\n    this.storage = new Map();\n    this.state = {\n      receiverlist: new Map(),\n      receiver: {\n        username: \"\",\n        type: \"\"\n      },\n      currentMessages: []\n    };\n    this.username = this.props.username;\n    this.props.socket.on(\"receive\", message => {\n      console.log(message);\n\n      if (message.from === this.receiver.username) {\n        this.setState({\n          currentMessages: [...this.state.currentMessages, message]\n        });\n      }\n\n      if (this.storage.has(message.from)) {\n        this.storage.set(message.from, [...this.storage.get(message.from), message]);\n      } else {\n        this.storage.set(message.from, [message]);\n      }\n    });\n  }\n\n  render() {\n    let sendbar, display;\n\n    if (this.state.receiver.username !== \"\") {\n      sendbar = /*#__PURE__*/_jsxDEV(SendBar, {\n        handleSend: this.handleSend,\n        className: \"sendbar\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 17\n      }, this);\n      display = /*#__PURE__*/_jsxDEV(Display, {\n        username: this.username,\n        name: this.state.receiver.username,\n        messages: this.state.currentMessages\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 17\n      }, this);\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-container\",\n      children: [/*#__PURE__*/_jsxDEV(ChatHeader, {\n        username: this.username,\n        handleUser: this.handleUser,\n        handleLogout: this.handleLogout\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"section-2\",\n        children: [/*#__PURE__*/_jsxDEV(ChatList, {\n          receivers: this.state.receiverlist,\n          onDelete: this.handleDelete,\n          onDisplay: this.handleDisplay\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 140,\n          columnNumber: 21\n        }, this), display, sendbar]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default Chat;","map":{"version":3,"sources":["/home/subho/Programming/Internet-Technology/Athena/client/src/components/chat/chat.js"],"names":["React","Component","ChatHeader","ChatList","Display","SendBar","history","socket","Chat","constructor","props","handleDelete","receiver","newReceiverList","state","receiverlist","delete","username","setState","emit","handleDisplay","console","log","storage","has","currentMessages","get","handleLogout","push","handleUser","type","prevstate","set","group","handleSend","messageBody","receivername","newMessage","from","to","content","Map","on","message","render","sendbar","display"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\"\nimport ChatHeader from \"./chat-header\"\nimport ChatList from \"./chat-list\"\nimport \"./chat.css\"\nimport Display from \"./display\"\nimport SendBar from \"./sendbar\"\nimport history from \"../../history\"\nimport socket from \"../../socket\"\n\nclass Chat extends Component {\n    constructor(props) {\n        super(props)\n        this.storage = new Map()\n        this.state = {\n            receiverlist: new Map(),\n            receiver: {\n                username: \"\",\n                type: \"\",\n            },\n            currentMessages: [],\n        }\n        this.username = this.props.username\n\n        this.props.socket.on(\"receive\", (message) => {\n            console.log(message)\n            if (message.from === this.receiver.username) {\n                this.setState({\n                    currentMessages: [...this.state.currentMessages, message],\n                })\n            }\n\n            if (this.storage.has(message.from)) {\n                this.storage.set(message.from, [\n                    ...this.storage.get(message.from),\n                    message,\n                ])\n            } else {\n                this.storage.set(message.from, [message])\n            }\n        })\n    }\n\n    handleDelete = (receiver) => {\n        const newReceiverList = this.state.receiverlist\n        newReceiverList.delete(receiver.username)\n        this.setState({\n            receiverlist: newReceiverList,\n        })\n\n        this.props.socket.emit(\"leave\", receiver.username)\n    }\n\n    handleDisplay = (receiver) => {\n        console.log(receiver)\n\n        this.setState({\n            receiver: receiver,\n        })\n\n        if (this.storage.has(receiver.username)) {\n            this.setState({\n                currentMessages: this.storage.get(receiver.username),\n            })\n        } else {\n            this.setState({\n                currentMessages: [],\n            })\n        }\n    }\n\n    handleLogout = () => {\n        console.log(this.username)\n        this.props.socket.emit(\"leave\", this.username)\n        history.push(\"/\")\n    }\n\n    handleUser = (username, type) => {\n        if (this.state.receiverlist.has(username) === false) {\n            this.setState((prevstate) => ({\n                receiverlist: prevstate.receiverlist.set(username, type),\n            }))\n        }\n\n        if (type === group) {\n            this.props.socket.emit(\"join\", username)\n        }\n    }\n\n    handleSend = (messageBody) => {\n        const receivername = this.state.receiver.username\n\n        const newMessage = {\n            from: this.username,\n            to: receivername,\n            type: messageBody.type,\n            content: messageBody.content,\n        }\n\n        this.setState({\n            currentMessages: [...this.state.currentMessages, newMessage],\n        })\n\n        if (this.storage.has(receivername)) {\n            this.storage.set(receivername, [\n                ...this.storage.get(receivername),\n                newMessage,\n            ])\n        } else {\n            this.storage.set(receivername, [newMessage])\n        }\n\n        this.props.socket.emit(\"send\", newMessage)\n    }\n\n    render() {\n        let sendbar, display\n\n        if (this.state.receiver.username !== \"\") {\n            sendbar = (\n                <SendBar handleSend={this.handleSend} className=\"sendbar\" />\n            )\n\n            display = (\n                <Display\n                    username={this.username}\n                    name={this.state.receiver.username}\n                    messages={this.state.currentMessages}\n                />\n            )\n        }\n\n        return (\n            <div className=\"chat-container\">\n                <ChatHeader\n                    username={this.username}\n                    handleUser={this.handleUser}\n                    handleLogout={this.handleLogout}\n                />\n                <div className=\"section-2\">\n                    <ChatList\n                        receivers={this.state.receiverlist}\n                        onDelete={this.handleDelete}\n                        onDisplay={this.handleDisplay}\n                    />\n                    {display}\n                    {sendbar}\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default Chat\n"]},"metadata":{},"sourceType":"module"}