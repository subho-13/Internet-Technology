{"ast":null,"code":"/**\n * Module dependencies.\n */\nvar parser = require('socket.io-parser');\n\nvar debug = require('debug')('socket.io:client');\n\nvar url = require('url');\n/**\n * Module exports.\n */\n\n\nmodule.exports = Client;\n/**\n * Client constructor.\n *\n * @param {Server} server instance\n * @param {Socket} conn\n * @api private\n */\n\nfunction Client(server, conn) {\n  this.server = server;\n  this.conn = conn;\n  this.encoder = new parser.Encoder();\n  this.decoder = new parser.Decoder();\n  this.id = conn.id;\n  this.request = conn.request;\n  this.setup();\n  this.sockets = {};\n  this.nsps = {};\n  this.connectBuffer = [];\n}\n/**\n * Sets up event listeners.\n *\n * @api private\n */\n\n\nClient.prototype.setup = function () {\n  this.onclose = this.onclose.bind(this);\n  this.ondata = this.ondata.bind(this);\n  this.onerror = this.onerror.bind(this);\n  this.ondecoded = this.ondecoded.bind(this);\n  this.decoder.on('decoded', this.ondecoded);\n  this.conn.on('data', this.ondata);\n  this.conn.on('error', this.onerror);\n  this.conn.on('close', this.onclose);\n};\n/**\n * Connects a client to a namespace.\n *\n * @param {String} name namespace\n * @api private\n */\n\n\nClient.prototype.connect = function (name, query) {\n  debug('connecting to namespace %s', name);\n  var nsp = this.server.nsps[name];\n\n  if (!nsp) {\n    this.packet({\n      type: parser.ERROR,\n      nsp: name,\n      data: 'Invalid namespace'\n    });\n    return;\n  }\n\n  if ('/' != name && !this.nsps['/']) {\n    this.connectBuffer.push(name);\n    return;\n  }\n\n  var self = this;\n  var socket = nsp.add(this, query, function () {\n    self.sockets[socket.id] = socket;\n    self.nsps[nsp.name] = socket;\n\n    if ('/' == nsp.name && self.connectBuffer.length > 0) {\n      self.connectBuffer.forEach(self.connect, self);\n      self.connectBuffer = [];\n    }\n  });\n};\n/**\n * Disconnects from all namespaces and closes transport.\n *\n * @api private\n */\n\n\nClient.prototype.disconnect = function () {\n  for (var id in this.sockets) {\n    if (this.sockets.hasOwnProperty(id)) {\n      this.sockets[id].disconnect();\n    }\n  }\n\n  this.sockets = {};\n  this.close();\n};\n/**\n * Removes a socket. Called by each `Socket`.\n *\n * @api private\n */\n\n\nClient.prototype.remove = function (socket) {\n  if (this.sockets.hasOwnProperty(socket.id)) {\n    var nsp = this.sockets[socket.id].nsp.name;\n    delete this.sockets[socket.id];\n    delete this.nsps[nsp];\n  } else {\n    debug('ignoring remove for %s', socket.id);\n  }\n};\n/**\n * Closes the underlying connection.\n *\n * @api private\n */\n\n\nClient.prototype.close = function () {\n  if ('open' == this.conn.readyState) {\n    debug('forcing transport close');\n    this.conn.close();\n    this.onclose('forced server close');\n  }\n};\n/**\n * Writes a packet to the transport.\n *\n * @param {Object} packet object\n * @param {Object} opts\n * @api private\n */\n\n\nClient.prototype.packet = function (packet, opts) {\n  opts = opts || {};\n  var self = this; // this writes to the actual connection\n\n  function writeToEngine(encodedPackets) {\n    if (opts.volatile && !self.conn.transport.writable) return;\n\n    for (var i = 0; i < encodedPackets.length; i++) {\n      self.conn.write(encodedPackets[i], {\n        compress: opts.compress\n      });\n    }\n  }\n\n  if ('open' == this.conn.readyState) {\n    debug('writing packet %j', packet);\n\n    if (!opts.preEncoded) {\n      // not broadcasting, need to encode\n      this.encoder.encode(packet, function (encodedPackets) {\n        // encode, then write results to engine\n        writeToEngine(encodedPackets);\n      });\n    } else {\n      // a broadcast pre-encodes a packet\n      writeToEngine(packet);\n    }\n  } else {\n    debug('ignoring packet write %j', packet);\n  }\n};\n/**\n * Called with incoming transport data.\n *\n * @api private\n */\n\n\nClient.prototype.ondata = function (data) {\n  // try/catch is needed for protocol violations (GH-1880)\n  try {\n    this.decoder.add(data);\n  } catch (e) {\n    this.onerror(e);\n  }\n};\n/**\n * Called when parser fully decodes a packet.\n *\n * @api private\n */\n\n\nClient.prototype.ondecoded = function (packet) {\n  if (parser.CONNECT == packet.type) {\n    this.connect(url.parse(packet.nsp).pathname, url.parse(packet.nsp, true).query);\n  } else {\n    var socket = this.nsps[packet.nsp];\n\n    if (socket) {\n      process.nextTick(function () {\n        socket.onpacket(packet);\n      });\n    } else {\n      debug('no socket for namespace %s', packet.nsp);\n    }\n  }\n};\n/**\n * Handles an error.\n *\n * @param {Object} err object\n * @api private\n */\n\n\nClient.prototype.onerror = function (err) {\n  for (var id in this.sockets) {\n    if (this.sockets.hasOwnProperty(id)) {\n      this.sockets[id].onerror(err);\n    }\n  }\n\n  this.onclose('client error');\n};\n/**\n * Called upon transport close.\n *\n * @param {String} reason\n * @api private\n */\n\n\nClient.prototype.onclose = function (reason) {\n  debug('client close with reason %s', reason); // ignore a potential subsequent `close` event\n\n  this.destroy(); // `nsps` and `sockets` are cleaned up seamlessly\n\n  for (var id in this.sockets) {\n    if (this.sockets.hasOwnProperty(id)) {\n      this.sockets[id].onclose(reason);\n    }\n  }\n\n  this.sockets = {};\n  this.decoder.destroy(); // clean up decoder\n};\n/**\n * Cleans up event listeners.\n *\n * @api private\n */\n\n\nClient.prototype.destroy = function () {\n  this.conn.removeListener('data', this.ondata);\n  this.conn.removeListener('error', this.onerror);\n  this.conn.removeListener('close', this.onclose);\n  this.decoder.removeListener('decoded', this.ondecoded);\n};","map":{"version":3,"sources":["/home/subho/Programming/Internet-Technology/Athena/node_modules/socket.io/lib/client.js"],"names":["parser","require","debug","url","module","exports","Client","server","conn","encoder","Encoder","decoder","Decoder","id","request","setup","sockets","nsps","connectBuffer","prototype","onclose","bind","ondata","onerror","ondecoded","on","connect","name","query","nsp","packet","type","ERROR","data","push","self","socket","add","length","forEach","disconnect","hasOwnProperty","close","remove","readyState","opts","writeToEngine","encodedPackets","volatile","transport","writable","i","write","compress","preEncoded","encode","e","CONNECT","parse","pathname","process","nextTick","onpacket","err","reason","destroy","removeListener"],"mappings":"AACA;AACA;AACA;AAEA,IAAIA,MAAM,GAAGC,OAAO,CAAC,kBAAD,CAApB;;AACA,IAAIC,KAAK,GAAGD,OAAO,CAAC,OAAD,CAAP,CAAiB,kBAAjB,CAAZ;;AACA,IAAIE,GAAG,GAAGF,OAAO,CAAC,KAAD,CAAjB;AAEA;AACA;AACA;;;AAEAG,MAAM,CAACC,OAAP,GAAiBC,MAAjB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASA,MAAT,CAAgBC,MAAhB,EAAwBC,IAAxB,EAA6B;AAC3B,OAAKD,MAAL,GAAcA,MAAd;AACA,OAAKC,IAAL,GAAYA,IAAZ;AACA,OAAKC,OAAL,GAAe,IAAIT,MAAM,CAACU,OAAX,EAAf;AACA,OAAKC,OAAL,GAAe,IAAIX,MAAM,CAACY,OAAX,EAAf;AACA,OAAKC,EAAL,GAAUL,IAAI,CAACK,EAAf;AACA,OAAKC,OAAL,GAAeN,IAAI,CAACM,OAApB;AACA,OAAKC,KAAL;AACA,OAAKC,OAAL,GAAe,EAAf;AACA,OAAKC,IAAL,GAAY,EAAZ;AACA,OAAKC,aAAL,GAAqB,EAArB;AACD;AAED;AACA;AACA;AACA;AACA;;;AAEAZ,MAAM,CAACa,SAAP,CAAiBJ,KAAjB,GAAyB,YAAU;AACjC,OAAKK,OAAL,GAAe,KAAKA,OAAL,CAAaC,IAAb,CAAkB,IAAlB,CAAf;AACA,OAAKC,MAAL,GAAc,KAAKA,MAAL,CAAYD,IAAZ,CAAiB,IAAjB,CAAd;AACA,OAAKE,OAAL,GAAe,KAAKA,OAAL,CAAaF,IAAb,CAAkB,IAAlB,CAAf;AACA,OAAKG,SAAL,GAAiB,KAAKA,SAAL,CAAeH,IAAf,CAAoB,IAApB,CAAjB;AAEA,OAAKV,OAAL,CAAac,EAAb,CAAgB,SAAhB,EAA2B,KAAKD,SAAhC;AACA,OAAKhB,IAAL,CAAUiB,EAAV,CAAa,MAAb,EAAqB,KAAKH,MAA1B;AACA,OAAKd,IAAL,CAAUiB,EAAV,CAAa,OAAb,EAAsB,KAAKF,OAA3B;AACA,OAAKf,IAAL,CAAUiB,EAAV,CAAa,OAAb,EAAsB,KAAKL,OAA3B;AACD,CAVD;AAYA;AACA;AACA;AACA;AACA;AACA;;;AAEAd,MAAM,CAACa,SAAP,CAAiBO,OAAjB,GAA2B,UAASC,IAAT,EAAeC,KAAf,EAAqB;AAC9C1B,EAAAA,KAAK,CAAC,4BAAD,EAA+ByB,IAA/B,CAAL;AACA,MAAIE,GAAG,GAAG,KAAKtB,MAAL,CAAYU,IAAZ,CAAiBU,IAAjB,CAAV;;AACA,MAAI,CAACE,GAAL,EAAU;AACR,SAAKC,MAAL,CAAY;AAAEC,MAAAA,IAAI,EAAE/B,MAAM,CAACgC,KAAf;AAAsBH,MAAAA,GAAG,EAAEF,IAA3B;AAAiCM,MAAAA,IAAI,EAAG;AAAxC,KAAZ;AACA;AACD;;AAED,MAAI,OAAON,IAAP,IAAe,CAAC,KAAKV,IAAL,CAAU,GAAV,CAApB,EAAoC;AAClC,SAAKC,aAAL,CAAmBgB,IAAnB,CAAwBP,IAAxB;AACA;AACD;;AAED,MAAIQ,IAAI,GAAG,IAAX;AACA,MAAIC,MAAM,GAAGP,GAAG,CAACQ,GAAJ,CAAQ,IAAR,EAAcT,KAAd,EAAqB,YAAU;AAC1CO,IAAAA,IAAI,CAACnB,OAAL,CAAaoB,MAAM,CAACvB,EAApB,IAA0BuB,MAA1B;AACAD,IAAAA,IAAI,CAAClB,IAAL,CAAUY,GAAG,CAACF,IAAd,IAAsBS,MAAtB;;AAEA,QAAI,OAAOP,GAAG,CAACF,IAAX,IAAmBQ,IAAI,CAACjB,aAAL,CAAmBoB,MAAnB,GAA4B,CAAnD,EAAsD;AACpDH,MAAAA,IAAI,CAACjB,aAAL,CAAmBqB,OAAnB,CAA2BJ,IAAI,CAACT,OAAhC,EAAyCS,IAAzC;AACAA,MAAAA,IAAI,CAACjB,aAAL,GAAqB,EAArB;AACD;AACF,GARY,CAAb;AASD,CAvBD;AAyBA;AACA;AACA;AACA;AACA;;;AAEAZ,MAAM,CAACa,SAAP,CAAiBqB,UAAjB,GAA8B,YAAU;AACtC,OAAK,IAAI3B,EAAT,IAAe,KAAKG,OAApB,EAA6B;AAC3B,QAAI,KAAKA,OAAL,CAAayB,cAAb,CAA4B5B,EAA5B,CAAJ,EAAqC;AACnC,WAAKG,OAAL,CAAaH,EAAb,EAAiB2B,UAAjB;AACD;AACF;;AACD,OAAKxB,OAAL,GAAe,EAAf;AACA,OAAK0B,KAAL;AACD,CARD;AAUA;AACA;AACA;AACA;AACA;;;AAEApC,MAAM,CAACa,SAAP,CAAiBwB,MAAjB,GAA0B,UAASP,MAAT,EAAgB;AACxC,MAAI,KAAKpB,OAAL,CAAayB,cAAb,CAA4BL,MAAM,CAACvB,EAAnC,CAAJ,EAA4C;AAC1C,QAAIgB,GAAG,GAAG,KAAKb,OAAL,CAAaoB,MAAM,CAACvB,EAApB,EAAwBgB,GAAxB,CAA4BF,IAAtC;AACA,WAAO,KAAKX,OAAL,CAAaoB,MAAM,CAACvB,EAApB,CAAP;AACA,WAAO,KAAKI,IAAL,CAAUY,GAAV,CAAP;AACD,GAJD,MAIO;AACL3B,IAAAA,KAAK,CAAC,wBAAD,EAA2BkC,MAAM,CAACvB,EAAlC,CAAL;AACD;AACF,CARD;AAUA;AACA;AACA;AACA;AACA;;;AAEAP,MAAM,CAACa,SAAP,CAAiBuB,KAAjB,GAAyB,YAAU;AACjC,MAAI,UAAU,KAAKlC,IAAL,CAAUoC,UAAxB,EAAoC;AAClC1C,IAAAA,KAAK,CAAC,yBAAD,CAAL;AACA,SAAKM,IAAL,CAAUkC,KAAV;AACA,SAAKtB,OAAL,CAAa,qBAAb;AACD;AACF,CAND;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEAd,MAAM,CAACa,SAAP,CAAiBW,MAAjB,GAA0B,UAASA,MAAT,EAAiBe,IAAjB,EAAsB;AAC9CA,EAAAA,IAAI,GAAGA,IAAI,IAAI,EAAf;AACA,MAAIV,IAAI,GAAG,IAAX,CAF8C,CAI9C;;AACA,WAASW,aAAT,CAAuBC,cAAvB,EAAuC;AACrC,QAAIF,IAAI,CAACG,QAAL,IAAiB,CAACb,IAAI,CAAC3B,IAAL,CAAUyC,SAAV,CAAoBC,QAA1C,EAAoD;;AACpD,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,cAAc,CAACT,MAAnC,EAA2Ca,CAAC,EAA5C,EAAgD;AAC9ChB,MAAAA,IAAI,CAAC3B,IAAL,CAAU4C,KAAV,CAAgBL,cAAc,CAACI,CAAD,CAA9B,EAAmC;AAAEE,QAAAA,QAAQ,EAAER,IAAI,CAACQ;AAAjB,OAAnC;AACD;AACF;;AAED,MAAI,UAAU,KAAK7C,IAAL,CAAUoC,UAAxB,EAAoC;AAClC1C,IAAAA,KAAK,CAAC,mBAAD,EAAsB4B,MAAtB,CAAL;;AACA,QAAI,CAACe,IAAI,CAACS,UAAV,EAAsB;AAAE;AACtB,WAAK7C,OAAL,CAAa8C,MAAb,CAAoBzB,MAApB,EAA4B,UAAUiB,cAAV,EAA0B;AAAE;AACtDD,QAAAA,aAAa,CAACC,cAAD,CAAb;AACD,OAFD;AAGD,KAJD,MAIO;AAAE;AACPD,MAAAA,aAAa,CAAChB,MAAD,CAAb;AACD;AACF,GATD,MASO;AACL5B,IAAAA,KAAK,CAAC,0BAAD,EAA6B4B,MAA7B,CAAL;AACD;AACF,CAxBD;AA0BA;AACA;AACA;AACA;AACA;;;AAEAxB,MAAM,CAACa,SAAP,CAAiBG,MAAjB,GAA0B,UAASW,IAAT,EAAc;AACtC;AACA,MAAI;AACF,SAAKtB,OAAL,CAAa0B,GAAb,CAAiBJ,IAAjB;AACD,GAFD,CAEE,OAAMuB,CAAN,EAAS;AACT,SAAKjC,OAAL,CAAaiC,CAAb;AACD;AACF,CAPD;AASA;AACA;AACA;AACA;AACA;;;AAEAlD,MAAM,CAACa,SAAP,CAAiBK,SAAjB,GAA6B,UAASM,MAAT,EAAiB;AAC5C,MAAI9B,MAAM,CAACyD,OAAP,IAAkB3B,MAAM,CAACC,IAA7B,EAAmC;AACjC,SAAKL,OAAL,CAAavB,GAAG,CAACuD,KAAJ,CAAU5B,MAAM,CAACD,GAAjB,EAAsB8B,QAAnC,EAA6CxD,GAAG,CAACuD,KAAJ,CAAU5B,MAAM,CAACD,GAAjB,EAAsB,IAAtB,EAA4BD,KAAzE;AACD,GAFD,MAEO;AACL,QAAIQ,MAAM,GAAG,KAAKnB,IAAL,CAAUa,MAAM,CAACD,GAAjB,CAAb;;AACA,QAAIO,MAAJ,EAAY;AACVwB,MAAAA,OAAO,CAACC,QAAR,CAAiB,YAAW;AAC1BzB,QAAAA,MAAM,CAAC0B,QAAP,CAAgBhC,MAAhB;AACD,OAFD;AAGD,KAJD,MAIO;AACL5B,MAAAA,KAAK,CAAC,4BAAD,EAA+B4B,MAAM,CAACD,GAAtC,CAAL;AACD;AACF;AACF,CAbD;AAeA;AACA;AACA;AACA;AACA;AACA;;;AAEAvB,MAAM,CAACa,SAAP,CAAiBI,OAAjB,GAA2B,UAASwC,GAAT,EAAa;AACtC,OAAK,IAAIlD,EAAT,IAAe,KAAKG,OAApB,EAA6B;AAC3B,QAAI,KAAKA,OAAL,CAAayB,cAAb,CAA4B5B,EAA5B,CAAJ,EAAqC;AACnC,WAAKG,OAAL,CAAaH,EAAb,EAAiBU,OAAjB,CAAyBwC,GAAzB;AACD;AACF;;AACD,OAAK3C,OAAL,CAAa,cAAb;AACD,CAPD;AASA;AACA;AACA;AACA;AACA;AACA;;;AAEAd,MAAM,CAACa,SAAP,CAAiBC,OAAjB,GAA2B,UAAS4C,MAAT,EAAgB;AACzC9D,EAAAA,KAAK,CAAC,6BAAD,EAAgC8D,MAAhC,CAAL,CADyC,CAGzC;;AACA,OAAKC,OAAL,GAJyC,CAMzC;;AACA,OAAK,IAAIpD,EAAT,IAAe,KAAKG,OAApB,EAA6B;AAC3B,QAAI,KAAKA,OAAL,CAAayB,cAAb,CAA4B5B,EAA5B,CAAJ,EAAqC;AACnC,WAAKG,OAAL,CAAaH,EAAb,EAAiBO,OAAjB,CAAyB4C,MAAzB;AACD;AACF;;AACD,OAAKhD,OAAL,GAAe,EAAf;AAEA,OAAKL,OAAL,CAAasD,OAAb,GAdyC,CAcjB;AACzB,CAfD;AAiBA;AACA;AACA;AACA;AACA;;;AAEA3D,MAAM,CAACa,SAAP,CAAiB8C,OAAjB,GAA2B,YAAU;AACnC,OAAKzD,IAAL,CAAU0D,cAAV,CAAyB,MAAzB,EAAiC,KAAK5C,MAAtC;AACA,OAAKd,IAAL,CAAU0D,cAAV,CAAyB,OAAzB,EAAkC,KAAK3C,OAAvC;AACA,OAAKf,IAAL,CAAU0D,cAAV,CAAyB,OAAzB,EAAkC,KAAK9C,OAAvC;AACA,OAAKT,OAAL,CAAauD,cAAb,CAA4B,SAA5B,EAAuC,KAAK1C,SAA5C;AACD,CALD","sourcesContent":["\n/**\n * Module dependencies.\n */\n\nvar parser = require('socket.io-parser');\nvar debug = require('debug')('socket.io:client');\nvar url = require('url');\n\n/**\n * Module exports.\n */\n\nmodule.exports = Client;\n\n/**\n * Client constructor.\n *\n * @param {Server} server instance\n * @param {Socket} conn\n * @api private\n */\n\nfunction Client(server, conn){\n  this.server = server;\n  this.conn = conn;\n  this.encoder = new parser.Encoder();\n  this.decoder = new parser.Decoder();\n  this.id = conn.id;\n  this.request = conn.request;\n  this.setup();\n  this.sockets = {};\n  this.nsps = {};\n  this.connectBuffer = [];\n}\n\n/**\n * Sets up event listeners.\n *\n * @api private\n */\n\nClient.prototype.setup = function(){\n  this.onclose = this.onclose.bind(this);\n  this.ondata = this.ondata.bind(this);\n  this.onerror = this.onerror.bind(this);\n  this.ondecoded = this.ondecoded.bind(this);\n\n  this.decoder.on('decoded', this.ondecoded);\n  this.conn.on('data', this.ondata);\n  this.conn.on('error', this.onerror);\n  this.conn.on('close', this.onclose);\n};\n\n/**\n * Connects a client to a namespace.\n *\n * @param {String} name namespace\n * @api private\n */\n\nClient.prototype.connect = function(name, query){\n  debug('connecting to namespace %s', name);\n  var nsp = this.server.nsps[name];\n  if (!nsp) {\n    this.packet({ type: parser.ERROR, nsp: name, data : 'Invalid namespace'});\n    return;\n  }\n\n  if ('/' != name && !this.nsps['/']) {\n    this.connectBuffer.push(name);\n    return;\n  }\n\n  var self = this;\n  var socket = nsp.add(this, query, function(){\n    self.sockets[socket.id] = socket;\n    self.nsps[nsp.name] = socket;\n\n    if ('/' == nsp.name && self.connectBuffer.length > 0) {\n      self.connectBuffer.forEach(self.connect, self);\n      self.connectBuffer = [];\n    }\n  });\n};\n\n/**\n * Disconnects from all namespaces and closes transport.\n *\n * @api private\n */\n\nClient.prototype.disconnect = function(){\n  for (var id in this.sockets) {\n    if (this.sockets.hasOwnProperty(id)) {\n      this.sockets[id].disconnect();\n    }\n  }\n  this.sockets = {};\n  this.close();\n};\n\n/**\n * Removes a socket. Called by each `Socket`.\n *\n * @api private\n */\n\nClient.prototype.remove = function(socket){\n  if (this.sockets.hasOwnProperty(socket.id)) {\n    var nsp = this.sockets[socket.id].nsp.name;\n    delete this.sockets[socket.id];\n    delete this.nsps[nsp];\n  } else {\n    debug('ignoring remove for %s', socket.id);\n  }\n};\n\n/**\n * Closes the underlying connection.\n *\n * @api private\n */\n\nClient.prototype.close = function(){\n  if ('open' == this.conn.readyState) {\n    debug('forcing transport close');\n    this.conn.close();\n    this.onclose('forced server close');\n  }\n};\n\n/**\n * Writes a packet to the transport.\n *\n * @param {Object} packet object\n * @param {Object} opts\n * @api private\n */\n\nClient.prototype.packet = function(packet, opts){\n  opts = opts || {};\n  var self = this;\n\n  // this writes to the actual connection\n  function writeToEngine(encodedPackets) {\n    if (opts.volatile && !self.conn.transport.writable) return;\n    for (var i = 0; i < encodedPackets.length; i++) {\n      self.conn.write(encodedPackets[i], { compress: opts.compress });\n    }\n  }\n\n  if ('open' == this.conn.readyState) {\n    debug('writing packet %j', packet);\n    if (!opts.preEncoded) { // not broadcasting, need to encode\n      this.encoder.encode(packet, function (encodedPackets) { // encode, then write results to engine\n        writeToEngine(encodedPackets);\n      });\n    } else { // a broadcast pre-encodes a packet\n      writeToEngine(packet);\n    }\n  } else {\n    debug('ignoring packet write %j', packet);\n  }\n};\n\n/**\n * Called with incoming transport data.\n *\n * @api private\n */\n\nClient.prototype.ondata = function(data){\n  // try/catch is needed for protocol violations (GH-1880)\n  try {\n    this.decoder.add(data);\n  } catch(e) {\n    this.onerror(e);\n  }\n};\n\n/**\n * Called when parser fully decodes a packet.\n *\n * @api private\n */\n\nClient.prototype.ondecoded = function(packet) {\n  if (parser.CONNECT == packet.type) {\n    this.connect(url.parse(packet.nsp).pathname, url.parse(packet.nsp, true).query);\n  } else {\n    var socket = this.nsps[packet.nsp];\n    if (socket) {\n      process.nextTick(function() {\n        socket.onpacket(packet);\n      });\n    } else {\n      debug('no socket for namespace %s', packet.nsp);\n    }\n  }\n};\n\n/**\n * Handles an error.\n *\n * @param {Object} err object\n * @api private\n */\n\nClient.prototype.onerror = function(err){\n  for (var id in this.sockets) {\n    if (this.sockets.hasOwnProperty(id)) {\n      this.sockets[id].onerror(err);\n    }\n  }\n  this.onclose('client error');\n};\n\n/**\n * Called upon transport close.\n *\n * @param {String} reason\n * @api private\n */\n\nClient.prototype.onclose = function(reason){\n  debug('client close with reason %s', reason);\n\n  // ignore a potential subsequent `close` event\n  this.destroy();\n\n  // `nsps` and `sockets` are cleaned up seamlessly\n  for (var id in this.sockets) {\n    if (this.sockets.hasOwnProperty(id)) {\n      this.sockets[id].onclose(reason);\n    }\n  }\n  this.sockets = {};\n\n  this.decoder.destroy(); // clean up decoder\n};\n\n/**\n * Cleans up event listeners.\n *\n * @api private\n */\n\nClient.prototype.destroy = function(){\n  this.conn.removeListener('data', this.ondata);\n  this.conn.removeListener('error', this.onerror);\n  this.conn.removeListener('close', this.onclose);\n  this.decoder.removeListener('decoded', this.ondecoded);\n};\n"]},"metadata":{},"sourceType":"script"}