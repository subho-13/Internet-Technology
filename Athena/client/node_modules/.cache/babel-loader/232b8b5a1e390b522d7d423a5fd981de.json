{"ast":null,"code":"/**\n * This is the common logic for both the Node.js and web browser\n * implementations of `debug()`.\n *\n * Expose `debug()` as the module.\n */\nexports = module.exports = debug;\nexports.coerce = coerce;\nexports.disable = disable;\nexports.enable = enable;\nexports.enabled = enabled;\nexports.humanize = require('ms');\n/**\n * The currently active debug mode names, and names to skip.\n */\n\nexports.names = [];\nexports.skips = [];\n/**\n * Map of special \"%n\" handling functions, for the debug \"format\" argument.\n *\n * Valid key names are a single, lowercased letter, i.e. \"n\".\n */\n\nexports.formatters = {};\n/**\n * Previously assigned color.\n */\n\nvar prevColor = 0;\n/**\n * Previous log timestamp.\n */\n\nvar prevTime;\n/**\n * Select a color.\n *\n * @return {Number}\n * @api private\n */\n\nfunction selectColor() {\n  return exports.colors[prevColor++ % exports.colors.length];\n}\n/**\n * Create a debugger with the given `namespace`.\n *\n * @param {String} namespace\n * @return {Function}\n * @api public\n */\n\n\nfunction debug(namespace) {\n  // define the `disabled` version\n  function disabled() {}\n\n  disabled.enabled = false; // define the `enabled` version\n\n  function enabled() {\n    var self = enabled; // set `diff` timestamp\n\n    var curr = +new Date();\n    var ms = curr - (prevTime || curr);\n    self.diff = ms;\n    self.prev = prevTime;\n    self.curr = curr;\n    prevTime = curr; // add the `color` if not set\n\n    if (null == self.useColors) self.useColors = exports.useColors();\n    if (null == self.color && self.useColors) self.color = selectColor();\n    var args = Array.prototype.slice.call(arguments);\n    args[0] = exports.coerce(args[0]);\n\n    if ('string' !== typeof args[0]) {\n      // anything else let's inspect with %o\n      args = ['%o'].concat(args);\n    } // apply any `formatters` transformations\n\n\n    var index = 0;\n    args[0] = args[0].replace(/%([a-z%])/g, function (match, format) {\n      // if we encounter an escaped % then don't increase the array index\n      if (match === '%%') return match;\n      index++;\n      var formatter = exports.formatters[format];\n\n      if ('function' === typeof formatter) {\n        var val = args[index];\n        match = formatter.call(self, val); // now we need to remove `args[index]` since it's inlined in the `format`\n\n        args.splice(index, 1);\n        index--;\n      }\n\n      return match;\n    });\n\n    if ('function' === typeof exports.formatArgs) {\n      args = exports.formatArgs.apply(self, args);\n    }\n\n    var logFn = enabled.log || exports.log || console.log.bind(console);\n    logFn.apply(self, args);\n  }\n\n  enabled.enabled = true;\n  var fn = exports.enabled(namespace) ? enabled : disabled;\n  fn.namespace = namespace;\n  return fn;\n}\n/**\n * Enables a debug mode by namespaces. This can include modes\n * separated by a colon and wildcards.\n *\n * @param {String} namespaces\n * @api public\n */\n\n\nfunction enable(namespaces) {\n  exports.save(namespaces);\n  var split = (namespaces || '').split(/[\\s,]+/);\n  var len = split.length;\n\n  for (var i = 0; i < len; i++) {\n    if (!split[i]) continue; // ignore empty strings\n\n    namespaces = split[i].replace(/\\*/g, '.*?');\n\n    if (namespaces[0] === '-') {\n      exports.skips.push(new RegExp('^' + namespaces.substr(1) + '$'));\n    } else {\n      exports.names.push(new RegExp('^' + namespaces + '$'));\n    }\n  }\n}\n/**\n * Disable debug output.\n *\n * @api public\n */\n\n\nfunction disable() {\n  exports.enable('');\n}\n/**\n * Returns true if the given mode name is enabled, false otherwise.\n *\n * @param {String} name\n * @return {Boolean}\n * @api public\n */\n\n\nfunction enabled(name) {\n  var i, len;\n\n  for (i = 0, len = exports.skips.length; i < len; i++) {\n    if (exports.skips[i].test(name)) {\n      return false;\n    }\n  }\n\n  for (i = 0, len = exports.names.length; i < len; i++) {\n    if (exports.names[i].test(name)) {\n      return true;\n    }\n  }\n\n  return false;\n}\n/**\n * Coerce `val`.\n *\n * @param {Mixed} val\n * @return {Mixed}\n * @api private\n */\n\n\nfunction coerce(val) {\n  if (val instanceof Error) return val.stack || val.message;\n  return val;\n}","map":{"version":3,"sources":["/home/subho/Programming/Internet-Technology/Athena/node_modules/socket.io-parser/node_modules/debug/debug.js"],"names":["exports","module","debug","coerce","disable","enable","enabled","humanize","require","names","skips","formatters","prevColor","prevTime","selectColor","colors","length","namespace","disabled","self","curr","Date","ms","diff","prev","useColors","color","args","Array","prototype","slice","call","arguments","concat","index","replace","match","format","formatter","val","splice","formatArgs","apply","logFn","log","console","bind","fn","namespaces","save","split","len","i","push","RegExp","substr","name","test","Error","stack","message"],"mappings":"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","sourcesContent":["\n/**\n * This is the common logic for both the Node.js and web browser\n * implementations of `debug()`.\n *\n * Expose `debug()` as the module.\n */\n\nexports = module.exports = debug;\nexports.coerce = coerce;\nexports.disable = disable;\nexports.enable = enable;\nexports.enabled = enabled;\nexports.humanize = require('ms');\n\n/**\n * The currently active debug mode names, and names to skip.\n */\n\nexports.names = [];\nexports.skips = [];\n\n/**\n * Map of special \"%n\" handling functions, for the debug \"format\" argument.\n *\n * Valid key names are a single, lowercased letter, i.e. \"n\".\n */\n\nexports.formatters = {};\n\n/**\n * Previously assigned color.\n */\n\nvar prevColor = 0;\n\n/**\n * Previous log timestamp.\n */\n\nvar prevTime;\n\n/**\n * Select a color.\n *\n * @return {Number}\n * @api private\n */\n\nfunction selectColor() {\n  return exports.colors[prevColor++ % exports.colors.length];\n}\n\n/**\n * Create a debugger with the given `namespace`.\n *\n * @param {String} namespace\n * @return {Function}\n * @api public\n */\n\nfunction debug(namespace) {\n\n  // define the `disabled` version\n  function disabled() {\n  }\n  disabled.enabled = false;\n\n  // define the `enabled` version\n  function enabled() {\n\n    var self = enabled;\n\n    // set `diff` timestamp\n    var curr = +new Date();\n    var ms = curr - (prevTime || curr);\n    self.diff = ms;\n    self.prev = prevTime;\n    self.curr = curr;\n    prevTime = curr;\n\n    // add the `color` if not set\n    if (null == self.useColors) self.useColors = exports.useColors();\n    if (null == self.color && self.useColors) self.color = selectColor();\n\n    var args = Array.prototype.slice.call(arguments);\n\n    args[0] = exports.coerce(args[0]);\n\n    if ('string' !== typeof args[0]) {\n      // anything else let's inspect with %o\n      args = ['%o'].concat(args);\n    }\n\n    // apply any `formatters` transformations\n    var index = 0;\n    args[0] = args[0].replace(/%([a-z%])/g, function(match, format) {\n      // if we encounter an escaped % then don't increase the array index\n      if (match === '%%') return match;\n      index++;\n      var formatter = exports.formatters[format];\n      if ('function' === typeof formatter) {\n        var val = args[index];\n        match = formatter.call(self, val);\n\n        // now we need to remove `args[index]` since it's inlined in the `format`\n        args.splice(index, 1);\n        index--;\n      }\n      return match;\n    });\n\n    if ('function' === typeof exports.formatArgs) {\n      args = exports.formatArgs.apply(self, args);\n    }\n    var logFn = enabled.log || exports.log || console.log.bind(console);\n    logFn.apply(self, args);\n  }\n  enabled.enabled = true;\n\n  var fn = exports.enabled(namespace) ? enabled : disabled;\n\n  fn.namespace = namespace;\n\n  return fn;\n}\n\n/**\n * Enables a debug mode by namespaces. This can include modes\n * separated by a colon and wildcards.\n *\n * @param {String} namespaces\n * @api public\n */\n\nfunction enable(namespaces) {\n  exports.save(namespaces);\n\n  var split = (namespaces || '').split(/[\\s,]+/);\n  var len = split.length;\n\n  for (var i = 0; i < len; i++) {\n    if (!split[i]) continue; // ignore empty strings\n    namespaces = split[i].replace(/\\*/g, '.*?');\n    if (namespaces[0] === '-') {\n      exports.skips.push(new RegExp('^' + namespaces.substr(1) + '$'));\n    } else {\n      exports.names.push(new RegExp('^' + namespaces + '$'));\n    }\n  }\n}\n\n/**\n * Disable debug output.\n *\n * @api public\n */\n\nfunction disable() {\n  exports.enable('');\n}\n\n/**\n * Returns true if the given mode name is enabled, false otherwise.\n *\n * @param {String} name\n * @return {Boolean}\n * @api public\n */\n\nfunction enabled(name) {\n  var i, len;\n  for (i = 0, len = exports.skips.length; i < len; i++) {\n    if (exports.skips[i].test(name)) {\n      return false;\n    }\n  }\n  for (i = 0, len = exports.names.length; i < len; i++) {\n    if (exports.names[i].test(name)) {\n      return true;\n    }\n  }\n  return false;\n}\n\n/**\n * Coerce `val`.\n *\n * @param {Mixed} val\n * @return {Mixed}\n * @api private\n */\n\nfunction coerce(val) {\n  if (val instanceof Error) return val.stack || val.message;\n  return val;\n}\n"]},"metadata":{},"sourceType":"script"}