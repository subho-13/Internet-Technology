{"ast":null,"code":"/*global Blob,File*/\n\n/**\n * Module requirements\n */\nvar isArray = require('isarray');\n\nvar isBuf = require('./is-buffer');\n/**\n * Replaces every Buffer | ArrayBuffer in packet with a numbered placeholder.\n * Anything with blobs or files should be fed through removeBlobs before coming\n * here.\n *\n * @param {Object} packet - socket.io event packet\n * @return {Object} with deconstructed packet and list of buffers\n * @api public\n */\n\n\nexports.deconstructPacket = function (packet) {\n  var buffers = [];\n  var packetData = packet.data;\n\n  function _deconstructPacket(data) {\n    if (!data) return data;\n\n    if (isBuf(data)) {\n      var placeholder = {\n        _placeholder: true,\n        num: buffers.length\n      };\n      buffers.push(data);\n      return placeholder;\n    } else if (isArray(data)) {\n      var newData = new Array(data.length);\n\n      for (var i = 0; i < data.length; i++) {\n        newData[i] = _deconstructPacket(data[i]);\n      }\n\n      return newData;\n    } else if ('object' == typeof data && !(data instanceof Date)) {\n      var newData = {};\n\n      for (var key in data) {\n        newData[key] = _deconstructPacket(data[key]);\n      }\n\n      return newData;\n    }\n\n    return data;\n  }\n\n  var pack = packet;\n  pack.data = _deconstructPacket(packetData);\n  pack.attachments = buffers.length; // number of binary 'attachments'\n\n  return {\n    packet: pack,\n    buffers: buffers\n  };\n};\n/**\n * Reconstructs a binary packet from its placeholder packet and buffers\n *\n * @param {Object} packet - event packet with placeholders\n * @param {Array} buffers - binary buffers to put in placeholder positions\n * @return {Object} reconstructed packet\n * @api public\n */\n\n\nexports.reconstructPacket = function (packet, buffers) {\n  var curPlaceHolder = 0;\n\n  function _reconstructPacket(data) {\n    if (data && data._placeholder) {\n      var buf = buffers[data.num]; // appropriate buffer (should be natural order anyway)\n\n      return buf;\n    } else if (isArray(data)) {\n      for (var i = 0; i < data.length; i++) {\n        data[i] = _reconstructPacket(data[i]);\n      }\n\n      return data;\n    } else if (data && 'object' == typeof data) {\n      for (var key in data) {\n        data[key] = _reconstructPacket(data[key]);\n      }\n\n      return data;\n    }\n\n    return data;\n  }\n\n  packet.data = _reconstructPacket(packet.data);\n  packet.attachments = undefined; // no longer useful\n\n  return packet;\n};\n/**\n * Asynchronously removes Blobs or Files from data via\n * FileReader's readAsArrayBuffer method. Used before encoding\n * data as msgpack. Calls callback with the blobless data.\n *\n * @param {Object} data\n * @param {Function} callback\n * @api private\n */\n\n\nexports.removeBlobs = function (data, callback) {\n  function _removeBlobs(obj, curKey, containingObject) {\n    if (!obj) return obj; // convert any blob\n\n    if (global.Blob && obj instanceof Blob || global.File && obj instanceof File) {\n      pendingBlobs++; // async filereader\n\n      var fileReader = new FileReader();\n\n      fileReader.onload = function () {\n        // this.result == arraybuffer\n        if (containingObject) {\n          containingObject[curKey] = this.result;\n        } else {\n          bloblessData = this.result;\n        } // if nothing pending its callback time\n\n\n        if (! --pendingBlobs) {\n          callback(bloblessData);\n        }\n      };\n\n      fileReader.readAsArrayBuffer(obj); // blob -> arraybuffer\n    } else if (isArray(obj)) {\n      // handle array\n      for (var i = 0; i < obj.length; i++) {\n        _removeBlobs(obj[i], i, obj);\n      }\n    } else if (obj && 'object' == typeof obj && !isBuf(obj)) {\n      // and object\n      for (var key in obj) {\n        _removeBlobs(obj[key], key, obj);\n      }\n    }\n  }\n\n  var pendingBlobs = 0;\n  var bloblessData = data;\n\n  _removeBlobs(bloblessData);\n\n  if (!pendingBlobs) {\n    callback(bloblessData);\n  }\n};","map":{"version":3,"sources":["/home/subho/Programming/Internet-Technology/Athena/node_modules/socket.io-parser/binary.js"],"names":["isArray","require","isBuf","exports","deconstructPacket","packet","buffers","packetData","data","_deconstructPacket","placeholder","_placeholder","num","length","push","newData","Array","i","Date","key","pack","attachments","reconstructPacket","curPlaceHolder","_reconstructPacket","buf","undefined","removeBlobs","callback","_removeBlobs","obj","curKey","containingObject","global","Blob","File","pendingBlobs","fileReader","FileReader","onload","result","bloblessData","readAsArrayBuffer"],"mappings":"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","sourcesContent":["/*global Blob,File*/\n\n/**\n * Module requirements\n */\n\nvar isArray = require('isarray');\nvar isBuf = require('./is-buffer');\n\n/**\n * Replaces every Buffer | ArrayBuffer in packet with a numbered placeholder.\n * Anything with blobs or files should be fed through removeBlobs before coming\n * here.\n *\n * @param {Object} packet - socket.io event packet\n * @return {Object} with deconstructed packet and list of buffers\n * @api public\n */\n\nexports.deconstructPacket = function(packet){\n  var buffers = [];\n  var packetData = packet.data;\n\n  function _deconstructPacket(data) {\n    if (!data) return data;\n\n    if (isBuf(data)) {\n      var placeholder = { _placeholder: true, num: buffers.length };\n      buffers.push(data);\n      return placeholder;\n    } else if (isArray(data)) {\n      var newData = new Array(data.length);\n      for (var i = 0; i < data.length; i++) {\n        newData[i] = _deconstructPacket(data[i]);\n      }\n      return newData;\n    } else if ('object' == typeof data && !(data instanceof Date)) {\n      var newData = {};\n      for (var key in data) {\n        newData[key] = _deconstructPacket(data[key]);\n      }\n      return newData;\n    }\n    return data;\n  }\n\n  var pack = packet;\n  pack.data = _deconstructPacket(packetData);\n  pack.attachments = buffers.length; // number of binary 'attachments'\n  return {packet: pack, buffers: buffers};\n};\n\n/**\n * Reconstructs a binary packet from its placeholder packet and buffers\n *\n * @param {Object} packet - event packet with placeholders\n * @param {Array} buffers - binary buffers to put in placeholder positions\n * @return {Object} reconstructed packet\n * @api public\n */\n\nexports.reconstructPacket = function(packet, buffers) {\n  var curPlaceHolder = 0;\n\n  function _reconstructPacket(data) {\n    if (data && data._placeholder) {\n      var buf = buffers[data.num]; // appropriate buffer (should be natural order anyway)\n      return buf;\n    } else if (isArray(data)) {\n      for (var i = 0; i < data.length; i++) {\n        data[i] = _reconstructPacket(data[i]);\n      }\n      return data;\n    } else if (data && 'object' == typeof data) {\n      for (var key in data) {\n        data[key] = _reconstructPacket(data[key]);\n      }\n      return data;\n    }\n    return data;\n  }\n\n  packet.data = _reconstructPacket(packet.data);\n  packet.attachments = undefined; // no longer useful\n  return packet;\n};\n\n/**\n * Asynchronously removes Blobs or Files from data via\n * FileReader's readAsArrayBuffer method. Used before encoding\n * data as msgpack. Calls callback with the blobless data.\n *\n * @param {Object} data\n * @param {Function} callback\n * @api private\n */\n\nexports.removeBlobs = function(data, callback) {\n  function _removeBlobs(obj, curKey, containingObject) {\n    if (!obj) return obj;\n\n    // convert any blob\n    if ((global.Blob && obj instanceof Blob) ||\n        (global.File && obj instanceof File)) {\n      pendingBlobs++;\n\n      // async filereader\n      var fileReader = new FileReader();\n      fileReader.onload = function() { // this.result == arraybuffer\n        if (containingObject) {\n          containingObject[curKey] = this.result;\n        }\n        else {\n          bloblessData = this.result;\n        }\n\n        // if nothing pending its callback time\n        if(! --pendingBlobs) {\n          callback(bloblessData);\n        }\n      };\n\n      fileReader.readAsArrayBuffer(obj); // blob -> arraybuffer\n    } else if (isArray(obj)) { // handle array\n      for (var i = 0; i < obj.length; i++) {\n        _removeBlobs(obj[i], i, obj);\n      }\n    } else if (obj && 'object' == typeof obj && !isBuf(obj)) { // and object\n      for (var key in obj) {\n        _removeBlobs(obj[key], key, obj);\n      }\n    }\n  }\n\n  var pendingBlobs = 0;\n  var bloblessData = data;\n  _removeBlobs(bloblessData);\n  if (!pendingBlobs) {\n    callback(bloblessData);\n  }\n};\n"]},"metadata":{},"sourceType":"script"}