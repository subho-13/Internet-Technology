{"ast":null,"code":"var _jsxFileName = \"/home/subho/Programming/Internet-Technology/Athena/client/src/components/chat/chat.js\";\nimport React, { Component } from \"react\";\nimport ChatHeader from \"./chat-header\";\nimport ChatList from \"./chat-list\";\nimport \"./chat.css\";\nimport Display from \"./display\";\nimport SendBar from \"./sendbar\";\nimport history from \"../../history\";\nimport socket from \"../../socket\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Chat extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleDelete = receiver => {\n      const newReceiverList = this.state.receiverlist;\n      newReceiverList.delete(receiver.username);\n      this.setState({\n        receiverlist: newReceiverList\n      });\n\n      if (receiver.type === \"group\") {\n        socket.emit(\"leave\", receiver.username);\n      }\n    };\n\n    this.handleDisplay = receiver => {\n      this.setState({\n        receiver: receiver\n      });\n\n      if (this.storage.has(receiver.username)) {\n        this.setState({\n          currentMessages: this.storage.get(receiver.username)\n        });\n      } else {\n        this.setState({\n          currentMessages: []\n        });\n      }\n    };\n\n    this.handleGroupReceive = message => {\n      if (message.to === this.state.receiver.username) {\n        this.setState({\n          currentMessages: [...this.state.currentMessages, message]\n        });\n      }\n\n      if (this.storage.has(message.to)) {\n        this.storage.set(message.to, [...this.storage.get(message.to), message]);\n      } else {\n        this.storage.set(message.to, [message]);\n      }\n    };\n\n    this.handlePersonalReceive = message => {\n      if (message.from === this.state.receiver.username) {\n        this.setState({\n          currentMessages: [...this.state.currentMessages, message]\n        });\n      }\n\n      if (this.storage.has(message.from)) {\n        this.storage.set(message.from, [...this.storage.get(message.from), message]);\n      } else {\n        this.storage.set(message.from, [message]);\n      }\n    };\n\n    this.handleLogout = () => {\n      console.log(this.username);\n      socket.emit(\"leave\", this.username);\n      history.push(\"/\");\n    };\n\n    this.handleUser = (username, type) => {\n      if (this.state.receiverlist.has(username) === false) {\n        this.setState(prevstate => ({\n          receiverlist: prevstate.receiverlist.set(username, type)\n        }));\n      }\n\n      if (type === \"group\") {\n        socket.emit(\"join\", username);\n      }\n    };\n\n    this.handleSend = messageBody => {\n      const receivername = this.state.receiver.username;\n      const newMessage = {\n        from: this.username,\n        to: receivername,\n        type: messageBody.type,\n        content: messageBody.content\n      };\n      this.setState({\n        currentMessages: [...this.state.currentMessages, newMessage]\n      });\n\n      if (this.storage.has(receivername)) {\n        this.storage.set(receivername, [...this.storage.get(receivername), newMessage]);\n      } else {\n        this.storage.set(receivername, [newMessage]);\n      }\n\n      socket.emit(\"send\", newMessage);\n    };\n\n    this.storage = new Map();\n    this.state = {\n      receiverlist: new Map(),\n      receiver: {\n        username: \"\",\n        type: \"\"\n      },\n      currentMessages: []\n    };\n    this.username = this.props.username;\n    socket.on(\"recieve\", message => {\n      console.log(message);\n\n      if (message.to === this.username) {}\n    });\n  }\n\n  render() {\n    let sendbar, display;\n\n    if (this.state.receiver.username !== \"\") {\n      sendbar = /*#__PURE__*/_jsxDEV(SendBar, {\n        handleSend: this.handleSend,\n        className: \"sendbar\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 17\n      }, this);\n      display = /*#__PURE__*/_jsxDEV(Display, {\n        username: this.username,\n        name: this.state.receiver.username,\n        messages: this.state.currentMessages\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 17\n      }, this);\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-container\",\n      children: [/*#__PURE__*/_jsxDEV(ChatHeader, {\n        username: this.username,\n        handleUser: this.handleUser,\n        handleLogout: this.handleLogout\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"section-2\",\n        children: [/*#__PURE__*/_jsxDEV(ChatList, {\n          receivers: this.state.receiverlist,\n          onDelete: this.handleDelete,\n          onDisplay: this.handleDisplay\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 164,\n          columnNumber: 21\n        }, this), display, sendbar]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default Chat;","map":{"version":3,"sources":["/home/subho/Programming/Internet-Technology/Athena/client/src/components/chat/chat.js"],"names":["React","Component","ChatHeader","ChatList","Display","SendBar","history","socket","Chat","constructor","props","handleDelete","receiver","newReceiverList","state","receiverlist","delete","username","setState","type","emit","handleDisplay","storage","has","currentMessages","get","handleGroupReceive","message","to","set","handlePersonalReceive","from","handleLogout","console","log","push","handleUser","prevstate","handleSend","messageBody","receivername","newMessage","content","Map","on","render","sendbar","display"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,UAAP,MAAuB,eAAvB;AACA,OAAOC,QAAP,MAAqB,aAArB;AACA,OAAO,YAAP;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,OAAOC,OAAP,MAAoB,eAApB;AACA,OAAOC,MAAP,MAAmB,cAAnB;;;AAEA,MAAMC,IAAN,SAAmBP,SAAnB,CAA6B;AACzBQ,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;;AADe,SAsBnBC,YAtBmB,GAsBHC,QAAD,IAAc;AACzB,YAAMC,eAAe,GAAG,KAAKC,KAAL,CAAWC,YAAnC;AACAF,MAAAA,eAAe,CAACG,MAAhB,CAAuBJ,QAAQ,CAACK,QAAhC;AACA,WAAKC,QAAL,CAAc;AACVH,QAAAA,YAAY,EAAEF;AADJ,OAAd;;AAIA,UAAID,QAAQ,CAACO,IAAT,KAAkB,OAAtB,EAA+B;AAC3BZ,QAAAA,MAAM,CAACa,IAAP,CAAY,OAAZ,EAAqBR,QAAQ,CAACK,QAA9B;AACH;AACJ,KAhCkB;;AAAA,SAkCnBI,aAlCmB,GAkCFT,QAAD,IAAc;AAC1B,WAAKM,QAAL,CAAc;AACVN,QAAAA,QAAQ,EAAEA;AADA,OAAd;;AAIA,UAAI,KAAKU,OAAL,CAAaC,GAAb,CAAiBX,QAAQ,CAACK,QAA1B,CAAJ,EAAyC;AACrC,aAAKC,QAAL,CAAc;AACVM,UAAAA,eAAe,EAAE,KAAKF,OAAL,CAAaG,GAAb,CAAiBb,QAAQ,CAACK,QAA1B;AADP,SAAd;AAGH,OAJD,MAIO;AACH,aAAKC,QAAL,CAAc;AACVM,UAAAA,eAAe,EAAE;AADP,SAAd;AAGH;AACJ,KAhDkB;;AAAA,SAkDnBE,kBAlDmB,GAkDGC,OAAD,IAAa;AAC9B,UAAIA,OAAO,CAACC,EAAR,KAAe,KAAKd,KAAL,CAAWF,QAAX,CAAoBK,QAAvC,EAAiD;AAC7C,aAAKC,QAAL,CAAc;AACVM,UAAAA,eAAe,EAAE,CAAC,GAAG,KAAKV,KAAL,CAAWU,eAAf,EAAgCG,OAAhC;AADP,SAAd;AAGH;;AAED,UAAI,KAAKL,OAAL,CAAaC,GAAb,CAAiBI,OAAO,CAACC,EAAzB,CAAJ,EAAkC;AAC9B,aAAKN,OAAL,CAAaO,GAAb,CAAiBF,OAAO,CAACC,EAAzB,EAA6B,CACzB,GAAG,KAAKN,OAAL,CAAaG,GAAb,CAAiBE,OAAO,CAACC,EAAzB,CADsB,EAEzBD,OAFyB,CAA7B;AAIH,OALD,MAKO;AACH,aAAKL,OAAL,CAAaO,GAAb,CAAiBF,OAAO,CAACC,EAAzB,EAA6B,CAACD,OAAD,CAA7B;AACH;AACJ,KAjEkB;;AAAA,SAmEnBG,qBAnEmB,GAmEMH,OAAD,IAAa;AACjC,UAAIA,OAAO,CAACI,IAAR,KAAiB,KAAKjB,KAAL,CAAWF,QAAX,CAAoBK,QAAzC,EAAmD;AAC/C,aAAKC,QAAL,CAAc;AACVM,UAAAA,eAAe,EAAE,CAAC,GAAG,KAAKV,KAAL,CAAWU,eAAf,EAAgCG,OAAhC;AADP,SAAd;AAGH;;AAED,UAAI,KAAKL,OAAL,CAAaC,GAAb,CAAiBI,OAAO,CAACI,IAAzB,CAAJ,EAAoC;AAChC,aAAKT,OAAL,CAAaO,GAAb,CAAiBF,OAAO,CAACI,IAAzB,EAA+B,CAC3B,GAAG,KAAKT,OAAL,CAAaG,GAAb,CAAiBE,OAAO,CAACI,IAAzB,CADwB,EAE3BJ,OAF2B,CAA/B;AAIH,OALD,MAKO;AACH,aAAKL,OAAL,CAAaO,GAAb,CAAiBF,OAAO,CAACI,IAAzB,EAA+B,CAACJ,OAAD,CAA/B;AACH;AACJ,KAlFkB;;AAAA,SAoFnBK,YApFmB,GAoFJ,MAAM;AACjBC,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAKjB,QAAjB;AACAV,MAAAA,MAAM,CAACa,IAAP,CAAY,OAAZ,EAAqB,KAAKH,QAA1B;AACAX,MAAAA,OAAO,CAAC6B,IAAR,CAAa,GAAb;AACH,KAxFkB;;AAAA,SA0FnBC,UA1FmB,GA0FN,CAACnB,QAAD,EAAWE,IAAX,KAAoB;AAC7B,UAAI,KAAKL,KAAL,CAAWC,YAAX,CAAwBQ,GAAxB,CAA4BN,QAA5B,MAA0C,KAA9C,EAAqD;AACjD,aAAKC,QAAL,CAAemB,SAAD,KAAgB;AAC1BtB,UAAAA,YAAY,EAAEsB,SAAS,CAACtB,YAAV,CAAuBc,GAAvB,CAA2BZ,QAA3B,EAAqCE,IAArC;AADY,SAAhB,CAAd;AAGH;;AAED,UAAIA,IAAI,KAAK,OAAb,EAAsB;AAClBZ,QAAAA,MAAM,CAACa,IAAP,CAAY,MAAZ,EAAoBH,QAApB;AACH;AACJ,KApGkB;;AAAA,SAsGnBqB,UAtGmB,GAsGLC,WAAD,IAAiB;AAC1B,YAAMC,YAAY,GAAG,KAAK1B,KAAL,CAAWF,QAAX,CAAoBK,QAAzC;AAEA,YAAMwB,UAAU,GAAG;AACfV,QAAAA,IAAI,EAAE,KAAKd,QADI;AAEfW,QAAAA,EAAE,EAAEY,YAFW;AAGfrB,QAAAA,IAAI,EAAEoB,WAAW,CAACpB,IAHH;AAIfuB,QAAAA,OAAO,EAAEH,WAAW,CAACG;AAJN,OAAnB;AAOA,WAAKxB,QAAL,CAAc;AACVM,QAAAA,eAAe,EAAE,CAAC,GAAG,KAAKV,KAAL,CAAWU,eAAf,EAAgCiB,UAAhC;AADP,OAAd;;AAIA,UAAI,KAAKnB,OAAL,CAAaC,GAAb,CAAiBiB,YAAjB,CAAJ,EAAoC;AAChC,aAAKlB,OAAL,CAAaO,GAAb,CAAiBW,YAAjB,EAA+B,CAC3B,GAAG,KAAKlB,OAAL,CAAaG,GAAb,CAAiBe,YAAjB,CADwB,EAE3BC,UAF2B,CAA/B;AAIH,OALD,MAKO;AACH,aAAKnB,OAAL,CAAaO,GAAb,CAAiBW,YAAjB,EAA+B,CAACC,UAAD,CAA/B;AACH;;AAEDlC,MAAAA,MAAM,CAACa,IAAP,CAAY,MAAZ,EAAoBqB,UAApB;AACH,KA9HkB;;AAEf,SAAKnB,OAAL,GAAe,IAAIqB,GAAJ,EAAf;AACA,SAAK7B,KAAL,GAAa;AACTC,MAAAA,YAAY,EAAE,IAAI4B,GAAJ,EADL;AAET/B,MAAAA,QAAQ,EAAE;AACNK,QAAAA,QAAQ,EAAE,EADJ;AAENE,QAAAA,IAAI,EAAE;AAFA,OAFD;AAMTK,MAAAA,eAAe,EAAE;AANR,KAAb;AASA,SAAKP,QAAL,GAAgB,KAAKP,KAAL,CAAWO,QAA3B;AAEAV,IAAAA,MAAM,CAACqC,EAAP,CAAU,SAAV,EAAsBjB,OAAD,IAAa;AAC9BM,MAAAA,OAAO,CAACC,GAAR,CAAYP,OAAZ;;AACA,UAAGA,OAAO,CAACC,EAAR,KAAe,KAAKX,QAAvB,EAAiC,CAEhC;AACJ,KALD;AAMH;;AA4GD4B,EAAAA,MAAM,GAAG;AACL,QAAIC,OAAJ,EAAaC,OAAb;;AAEA,QAAI,KAAKjC,KAAL,CAAWF,QAAX,CAAoBK,QAApB,KAAiC,EAArC,EAAyC;AACrC6B,MAAAA,OAAO,gBACH,QAAC,OAAD;AAAS,QAAA,UAAU,EAAE,KAAKR,UAA1B;AAAsC,QAAA,SAAS,EAAC;AAAhD;AAAA;AAAA;AAAA;AAAA,cADJ;AAIAS,MAAAA,OAAO,gBACH,QAAC,OAAD;AACI,QAAA,QAAQ,EAAE,KAAK9B,QADnB;AAEI,QAAA,IAAI,EAAE,KAAKH,KAAL,CAAWF,QAAX,CAAoBK,QAF9B;AAGI,QAAA,QAAQ,EAAE,KAAKH,KAAL,CAAWU;AAHzB;AAAA;AAAA;AAAA;AAAA,cADJ;AAOH;;AAED,wBACI;AAAK,MAAA,SAAS,EAAC,gBAAf;AAAA,8BACI,QAAC,UAAD;AACI,QAAA,QAAQ,EAAE,KAAKP,QADnB;AAEI,QAAA,UAAU,EAAE,KAAKmB,UAFrB;AAGI,QAAA,YAAY,EAAE,KAAKJ;AAHvB;AAAA;AAAA;AAAA;AAAA,cADJ,eAMI;AAAK,QAAA,SAAS,EAAC,WAAf;AAAA,gCACI,QAAC,QAAD;AACI,UAAA,SAAS,EAAE,KAAKlB,KAAL,CAAWC,YAD1B;AAEI,UAAA,QAAQ,EAAE,KAAKJ,YAFnB;AAGI,UAAA,SAAS,EAAE,KAAKU;AAHpB;AAAA;AAAA;AAAA;AAAA,gBADJ,EAMK0B,OANL,EAOKD,OAPL;AAAA;AAAA;AAAA;AAAA;AAAA,cANJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ;AAkBH;;AApKwB;;AAuK7B,eAAetC,IAAf","sourcesContent":["import React, { Component } from \"react\"\nimport ChatHeader from \"./chat-header\"\nimport ChatList from \"./chat-list\"\nimport \"./chat.css\"\nimport Display from \"./display\"\nimport SendBar from \"./sendbar\"\nimport history from \"../../history\"\nimport socket from \"../../socket\"\n\nclass Chat extends Component {\n    constructor(props) {\n        super(props)\n        this.storage = new Map()\n        this.state = {\n            receiverlist: new Map(),\n            receiver: {\n                username: \"\",\n                type: \"\",\n            },\n            currentMessages: [],\n        }\n\n        this.username = this.props.username\n\n        socket.on(\"recieve\", (message) => {\n            console.log(message)\n            if(message.to === this.username) {\n                \n            }\n        })\n    }\n\n    handleDelete = (receiver) => {\n        const newReceiverList = this.state.receiverlist\n        newReceiverList.delete(receiver.username)\n        this.setState({\n            receiverlist: newReceiverList,\n        })\n\n        if (receiver.type === \"group\") {\n            socket.emit(\"leave\", receiver.username)\n        }\n    }\n\n    handleDisplay = (receiver) => {\n        this.setState({\n            receiver: receiver,\n        })\n\n        if (this.storage.has(receiver.username)) {\n            this.setState({\n                currentMessages: this.storage.get(receiver.username),\n            })\n        } else {\n            this.setState({\n                currentMessages: [],\n            })\n        }\n    }\n\n    handleGroupReceive = (message) => {\n        if (message.to === this.state.receiver.username) {\n            this.setState({\n                currentMessages: [...this.state.currentMessages, message],\n            })\n        }\n\n        if (this.storage.has(message.to)) {\n            this.storage.set(message.to, [\n                ...this.storage.get(message.to),\n                message,\n            ])\n        } else {\n            this.storage.set(message.to, [message])\n        }\n    }\n\n    handlePersonalReceive = (message) => {\n        if (message.from === this.state.receiver.username) {\n            this.setState({\n                currentMessages: [...this.state.currentMessages, message],\n            })\n        }\n\n        if (this.storage.has(message.from)) {\n            this.storage.set(message.from, [\n                ...this.storage.get(message.from),\n                message,\n            ])\n        } else {\n            this.storage.set(message.from, [message])\n        }\n    }\n\n    handleLogout = () => {\n        console.log(this.username)\n        socket.emit(\"leave\", this.username)\n        history.push(\"/\")\n    }\n\n    handleUser = (username, type) => {\n        if (this.state.receiverlist.has(username) === false) {\n            this.setState((prevstate) => ({\n                receiverlist: prevstate.receiverlist.set(username, type),\n            }))\n        }\n\n        if (type === \"group\") {\n            socket.emit(\"join\", username)\n        }\n    }\n\n    handleSend = (messageBody) => {\n        const receivername = this.state.receiver.username\n\n        const newMessage = {\n            from: this.username,\n            to: receivername,\n            type: messageBody.type,\n            content: messageBody.content,\n        }\n\n        this.setState({\n            currentMessages: [...this.state.currentMessages, newMessage],\n        })\n\n        if (this.storage.has(receivername)) {\n            this.storage.set(receivername, [\n                ...this.storage.get(receivername),\n                newMessage,\n            ])\n        } else {\n            this.storage.set(receivername, [newMessage])\n        }\n\n        socket.emit(\"send\", newMessage)\n    }\n\n    render() {\n        let sendbar, display\n\n        if (this.state.receiver.username !== \"\") {\n            sendbar = (\n                <SendBar handleSend={this.handleSend} className=\"sendbar\" />\n            )\n\n            display = (\n                <Display\n                    username={this.username}\n                    name={this.state.receiver.username}\n                    messages={this.state.currentMessages}\n                />\n            )\n        }\n\n        return (\n            <div className=\"chat-container\">\n                <ChatHeader\n                    username={this.username}\n                    handleUser={this.handleUser}\n                    handleLogout={this.handleLogout}\n                />\n                <div className=\"section-2\">\n                    <ChatList\n                        receivers={this.state.receiverlist}\n                        onDelete={this.handleDelete}\n                        onDisplay={this.handleDisplay}\n                    />\n                    {display}\n                    {sendbar}\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default Chat\n"]},"metadata":{},"sourceType":"module"}