{"ast":null,"code":"/**\n * Module dependencies.\n */\nvar transports = require('./transports/index');\n\nvar Emitter = require('component-emitter');\n\nvar debug = require('debug')('engine.io-client:socket');\n\nvar index = require('indexof');\n\nvar parser = require('engine.io-parser');\n\nvar parseuri = require('parseuri');\n\nvar parsejson = require('parsejson');\n\nvar parseqs = require('parseqs');\n/**\n * Module exports.\n */\n\n\nmodule.exports = Socket;\n/**\n * Socket constructor.\n *\n * @param {String|Object} uri or options\n * @param {Object} options\n * @api public\n */\n\nfunction Socket(uri, opts) {\n  if (!(this instanceof Socket)) return new Socket(uri, opts);\n  opts = opts || {};\n\n  if (uri && 'object' === typeof uri) {\n    opts = uri;\n    uri = null;\n  }\n\n  if (uri) {\n    uri = parseuri(uri);\n    opts.hostname = uri.host;\n    opts.secure = uri.protocol === 'https' || uri.protocol === 'wss';\n    opts.port = uri.port;\n    if (uri.query) opts.query = uri.query;\n  } else if (opts.host) {\n    opts.hostname = parseuri(opts.host).host;\n  }\n\n  this.secure = null != opts.secure ? opts.secure : global.location && 'https:' === location.protocol;\n\n  if (opts.hostname && !opts.port) {\n    // if no port is specified manually, use the protocol default\n    opts.port = this.secure ? '443' : '80';\n  }\n\n  this.agent = opts.agent || false;\n  this.hostname = opts.hostname || (global.location ? location.hostname : 'localhost');\n  this.port = opts.port || (global.location && location.port ? location.port : this.secure ? 443 : 80);\n  this.query = opts.query || {};\n  if ('string' === typeof this.query) this.query = parseqs.decode(this.query);\n  this.upgrade = false !== opts.upgrade;\n  this.path = (opts.path || '/engine.io').replace(/\\/$/, '') + '/';\n  this.forceJSONP = !!opts.forceJSONP;\n  this.jsonp = false !== opts.jsonp;\n  this.forceBase64 = !!opts.forceBase64;\n  this.enablesXDR = !!opts.enablesXDR;\n  this.timestampParam = opts.timestampParam || 't';\n  this.timestampRequests = opts.timestampRequests;\n  this.transports = opts.transports || ['polling', 'websocket'];\n  this.readyState = '';\n  this.writeBuffer = [];\n  this.prevBufferLen = 0;\n  this.policyPort = opts.policyPort || 843;\n  this.rememberUpgrade = opts.rememberUpgrade || false;\n  this.binaryType = null;\n  this.onlyBinaryUpgrades = opts.onlyBinaryUpgrades;\n  this.perMessageDeflate = false !== opts.perMessageDeflate ? opts.perMessageDeflate || {} : false;\n  if (true === this.perMessageDeflate) this.perMessageDeflate = {};\n\n  if (this.perMessageDeflate && null == this.perMessageDeflate.threshold) {\n    this.perMessageDeflate.threshold = 1024;\n  } // SSL options for Node.js client\n\n\n  this.pfx = opts.pfx || null;\n  this.key = opts.key || null;\n  this.passphrase = opts.passphrase || null;\n  this.cert = opts.cert || null;\n  this.ca = opts.ca || null;\n  this.ciphers = opts.ciphers || null;\n  this.rejectUnauthorized = opts.rejectUnauthorized === undefined ? null : opts.rejectUnauthorized;\n  this.forceNode = !!opts.forceNode; // other options for Node.js client\n\n  var freeGlobal = typeof global === 'object' && global;\n\n  if (freeGlobal.global === freeGlobal) {\n    if (opts.extraHeaders && Object.keys(opts.extraHeaders).length > 0) {\n      this.extraHeaders = opts.extraHeaders;\n    }\n\n    if (opts.localAddress) {\n      this.localAddress = opts.localAddress;\n    }\n  } // set on handshake\n\n\n  this.id = null;\n  this.upgrades = null;\n  this.pingInterval = null;\n  this.pingTimeout = null; // set on heartbeat\n\n  this.pingIntervalTimer = null;\n  this.pingTimeoutTimer = null;\n  this.open();\n}\n\nSocket.priorWebsocketSuccess = false;\n/**\n * Mix in `Emitter`.\n */\n\nEmitter(Socket.prototype);\n/**\n * Protocol version.\n *\n * @api public\n */\n\nSocket.protocol = parser.protocol; // this is an int\n\n/**\n * Expose deps for legacy compatibility\n * and standalone browser access.\n */\n\nSocket.Socket = Socket;\nSocket.Transport = require('./transport');\nSocket.transports = require('./transports/index');\nSocket.parser = require('engine.io-parser');\n/**\n * Creates transport of the given type.\n *\n * @param {String} transport name\n * @return {Transport}\n * @api private\n */\n\nSocket.prototype.createTransport = function (name) {\n  debug('creating transport \"%s\"', name);\n  var query = clone(this.query); // append engine.io protocol identifier\n\n  query.EIO = parser.protocol; // transport name\n\n  query.transport = name; // session id if we already have one\n\n  if (this.id) query.sid = this.id;\n  var transport = new transports[name]({\n    agent: this.agent,\n    hostname: this.hostname,\n    port: this.port,\n    secure: this.secure,\n    path: this.path,\n    query: query,\n    forceJSONP: this.forceJSONP,\n    jsonp: this.jsonp,\n    forceBase64: this.forceBase64,\n    enablesXDR: this.enablesXDR,\n    timestampRequests: this.timestampRequests,\n    timestampParam: this.timestampParam,\n    policyPort: this.policyPort,\n    socket: this,\n    pfx: this.pfx,\n    key: this.key,\n    passphrase: this.passphrase,\n    cert: this.cert,\n    ca: this.ca,\n    ciphers: this.ciphers,\n    rejectUnauthorized: this.rejectUnauthorized,\n    perMessageDeflate: this.perMessageDeflate,\n    extraHeaders: this.extraHeaders,\n    forceNode: this.forceNode,\n    localAddress: this.localAddress\n  });\n  return transport;\n};\n\nfunction clone(obj) {\n  var o = {};\n\n  for (var i in obj) {\n    if (obj.hasOwnProperty(i)) {\n      o[i] = obj[i];\n    }\n  }\n\n  return o;\n}\n/**\n * Initializes transport to use and starts probe.\n *\n * @api private\n */\n\n\nSocket.prototype.open = function () {\n  var transport;\n\n  if (this.rememberUpgrade && Socket.priorWebsocketSuccess && this.transports.indexOf('websocket') !== -1) {\n    transport = 'websocket';\n  } else if (0 === this.transports.length) {\n    // Emit error on next tick so it can be listened to\n    var self = this;\n    setTimeout(function () {\n      self.emit('error', 'No transports available');\n    }, 0);\n    return;\n  } else {\n    transport = this.transports[0];\n  }\n\n  this.readyState = 'opening'; // Retry with the next transport if the transport is disabled (jsonp: false)\n\n  try {\n    transport = this.createTransport(transport);\n  } catch (e) {\n    this.transports.shift();\n    this.open();\n    return;\n  }\n\n  transport.open();\n  this.setTransport(transport);\n};\n/**\n * Sets the current transport. Disables the existing one (if any).\n *\n * @api private\n */\n\n\nSocket.prototype.setTransport = function (transport) {\n  debug('setting transport %s', transport.name);\n  var self = this;\n\n  if (this.transport) {\n    debug('clearing existing transport %s', this.transport.name);\n    this.transport.removeAllListeners();\n  } // set up transport\n\n\n  this.transport = transport; // set up transport listeners\n\n  transport.on('drain', function () {\n    self.onDrain();\n  }).on('packet', function (packet) {\n    self.onPacket(packet);\n  }).on('error', function (e) {\n    self.onError(e);\n  }).on('close', function () {\n    self.onClose('transport close');\n  });\n};\n/**\n * Probes a transport.\n *\n * @param {String} transport name\n * @api private\n */\n\n\nSocket.prototype.probe = function (name) {\n  debug('probing transport \"%s\"', name);\n  var transport = this.createTransport(name, {\n    probe: 1\n  });\n  var failed = false;\n  var self = this;\n  Socket.priorWebsocketSuccess = false;\n\n  function onTransportOpen() {\n    if (self.onlyBinaryUpgrades) {\n      var upgradeLosesBinary = !this.supportsBinary && self.transport.supportsBinary;\n      failed = failed || upgradeLosesBinary;\n    }\n\n    if (failed) return;\n    debug('probe transport \"%s\" opened', name);\n    transport.send([{\n      type: 'ping',\n      data: 'probe'\n    }]);\n    transport.once('packet', function (msg) {\n      if (failed) return;\n\n      if ('pong' === msg.type && 'probe' === msg.data) {\n        debug('probe transport \"%s\" pong', name);\n        self.upgrading = true;\n        self.emit('upgrading', transport);\n        if (!transport) return;\n        Socket.priorWebsocketSuccess = 'websocket' === transport.name;\n        debug('pausing current transport \"%s\"', self.transport.name);\n        self.transport.pause(function () {\n          if (failed) return;\n          if ('closed' === self.readyState) return;\n          debug('changing transport and sending upgrade packet');\n          cleanup();\n          self.setTransport(transport);\n          transport.send([{\n            type: 'upgrade'\n          }]);\n          self.emit('upgrade', transport);\n          transport = null;\n          self.upgrading = false;\n          self.flush();\n        });\n      } else {\n        debug('probe transport \"%s\" failed', name);\n        var err = new Error('probe error');\n        err.transport = transport.name;\n        self.emit('upgradeError', err);\n      }\n    });\n  }\n\n  function freezeTransport() {\n    if (failed) return; // Any callback called by transport should be ignored since now\n\n    failed = true;\n    cleanup();\n    transport.close();\n    transport = null;\n  } // Handle any error that happens while probing\n\n\n  function onerror(err) {\n    var error = new Error('probe error: ' + err);\n    error.transport = transport.name;\n    freezeTransport();\n    debug('probe transport \"%s\" failed because of error: %s', name, err);\n    self.emit('upgradeError', error);\n  }\n\n  function onTransportClose() {\n    onerror('transport closed');\n  } // When the socket is closed while we're probing\n\n\n  function onclose() {\n    onerror('socket closed');\n  } // When the socket is upgraded while we're probing\n\n\n  function onupgrade(to) {\n    if (transport && to.name !== transport.name) {\n      debug('\"%s\" works - aborting \"%s\"', to.name, transport.name);\n      freezeTransport();\n    }\n  } // Remove all listeners on the transport and on self\n\n\n  function cleanup() {\n    transport.removeListener('open', onTransportOpen);\n    transport.removeListener('error', onerror);\n    transport.removeListener('close', onTransportClose);\n    self.removeListener('close', onclose);\n    self.removeListener('upgrading', onupgrade);\n  }\n\n  transport.once('open', onTransportOpen);\n  transport.once('error', onerror);\n  transport.once('close', onTransportClose);\n  this.once('close', onclose);\n  this.once('upgrading', onupgrade);\n  transport.open();\n};\n/**\n * Called when connection is deemed open.\n *\n * @api public\n */\n\n\nSocket.prototype.onOpen = function () {\n  debug('socket open');\n  this.readyState = 'open';\n  Socket.priorWebsocketSuccess = 'websocket' === this.transport.name;\n  this.emit('open');\n  this.flush(); // we check for `readyState` in case an `open`\n  // listener already closed the socket\n\n  if ('open' === this.readyState && this.upgrade && this.transport.pause) {\n    debug('starting upgrade probes');\n\n    for (var i = 0, l = this.upgrades.length; i < l; i++) {\n      this.probe(this.upgrades[i]);\n    }\n  }\n};\n/**\n * Handles a packet.\n *\n * @api private\n */\n\n\nSocket.prototype.onPacket = function (packet) {\n  if ('opening' === this.readyState || 'open' === this.readyState || 'closing' === this.readyState) {\n    debug('socket receive: type \"%s\", data \"%s\"', packet.type, packet.data);\n    this.emit('packet', packet); // Socket is live - any packet counts\n\n    this.emit('heartbeat');\n\n    switch (packet.type) {\n      case 'open':\n        this.onHandshake(parsejson(packet.data));\n        break;\n\n      case 'pong':\n        this.setPing();\n        this.emit('pong');\n        break;\n\n      case 'error':\n        var err = new Error('server error');\n        err.code = packet.data;\n        this.onError(err);\n        break;\n\n      case 'message':\n        this.emit('data', packet.data);\n        this.emit('message', packet.data);\n        break;\n    }\n  } else {\n    debug('packet received with socket readyState \"%s\"', this.readyState);\n  }\n};\n/**\n * Called upon handshake completion.\n *\n * @param {Object} handshake obj\n * @api private\n */\n\n\nSocket.prototype.onHandshake = function (data) {\n  this.emit('handshake', data);\n  this.id = data.sid;\n  this.transport.query.sid = data.sid;\n  this.upgrades = this.filterUpgrades(data.upgrades);\n  this.pingInterval = data.pingInterval;\n  this.pingTimeout = data.pingTimeout;\n  this.onOpen(); // In case open handler closes socket\n\n  if ('closed' === this.readyState) return;\n  this.setPing(); // Prolong liveness of socket on heartbeat\n\n  this.removeListener('heartbeat', this.onHeartbeat);\n  this.on('heartbeat', this.onHeartbeat);\n};\n/**\n * Resets ping timeout.\n *\n * @api private\n */\n\n\nSocket.prototype.onHeartbeat = function (timeout) {\n  clearTimeout(this.pingTimeoutTimer);\n  var self = this;\n  self.pingTimeoutTimer = setTimeout(function () {\n    if ('closed' === self.readyState) return;\n    self.onClose('ping timeout');\n  }, timeout || self.pingInterval + self.pingTimeout);\n};\n/**\n * Pings server every `this.pingInterval` and expects response\n * within `this.pingTimeout` or closes connection.\n *\n * @api private\n */\n\n\nSocket.prototype.setPing = function () {\n  var self = this;\n  clearTimeout(self.pingIntervalTimer);\n  self.pingIntervalTimer = setTimeout(function () {\n    debug('writing ping packet - expecting pong within %sms', self.pingTimeout);\n    self.ping();\n    self.onHeartbeat(self.pingTimeout);\n  }, self.pingInterval);\n};\n/**\n* Sends a ping packet.\n*\n* @api private\n*/\n\n\nSocket.prototype.ping = function () {\n  var self = this;\n  this.sendPacket('ping', function () {\n    self.emit('ping');\n  });\n};\n/**\n * Called on `drain` event\n *\n * @api private\n */\n\n\nSocket.prototype.onDrain = function () {\n  this.writeBuffer.splice(0, this.prevBufferLen); // setting prevBufferLen = 0 is very important\n  // for example, when upgrading, upgrade packet is sent over,\n  // and a nonzero prevBufferLen could cause problems on `drain`\n\n  this.prevBufferLen = 0;\n\n  if (0 === this.writeBuffer.length) {\n    this.emit('drain');\n  } else {\n    this.flush();\n  }\n};\n/**\n * Flush write buffers.\n *\n * @api private\n */\n\n\nSocket.prototype.flush = function () {\n  if ('closed' !== this.readyState && this.transport.writable && !this.upgrading && this.writeBuffer.length) {\n    debug('flushing %d packets in socket', this.writeBuffer.length);\n    this.transport.send(this.writeBuffer); // keep track of current length of writeBuffer\n    // splice writeBuffer and callbackBuffer on `drain`\n\n    this.prevBufferLen = this.writeBuffer.length;\n    this.emit('flush');\n  }\n};\n/**\n * Sends a message.\n *\n * @param {String} message.\n * @param {Function} callback function.\n * @param {Object} options.\n * @return {Socket} for chaining.\n * @api public\n */\n\n\nSocket.prototype.write = Socket.prototype.send = function (msg, options, fn) {\n  this.sendPacket('message', msg, options, fn);\n  return this;\n};\n/**\n * Sends a packet.\n *\n * @param {String} packet type.\n * @param {String} data.\n * @param {Object} options.\n * @param {Function} callback function.\n * @api private\n */\n\n\nSocket.prototype.sendPacket = function (type, data, options, fn) {\n  if ('function' === typeof data) {\n    fn = data;\n    data = undefined;\n  }\n\n  if ('function' === typeof options) {\n    fn = options;\n    options = null;\n  }\n\n  if ('closing' === this.readyState || 'closed' === this.readyState) {\n    return;\n  }\n\n  options = options || {};\n  options.compress = false !== options.compress;\n  var packet = {\n    type: type,\n    data: data,\n    options: options\n  };\n  this.emit('packetCreate', packet);\n  this.writeBuffer.push(packet);\n  if (fn) this.once('flush', fn);\n  this.flush();\n};\n/**\n * Closes the connection.\n *\n * @api private\n */\n\n\nSocket.prototype.close = function () {\n  if ('opening' === this.readyState || 'open' === this.readyState) {\n    this.readyState = 'closing';\n    var self = this;\n\n    if (this.writeBuffer.length) {\n      this.once('drain', function () {\n        if (this.upgrading) {\n          waitForUpgrade();\n        } else {\n          close();\n        }\n      });\n    } else if (this.upgrading) {\n      waitForUpgrade();\n    } else {\n      close();\n    }\n  }\n\n  function close() {\n    self.onClose('forced close');\n    debug('socket closing - telling transport to close');\n    self.transport.close();\n  }\n\n  function cleanupAndClose() {\n    self.removeListener('upgrade', cleanupAndClose);\n    self.removeListener('upgradeError', cleanupAndClose);\n    close();\n  }\n\n  function waitForUpgrade() {\n    // wait for upgrade to finish since we can't send packets while pausing a transport\n    self.once('upgrade', cleanupAndClose);\n    self.once('upgradeError', cleanupAndClose);\n  }\n\n  return this;\n};\n/**\n * Called upon transport error\n *\n * @api private\n */\n\n\nSocket.prototype.onError = function (err) {\n  debug('socket error %j', err);\n  Socket.priorWebsocketSuccess = false;\n  this.emit('error', err);\n  this.onClose('transport error', err);\n};\n/**\n * Called upon transport close.\n *\n * @api private\n */\n\n\nSocket.prototype.onClose = function (reason, desc) {\n  if ('opening' === this.readyState || 'open' === this.readyState || 'closing' === this.readyState) {\n    debug('socket close with reason: \"%s\"', reason);\n    var self = this; // clear timers\n\n    clearTimeout(this.pingIntervalTimer);\n    clearTimeout(this.pingTimeoutTimer); // stop event from firing again for transport\n\n    this.transport.removeAllListeners('close'); // ensure transport won't stay open\n\n    this.transport.close(); // ignore further transport communication\n\n    this.transport.removeAllListeners(); // set ready state\n\n    this.readyState = 'closed'; // clear session id\n\n    this.id = null; // emit close event\n\n    this.emit('close', reason, desc); // clean buffers after, so users can still\n    // grab the buffers on `close` event\n\n    self.writeBuffer = [];\n    self.prevBufferLen = 0;\n  }\n};\n/**\n * Filters upgrades, returning only those matching client transports.\n *\n * @param {Array} server upgrades\n * @api private\n *\n */\n\n\nSocket.prototype.filterUpgrades = function (upgrades) {\n  var filteredUpgrades = [];\n\n  for (var i = 0, j = upgrades.length; i < j; i++) {\n    if (~index(this.transports, upgrades[i])) filteredUpgrades.push(upgrades[i]);\n  }\n\n  return filteredUpgrades;\n};","map":{"version":3,"sources":["/home/subho/Programming/Internet-Technology/Athena/node_modules/engine.io-client/lib/socket.js"],"names":["transports","require","Emitter","debug","index","parser","parseuri","parsejson","parseqs","module","exports","Socket","uri","opts","hostname","host","secure","protocol","port","query","global","location","agent","decode","upgrade","path","replace","forceJSONP","jsonp","forceBase64","enablesXDR","timestampParam","timestampRequests","readyState","writeBuffer","prevBufferLen","policyPort","rememberUpgrade","binaryType","onlyBinaryUpgrades","perMessageDeflate","threshold","pfx","key","passphrase","cert","ca","ciphers","rejectUnauthorized","undefined","forceNode","freeGlobal","extraHeaders","Object","keys","length","localAddress","id","upgrades","pingInterval","pingTimeout","pingIntervalTimer","pingTimeoutTimer","open","priorWebsocketSuccess","prototype","Transport","createTransport","name","clone","EIO","transport","sid","socket","obj","o","i","hasOwnProperty","indexOf","self","setTimeout","emit","e","shift","setTransport","removeAllListeners","on","onDrain","packet","onPacket","onError","onClose","probe","failed","onTransportOpen","upgradeLosesBinary","supportsBinary","send","type","data","once","msg","upgrading","pause","cleanup","flush","err","Error","freezeTransport","close","onerror","error","onTransportClose","onclose","onupgrade","to","removeListener","onOpen","l","onHandshake","setPing","code","filterUpgrades","onHeartbeat","timeout","clearTimeout","ping","sendPacket","splice","writable","write","options","fn","compress","push","waitForUpgrade","cleanupAndClose","reason","desc","filteredUpgrades","j"],"mappings":"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","sourcesContent":["/**\n * Module dependencies.\n */\n\nvar transports = require('./transports/index');\nvar Emitter = require('component-emitter');\nvar debug = require('debug')('engine.io-client:socket');\nvar index = require('indexof');\nvar parser = require('engine.io-parser');\nvar parseuri = require('parseuri');\nvar parsejson = require('parsejson');\nvar parseqs = require('parseqs');\n\n/**\n * Module exports.\n */\n\nmodule.exports = Socket;\n\n/**\n * Socket constructor.\n *\n * @param {String|Object} uri or options\n * @param {Object} options\n * @api public\n */\n\nfunction Socket (uri, opts) {\n  if (!(this instanceof Socket)) return new Socket(uri, opts);\n\n  opts = opts || {};\n\n  if (uri && 'object' === typeof uri) {\n    opts = uri;\n    uri = null;\n  }\n\n  if (uri) {\n    uri = parseuri(uri);\n    opts.hostname = uri.host;\n    opts.secure = uri.protocol === 'https' || uri.protocol === 'wss';\n    opts.port = uri.port;\n    if (uri.query) opts.query = uri.query;\n  } else if (opts.host) {\n    opts.hostname = parseuri(opts.host).host;\n  }\n\n  this.secure = null != opts.secure ? opts.secure\n    : (global.location && 'https:' === location.protocol);\n\n  if (opts.hostname && !opts.port) {\n    // if no port is specified manually, use the protocol default\n    opts.port = this.secure ? '443' : '80';\n  }\n\n  this.agent = opts.agent || false;\n  this.hostname = opts.hostname ||\n    (global.location ? location.hostname : 'localhost');\n  this.port = opts.port || (global.location && location.port\n      ? location.port\n      : (this.secure ? 443 : 80));\n  this.query = opts.query || {};\n  if ('string' === typeof this.query) this.query = parseqs.decode(this.query);\n  this.upgrade = false !== opts.upgrade;\n  this.path = (opts.path || '/engine.io').replace(/\\/$/, '') + '/';\n  this.forceJSONP = !!opts.forceJSONP;\n  this.jsonp = false !== opts.jsonp;\n  this.forceBase64 = !!opts.forceBase64;\n  this.enablesXDR = !!opts.enablesXDR;\n  this.timestampParam = opts.timestampParam || 't';\n  this.timestampRequests = opts.timestampRequests;\n  this.transports = opts.transports || ['polling', 'websocket'];\n  this.readyState = '';\n  this.writeBuffer = [];\n  this.prevBufferLen = 0;\n  this.policyPort = opts.policyPort || 843;\n  this.rememberUpgrade = opts.rememberUpgrade || false;\n  this.binaryType = null;\n  this.onlyBinaryUpgrades = opts.onlyBinaryUpgrades;\n  this.perMessageDeflate = false !== opts.perMessageDeflate ? (opts.perMessageDeflate || {}) : false;\n\n  if (true === this.perMessageDeflate) this.perMessageDeflate = {};\n  if (this.perMessageDeflate && null == this.perMessageDeflate.threshold) {\n    this.perMessageDeflate.threshold = 1024;\n  }\n\n  // SSL options for Node.js client\n  this.pfx = opts.pfx || null;\n  this.key = opts.key || null;\n  this.passphrase = opts.passphrase || null;\n  this.cert = opts.cert || null;\n  this.ca = opts.ca || null;\n  this.ciphers = opts.ciphers || null;\n  this.rejectUnauthorized = opts.rejectUnauthorized === undefined ? null : opts.rejectUnauthorized;\n  this.forceNode = !!opts.forceNode;\n\n  // other options for Node.js client\n  var freeGlobal = typeof global === 'object' && global;\n  if (freeGlobal.global === freeGlobal) {\n    if (opts.extraHeaders && Object.keys(opts.extraHeaders).length > 0) {\n      this.extraHeaders = opts.extraHeaders;\n    }\n\n    if (opts.localAddress) {\n      this.localAddress = opts.localAddress;\n    }\n  }\n\n  // set on handshake\n  this.id = null;\n  this.upgrades = null;\n  this.pingInterval = null;\n  this.pingTimeout = null;\n\n  // set on heartbeat\n  this.pingIntervalTimer = null;\n  this.pingTimeoutTimer = null;\n\n  this.open();\n}\n\nSocket.priorWebsocketSuccess = false;\n\n/**\n * Mix in `Emitter`.\n */\n\nEmitter(Socket.prototype);\n\n/**\n * Protocol version.\n *\n * @api public\n */\n\nSocket.protocol = parser.protocol; // this is an int\n\n/**\n * Expose deps for legacy compatibility\n * and standalone browser access.\n */\n\nSocket.Socket = Socket;\nSocket.Transport = require('./transport');\nSocket.transports = require('./transports/index');\nSocket.parser = require('engine.io-parser');\n\n/**\n * Creates transport of the given type.\n *\n * @param {String} transport name\n * @return {Transport}\n * @api private\n */\n\nSocket.prototype.createTransport = function (name) {\n  debug('creating transport \"%s\"', name);\n  var query = clone(this.query);\n\n  // append engine.io protocol identifier\n  query.EIO = parser.protocol;\n\n  // transport name\n  query.transport = name;\n\n  // session id if we already have one\n  if (this.id) query.sid = this.id;\n\n  var transport = new transports[name]({\n    agent: this.agent,\n    hostname: this.hostname,\n    port: this.port,\n    secure: this.secure,\n    path: this.path,\n    query: query,\n    forceJSONP: this.forceJSONP,\n    jsonp: this.jsonp,\n    forceBase64: this.forceBase64,\n    enablesXDR: this.enablesXDR,\n    timestampRequests: this.timestampRequests,\n    timestampParam: this.timestampParam,\n    policyPort: this.policyPort,\n    socket: this,\n    pfx: this.pfx,\n    key: this.key,\n    passphrase: this.passphrase,\n    cert: this.cert,\n    ca: this.ca,\n    ciphers: this.ciphers,\n    rejectUnauthorized: this.rejectUnauthorized,\n    perMessageDeflate: this.perMessageDeflate,\n    extraHeaders: this.extraHeaders,\n    forceNode: this.forceNode,\n    localAddress: this.localAddress\n  });\n\n  return transport;\n};\n\nfunction clone (obj) {\n  var o = {};\n  for (var i in obj) {\n    if (obj.hasOwnProperty(i)) {\n      o[i] = obj[i];\n    }\n  }\n  return o;\n}\n\n/**\n * Initializes transport to use and starts probe.\n *\n * @api private\n */\nSocket.prototype.open = function () {\n  var transport;\n  if (this.rememberUpgrade && Socket.priorWebsocketSuccess && this.transports.indexOf('websocket') !== -1) {\n    transport = 'websocket';\n  } else if (0 === this.transports.length) {\n    // Emit error on next tick so it can be listened to\n    var self = this;\n    setTimeout(function () {\n      self.emit('error', 'No transports available');\n    }, 0);\n    return;\n  } else {\n    transport = this.transports[0];\n  }\n  this.readyState = 'opening';\n\n  // Retry with the next transport if the transport is disabled (jsonp: false)\n  try {\n    transport = this.createTransport(transport);\n  } catch (e) {\n    this.transports.shift();\n    this.open();\n    return;\n  }\n\n  transport.open();\n  this.setTransport(transport);\n};\n\n/**\n * Sets the current transport. Disables the existing one (if any).\n *\n * @api private\n */\n\nSocket.prototype.setTransport = function (transport) {\n  debug('setting transport %s', transport.name);\n  var self = this;\n\n  if (this.transport) {\n    debug('clearing existing transport %s', this.transport.name);\n    this.transport.removeAllListeners();\n  }\n\n  // set up transport\n  this.transport = transport;\n\n  // set up transport listeners\n  transport\n  .on('drain', function () {\n    self.onDrain();\n  })\n  .on('packet', function (packet) {\n    self.onPacket(packet);\n  })\n  .on('error', function (e) {\n    self.onError(e);\n  })\n  .on('close', function () {\n    self.onClose('transport close');\n  });\n};\n\n/**\n * Probes a transport.\n *\n * @param {String} transport name\n * @api private\n */\n\nSocket.prototype.probe = function (name) {\n  debug('probing transport \"%s\"', name);\n  var transport = this.createTransport(name, { probe: 1 });\n  var failed = false;\n  var self = this;\n\n  Socket.priorWebsocketSuccess = false;\n\n  function onTransportOpen () {\n    if (self.onlyBinaryUpgrades) {\n      var upgradeLosesBinary = !this.supportsBinary && self.transport.supportsBinary;\n      failed = failed || upgradeLosesBinary;\n    }\n    if (failed) return;\n\n    debug('probe transport \"%s\" opened', name);\n    transport.send([{ type: 'ping', data: 'probe' }]);\n    transport.once('packet', function (msg) {\n      if (failed) return;\n      if ('pong' === msg.type && 'probe' === msg.data) {\n        debug('probe transport \"%s\" pong', name);\n        self.upgrading = true;\n        self.emit('upgrading', transport);\n        if (!transport) return;\n        Socket.priorWebsocketSuccess = 'websocket' === transport.name;\n\n        debug('pausing current transport \"%s\"', self.transport.name);\n        self.transport.pause(function () {\n          if (failed) return;\n          if ('closed' === self.readyState) return;\n          debug('changing transport and sending upgrade packet');\n\n          cleanup();\n\n          self.setTransport(transport);\n          transport.send([{ type: 'upgrade' }]);\n          self.emit('upgrade', transport);\n          transport = null;\n          self.upgrading = false;\n          self.flush();\n        });\n      } else {\n        debug('probe transport \"%s\" failed', name);\n        var err = new Error('probe error');\n        err.transport = transport.name;\n        self.emit('upgradeError', err);\n      }\n    });\n  }\n\n  function freezeTransport () {\n    if (failed) return;\n\n    // Any callback called by transport should be ignored since now\n    failed = true;\n\n    cleanup();\n\n    transport.close();\n    transport = null;\n  }\n\n  // Handle any error that happens while probing\n  function onerror (err) {\n    var error = new Error('probe error: ' + err);\n    error.transport = transport.name;\n\n    freezeTransport();\n\n    debug('probe transport \"%s\" failed because of error: %s', name, err);\n\n    self.emit('upgradeError', error);\n  }\n\n  function onTransportClose () {\n    onerror('transport closed');\n  }\n\n  // When the socket is closed while we're probing\n  function onclose () {\n    onerror('socket closed');\n  }\n\n  // When the socket is upgraded while we're probing\n  function onupgrade (to) {\n    if (transport && to.name !== transport.name) {\n      debug('\"%s\" works - aborting \"%s\"', to.name, transport.name);\n      freezeTransport();\n    }\n  }\n\n  // Remove all listeners on the transport and on self\n  function cleanup () {\n    transport.removeListener('open', onTransportOpen);\n    transport.removeListener('error', onerror);\n    transport.removeListener('close', onTransportClose);\n    self.removeListener('close', onclose);\n    self.removeListener('upgrading', onupgrade);\n  }\n\n  transport.once('open', onTransportOpen);\n  transport.once('error', onerror);\n  transport.once('close', onTransportClose);\n\n  this.once('close', onclose);\n  this.once('upgrading', onupgrade);\n\n  transport.open();\n};\n\n/**\n * Called when connection is deemed open.\n *\n * @api public\n */\n\nSocket.prototype.onOpen = function () {\n  debug('socket open');\n  this.readyState = 'open';\n  Socket.priorWebsocketSuccess = 'websocket' === this.transport.name;\n  this.emit('open');\n  this.flush();\n\n  // we check for `readyState` in case an `open`\n  // listener already closed the socket\n  if ('open' === this.readyState && this.upgrade && this.transport.pause) {\n    debug('starting upgrade probes');\n    for (var i = 0, l = this.upgrades.length; i < l; i++) {\n      this.probe(this.upgrades[i]);\n    }\n  }\n};\n\n/**\n * Handles a packet.\n *\n * @api private\n */\n\nSocket.prototype.onPacket = function (packet) {\n  if ('opening' === this.readyState || 'open' === this.readyState ||\n      'closing' === this.readyState) {\n    debug('socket receive: type \"%s\", data \"%s\"', packet.type, packet.data);\n\n    this.emit('packet', packet);\n\n    // Socket is live - any packet counts\n    this.emit('heartbeat');\n\n    switch (packet.type) {\n      case 'open':\n        this.onHandshake(parsejson(packet.data));\n        break;\n\n      case 'pong':\n        this.setPing();\n        this.emit('pong');\n        break;\n\n      case 'error':\n        var err = new Error('server error');\n        err.code = packet.data;\n        this.onError(err);\n        break;\n\n      case 'message':\n        this.emit('data', packet.data);\n        this.emit('message', packet.data);\n        break;\n    }\n  } else {\n    debug('packet received with socket readyState \"%s\"', this.readyState);\n  }\n};\n\n/**\n * Called upon handshake completion.\n *\n * @param {Object} handshake obj\n * @api private\n */\n\nSocket.prototype.onHandshake = function (data) {\n  this.emit('handshake', data);\n  this.id = data.sid;\n  this.transport.query.sid = data.sid;\n  this.upgrades = this.filterUpgrades(data.upgrades);\n  this.pingInterval = data.pingInterval;\n  this.pingTimeout = data.pingTimeout;\n  this.onOpen();\n  // In case open handler closes socket\n  if ('closed' === this.readyState) return;\n  this.setPing();\n\n  // Prolong liveness of socket on heartbeat\n  this.removeListener('heartbeat', this.onHeartbeat);\n  this.on('heartbeat', this.onHeartbeat);\n};\n\n/**\n * Resets ping timeout.\n *\n * @api private\n */\n\nSocket.prototype.onHeartbeat = function (timeout) {\n  clearTimeout(this.pingTimeoutTimer);\n  var self = this;\n  self.pingTimeoutTimer = setTimeout(function () {\n    if ('closed' === self.readyState) return;\n    self.onClose('ping timeout');\n  }, timeout || (self.pingInterval + self.pingTimeout));\n};\n\n/**\n * Pings server every `this.pingInterval` and expects response\n * within `this.pingTimeout` or closes connection.\n *\n * @api private\n */\n\nSocket.prototype.setPing = function () {\n  var self = this;\n  clearTimeout(self.pingIntervalTimer);\n  self.pingIntervalTimer = setTimeout(function () {\n    debug('writing ping packet - expecting pong within %sms', self.pingTimeout);\n    self.ping();\n    self.onHeartbeat(self.pingTimeout);\n  }, self.pingInterval);\n};\n\n/**\n* Sends a ping packet.\n*\n* @api private\n*/\n\nSocket.prototype.ping = function () {\n  var self = this;\n  this.sendPacket('ping', function () {\n    self.emit('ping');\n  });\n};\n\n/**\n * Called on `drain` event\n *\n * @api private\n */\n\nSocket.prototype.onDrain = function () {\n  this.writeBuffer.splice(0, this.prevBufferLen);\n\n  // setting prevBufferLen = 0 is very important\n  // for example, when upgrading, upgrade packet is sent over,\n  // and a nonzero prevBufferLen could cause problems on `drain`\n  this.prevBufferLen = 0;\n\n  if (0 === this.writeBuffer.length) {\n    this.emit('drain');\n  } else {\n    this.flush();\n  }\n};\n\n/**\n * Flush write buffers.\n *\n * @api private\n */\n\nSocket.prototype.flush = function () {\n  if ('closed' !== this.readyState && this.transport.writable &&\n    !this.upgrading && this.writeBuffer.length) {\n    debug('flushing %d packets in socket', this.writeBuffer.length);\n    this.transport.send(this.writeBuffer);\n    // keep track of current length of writeBuffer\n    // splice writeBuffer and callbackBuffer on `drain`\n    this.prevBufferLen = this.writeBuffer.length;\n    this.emit('flush');\n  }\n};\n\n/**\n * Sends a message.\n *\n * @param {String} message.\n * @param {Function} callback function.\n * @param {Object} options.\n * @return {Socket} for chaining.\n * @api public\n */\n\nSocket.prototype.write =\nSocket.prototype.send = function (msg, options, fn) {\n  this.sendPacket('message', msg, options, fn);\n  return this;\n};\n\n/**\n * Sends a packet.\n *\n * @param {String} packet type.\n * @param {String} data.\n * @param {Object} options.\n * @param {Function} callback function.\n * @api private\n */\n\nSocket.prototype.sendPacket = function (type, data, options, fn) {\n  if ('function' === typeof data) {\n    fn = data;\n    data = undefined;\n  }\n\n  if ('function' === typeof options) {\n    fn = options;\n    options = null;\n  }\n\n  if ('closing' === this.readyState || 'closed' === this.readyState) {\n    return;\n  }\n\n  options = options || {};\n  options.compress = false !== options.compress;\n\n  var packet = {\n    type: type,\n    data: data,\n    options: options\n  };\n  this.emit('packetCreate', packet);\n  this.writeBuffer.push(packet);\n  if (fn) this.once('flush', fn);\n  this.flush();\n};\n\n/**\n * Closes the connection.\n *\n * @api private\n */\n\nSocket.prototype.close = function () {\n  if ('opening' === this.readyState || 'open' === this.readyState) {\n    this.readyState = 'closing';\n\n    var self = this;\n\n    if (this.writeBuffer.length) {\n      this.once('drain', function () {\n        if (this.upgrading) {\n          waitForUpgrade();\n        } else {\n          close();\n        }\n      });\n    } else if (this.upgrading) {\n      waitForUpgrade();\n    } else {\n      close();\n    }\n  }\n\n  function close () {\n    self.onClose('forced close');\n    debug('socket closing - telling transport to close');\n    self.transport.close();\n  }\n\n  function cleanupAndClose () {\n    self.removeListener('upgrade', cleanupAndClose);\n    self.removeListener('upgradeError', cleanupAndClose);\n    close();\n  }\n\n  function waitForUpgrade () {\n    // wait for upgrade to finish since we can't send packets while pausing a transport\n    self.once('upgrade', cleanupAndClose);\n    self.once('upgradeError', cleanupAndClose);\n  }\n\n  return this;\n};\n\n/**\n * Called upon transport error\n *\n * @api private\n */\n\nSocket.prototype.onError = function (err) {\n  debug('socket error %j', err);\n  Socket.priorWebsocketSuccess = false;\n  this.emit('error', err);\n  this.onClose('transport error', err);\n};\n\n/**\n * Called upon transport close.\n *\n * @api private\n */\n\nSocket.prototype.onClose = function (reason, desc) {\n  if ('opening' === this.readyState || 'open' === this.readyState || 'closing' === this.readyState) {\n    debug('socket close with reason: \"%s\"', reason);\n    var self = this;\n\n    // clear timers\n    clearTimeout(this.pingIntervalTimer);\n    clearTimeout(this.pingTimeoutTimer);\n\n    // stop event from firing again for transport\n    this.transport.removeAllListeners('close');\n\n    // ensure transport won't stay open\n    this.transport.close();\n\n    // ignore further transport communication\n    this.transport.removeAllListeners();\n\n    // set ready state\n    this.readyState = 'closed';\n\n    // clear session id\n    this.id = null;\n\n    // emit close event\n    this.emit('close', reason, desc);\n\n    // clean buffers after, so users can still\n    // grab the buffers on `close` event\n    self.writeBuffer = [];\n    self.prevBufferLen = 0;\n  }\n};\n\n/**\n * Filters upgrades, returning only those matching client transports.\n *\n * @param {Array} server upgrades\n * @api private\n *\n */\n\nSocket.prototype.filterUpgrades = function (upgrades) {\n  var filteredUpgrades = [];\n  for (var i = 0, j = upgrades.length; i < j; i++) {\n    if (~index(this.transports, upgrades[i])) filteredUpgrades.push(upgrades[i]);\n  }\n  return filteredUpgrades;\n};\n"]},"metadata":{},"sourceType":"script"}