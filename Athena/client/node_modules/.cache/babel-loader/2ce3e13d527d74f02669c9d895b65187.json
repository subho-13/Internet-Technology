{"ast":null,"code":"/**\n * Module requirements.\n */\nvar XMLHttpRequest = require('xmlhttprequest-ssl');\n\nvar Polling = require('./polling');\n\nvar Emitter = require('component-emitter');\n\nvar inherit = require('component-inherit');\n\nvar debug = require('debug')('engine.io-client:polling-xhr');\n/**\n * Module exports.\n */\n\n\nmodule.exports = XHR;\nmodule.exports.Request = Request;\n/**\n * Empty function\n */\n\nfunction empty() {}\n/**\n * XHR Polling constructor.\n *\n * @param {Object} opts\n * @api public\n */\n\n\nfunction XHR(opts) {\n  Polling.call(this, opts);\n  this.requestTimeout = opts.requestTimeout;\n\n  if (global.location) {\n    var isSSL = 'https:' === location.protocol;\n    var port = location.port; // some user agents have empty `location.port`\n\n    if (!port) {\n      port = isSSL ? 443 : 80;\n    }\n\n    this.xd = opts.hostname !== global.location.hostname || port !== opts.port;\n    this.xs = opts.secure !== isSSL;\n  } else {\n    this.extraHeaders = opts.extraHeaders;\n  }\n}\n/**\n * Inherits from Polling.\n */\n\n\ninherit(XHR, Polling);\n/**\n * XHR supports binary\n */\n\nXHR.prototype.supportsBinary = true;\n/**\n * Creates a request.\n *\n * @param {String} method\n * @api private\n */\n\nXHR.prototype.request = function (opts) {\n  opts = opts || {};\n  opts.uri = this.uri();\n  opts.xd = this.xd;\n  opts.xs = this.xs;\n  opts.agent = this.agent || false;\n  opts.supportsBinary = this.supportsBinary;\n  opts.enablesXDR = this.enablesXDR; // SSL options for Node.js client\n\n  opts.pfx = this.pfx;\n  opts.key = this.key;\n  opts.passphrase = this.passphrase;\n  opts.cert = this.cert;\n  opts.ca = this.ca;\n  opts.ciphers = this.ciphers;\n  opts.rejectUnauthorized = this.rejectUnauthorized;\n  opts.requestTimeout = this.requestTimeout; // other options for Node.js client\n\n  opts.extraHeaders = this.extraHeaders;\n  return new Request(opts);\n};\n/**\n * Sends data.\n *\n * @param {String} data to send.\n * @param {Function} called upon flush.\n * @api private\n */\n\n\nXHR.prototype.doWrite = function (data, fn) {\n  var isBinary = typeof data !== 'string' && data !== undefined;\n  var req = this.request({\n    method: 'POST',\n    data: data,\n    isBinary: isBinary\n  });\n  var self = this;\n  req.on('success', fn);\n  req.on('error', function (err) {\n    self.onError('xhr post error', err);\n  });\n  this.sendXhr = req;\n};\n/**\n * Starts a poll cycle.\n *\n * @api private\n */\n\n\nXHR.prototype.doPoll = function () {\n  debug('xhr poll');\n  var req = this.request();\n  var self = this;\n  req.on('data', function (data) {\n    self.onData(data);\n  });\n  req.on('error', function (err) {\n    self.onError('xhr poll error', err);\n  });\n  this.pollXhr = req;\n};\n/**\n * Request constructor\n *\n * @param {Object} options\n * @api public\n */\n\n\nfunction Request(opts) {\n  this.method = opts.method || 'GET';\n  this.uri = opts.uri;\n  this.xd = !!opts.xd;\n  this.xs = !!opts.xs;\n  this.async = false !== opts.async;\n  this.data = undefined !== opts.data ? opts.data : null;\n  this.agent = opts.agent;\n  this.isBinary = opts.isBinary;\n  this.supportsBinary = opts.supportsBinary;\n  this.enablesXDR = opts.enablesXDR;\n  this.requestTimeout = opts.requestTimeout; // SSL options for Node.js client\n\n  this.pfx = opts.pfx;\n  this.key = opts.key;\n  this.passphrase = opts.passphrase;\n  this.cert = opts.cert;\n  this.ca = opts.ca;\n  this.ciphers = opts.ciphers;\n  this.rejectUnauthorized = opts.rejectUnauthorized; // other options for Node.js client\n\n  this.extraHeaders = opts.extraHeaders;\n  this.create();\n}\n/**\n * Mix in `Emitter`.\n */\n\n\nEmitter(Request.prototype);\n/**\n * Creates the XHR object and sends the request.\n *\n * @api private\n */\n\nRequest.prototype.create = function () {\n  var opts = {\n    agent: this.agent,\n    xdomain: this.xd,\n    xscheme: this.xs,\n    enablesXDR: this.enablesXDR\n  }; // SSL options for Node.js client\n\n  opts.pfx = this.pfx;\n  opts.key = this.key;\n  opts.passphrase = this.passphrase;\n  opts.cert = this.cert;\n  opts.ca = this.ca;\n  opts.ciphers = this.ciphers;\n  opts.rejectUnauthorized = this.rejectUnauthorized;\n  var xhr = this.xhr = new XMLHttpRequest(opts);\n  var self = this;\n\n  try {\n    debug('xhr open %s: %s', this.method, this.uri);\n    xhr.open(this.method, this.uri, this.async);\n\n    try {\n      if (this.extraHeaders) {\n        xhr.setDisableHeaderCheck(true);\n\n        for (var i in this.extraHeaders) {\n          if (this.extraHeaders.hasOwnProperty(i)) {\n            xhr.setRequestHeader(i, this.extraHeaders[i]);\n          }\n        }\n      }\n    } catch (e) {}\n\n    if (this.supportsBinary) {\n      // This has to be done after open because Firefox is stupid\n      // http://stackoverflow.com/questions/13216903/get-binary-data-with-xmlhttprequest-in-a-firefox-extension\n      xhr.responseType = 'arraybuffer';\n    }\n\n    if ('POST' === this.method) {\n      try {\n        if (this.isBinary) {\n          xhr.setRequestHeader('Content-type', 'application/octet-stream');\n        } else {\n          xhr.setRequestHeader('Content-type', 'text/plain;charset=UTF-8');\n        }\n      } catch (e) {}\n    }\n\n    try {\n      xhr.setRequestHeader('Accept', '*/*');\n    } catch (e) {} // ie6 check\n\n\n    if ('withCredentials' in xhr) {\n      xhr.withCredentials = true;\n    }\n\n    if (this.requestTimeout) {\n      xhr.timeout = this.requestTimeout;\n    }\n\n    if (this.hasXDR()) {\n      xhr.onload = function () {\n        self.onLoad();\n      };\n\n      xhr.onerror = function () {\n        self.onError(xhr.responseText);\n      };\n    } else {\n      xhr.onreadystatechange = function () {\n        if (4 !== xhr.readyState) return;\n\n        if (200 === xhr.status || 1223 === xhr.status) {\n          self.onLoad();\n        } else {\n          // make sure the `error` event handler that's user-set\n          // does not throw in the same tick and gets caught here\n          setTimeout(function () {\n            self.onError(xhr.status);\n          }, 0);\n        }\n      };\n    }\n\n    debug('xhr data %s', this.data);\n    xhr.send(this.data);\n  } catch (e) {\n    // Need to defer since .create() is called directly fhrom the constructor\n    // and thus the 'error' event can only be only bound *after* this exception\n    // occurs.  Therefore, also, we cannot throw here at all.\n    setTimeout(function () {\n      self.onError(e);\n    }, 0);\n    return;\n  }\n\n  if (global.document) {\n    this.index = Request.requestsCount++;\n    Request.requests[this.index] = this;\n  }\n};\n/**\n * Called upon successful response.\n *\n * @api private\n */\n\n\nRequest.prototype.onSuccess = function () {\n  this.emit('success');\n  this.cleanup();\n};\n/**\n * Called if we have data.\n *\n * @api private\n */\n\n\nRequest.prototype.onData = function (data) {\n  this.emit('data', data);\n  this.onSuccess();\n};\n/**\n * Called upon error.\n *\n * @api private\n */\n\n\nRequest.prototype.onError = function (err) {\n  this.emit('error', err);\n  this.cleanup(true);\n};\n/**\n * Cleans up house.\n *\n * @api private\n */\n\n\nRequest.prototype.cleanup = function (fromError) {\n  if ('undefined' === typeof this.xhr || null === this.xhr) {\n    return;\n  } // xmlhttprequest\n\n\n  if (this.hasXDR()) {\n    this.xhr.onload = this.xhr.onerror = empty;\n  } else {\n    this.xhr.onreadystatechange = empty;\n  }\n\n  if (fromError) {\n    try {\n      this.xhr.abort();\n    } catch (e) {}\n  }\n\n  if (global.document) {\n    delete Request.requests[this.index];\n  }\n\n  this.xhr = null;\n};\n/**\n * Called upon load.\n *\n * @api private\n */\n\n\nRequest.prototype.onLoad = function () {\n  var data;\n\n  try {\n    var contentType;\n\n    try {\n      contentType = this.xhr.getResponseHeader('Content-Type').split(';')[0];\n    } catch (e) {}\n\n    if (contentType === 'application/octet-stream') {\n      data = this.xhr.response || this.xhr.responseText;\n    } else {\n      if (!this.supportsBinary) {\n        data = this.xhr.responseText;\n      } else {\n        try {\n          data = String.fromCharCode.apply(null, new Uint8Array(this.xhr.response));\n        } catch (e) {\n          var ui8Arr = new Uint8Array(this.xhr.response);\n          var dataArray = [];\n\n          for (var idx = 0, length = ui8Arr.length; idx < length; idx++) {\n            dataArray.push(ui8Arr[idx]);\n          }\n\n          data = String.fromCharCode.apply(null, dataArray);\n        }\n      }\n    }\n  } catch (e) {\n    this.onError(e);\n  }\n\n  if (null != data) {\n    this.onData(data);\n  }\n};\n/**\n * Check if it has XDomainRequest.\n *\n * @api private\n */\n\n\nRequest.prototype.hasXDR = function () {\n  return 'undefined' !== typeof global.XDomainRequest && !this.xs && this.enablesXDR;\n};\n/**\n * Aborts the request.\n *\n * @api public\n */\n\n\nRequest.prototype.abort = function () {\n  this.cleanup();\n};\n/**\n * Aborts pending requests when unloading the window. This is needed to prevent\n * memory leaks (e.g. when using IE) and to ensure that no spurious error is\n * emitted.\n */\n\n\nRequest.requestsCount = 0;\nRequest.requests = {};\n\nif (global.document) {\n  if (global.attachEvent) {\n    global.attachEvent('onunload', unloadHandler);\n  } else if (global.addEventListener) {\n    global.addEventListener('beforeunload', unloadHandler, false);\n  }\n}\n\nfunction unloadHandler() {\n  for (var i in Request.requests) {\n    if (Request.requests.hasOwnProperty(i)) {\n      Request.requests[i].abort();\n    }\n  }\n}","map":{"version":3,"sources":["/home/subho/Programming/Internet-Technology/Athena/node_modules/engine.io-client/lib/transports/polling-xhr.js"],"names":["XMLHttpRequest","require","Polling","Emitter","inherit","debug","module","exports","XHR","Request","empty","opts","call","requestTimeout","global","location","isSSL","protocol","port","xd","hostname","xs","secure","extraHeaders","prototype","supportsBinary","request","uri","agent","enablesXDR","pfx","key","passphrase","cert","ca","ciphers","rejectUnauthorized","doWrite","data","fn","isBinary","undefined","req","method","self","on","err","onError","sendXhr","doPoll","onData","pollXhr","async","create","xdomain","xscheme","xhr","open","setDisableHeaderCheck","i","hasOwnProperty","setRequestHeader","e","responseType","withCredentials","timeout","hasXDR","onload","onLoad","onerror","responseText","onreadystatechange","readyState","status","setTimeout","send","document","index","requestsCount","requests","onSuccess","emit","cleanup","fromError","abort","contentType","getResponseHeader","split","response","String","fromCharCode","apply","Uint8Array","ui8Arr","dataArray","idx","length","push","XDomainRequest","attachEvent","unloadHandler","addEventListener"],"mappings":"AAAA;AACA;AACA;AAEA,IAAIA,cAAc,GAAGC,OAAO,CAAC,oBAAD,CAA5B;;AACA,IAAIC,OAAO,GAAGD,OAAO,CAAC,WAAD,CAArB;;AACA,IAAIE,OAAO,GAAGF,OAAO,CAAC,mBAAD,CAArB;;AACA,IAAIG,OAAO,GAAGH,OAAO,CAAC,mBAAD,CAArB;;AACA,IAAII,KAAK,GAAGJ,OAAO,CAAC,OAAD,CAAP,CAAiB,8BAAjB,CAAZ;AAEA;AACA;AACA;;;AAEAK,MAAM,CAACC,OAAP,GAAiBC,GAAjB;AACAF,MAAM,CAACC,OAAP,CAAeE,OAAf,GAAyBA,OAAzB;AAEA;AACA;AACA;;AAEA,SAASC,KAAT,GAAkB,CAAE;AAEpB;AACA;AACA;AACA;AACA;AACA;;;AAEA,SAASF,GAAT,CAAcG,IAAd,EAAoB;AAClBT,EAAAA,OAAO,CAACU,IAAR,CAAa,IAAb,EAAmBD,IAAnB;AACA,OAAKE,cAAL,GAAsBF,IAAI,CAACE,cAA3B;;AAEA,MAAIC,MAAM,CAACC,QAAX,EAAqB;AACnB,QAAIC,KAAK,GAAG,aAAaD,QAAQ,CAACE,QAAlC;AACA,QAAIC,IAAI,GAAGH,QAAQ,CAACG,IAApB,CAFmB,CAInB;;AACA,QAAI,CAACA,IAAL,EAAW;AACTA,MAAAA,IAAI,GAAGF,KAAK,GAAG,GAAH,GAAS,EAArB;AACD;;AAED,SAAKG,EAAL,GAAUR,IAAI,CAACS,QAAL,KAAkBN,MAAM,CAACC,QAAP,CAAgBK,QAAlC,IACRF,IAAI,KAAKP,IAAI,CAACO,IADhB;AAEA,SAAKG,EAAL,GAAUV,IAAI,CAACW,MAAL,KAAgBN,KAA1B;AACD,GAZD,MAYO;AACL,SAAKO,YAAL,GAAoBZ,IAAI,CAACY,YAAzB;AACD;AACF;AAED;AACA;AACA;;;AAEAnB,OAAO,CAACI,GAAD,EAAMN,OAAN,CAAP;AAEA;AACA;AACA;;AAEAM,GAAG,CAACgB,SAAJ,CAAcC,cAAd,GAA+B,IAA/B;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEAjB,GAAG,CAACgB,SAAJ,CAAcE,OAAd,GAAwB,UAAUf,IAAV,EAAgB;AACtCA,EAAAA,IAAI,GAAGA,IAAI,IAAI,EAAf;AACAA,EAAAA,IAAI,CAACgB,GAAL,GAAW,KAAKA,GAAL,EAAX;AACAhB,EAAAA,IAAI,CAACQ,EAAL,GAAU,KAAKA,EAAf;AACAR,EAAAA,IAAI,CAACU,EAAL,GAAU,KAAKA,EAAf;AACAV,EAAAA,IAAI,CAACiB,KAAL,GAAa,KAAKA,KAAL,IAAc,KAA3B;AACAjB,EAAAA,IAAI,CAACc,cAAL,GAAsB,KAAKA,cAA3B;AACAd,EAAAA,IAAI,CAACkB,UAAL,GAAkB,KAAKA,UAAvB,CAPsC,CAStC;;AACAlB,EAAAA,IAAI,CAACmB,GAAL,GAAW,KAAKA,GAAhB;AACAnB,EAAAA,IAAI,CAACoB,GAAL,GAAW,KAAKA,GAAhB;AACApB,EAAAA,IAAI,CAACqB,UAAL,GAAkB,KAAKA,UAAvB;AACArB,EAAAA,IAAI,CAACsB,IAAL,GAAY,KAAKA,IAAjB;AACAtB,EAAAA,IAAI,CAACuB,EAAL,GAAU,KAAKA,EAAf;AACAvB,EAAAA,IAAI,CAACwB,OAAL,GAAe,KAAKA,OAApB;AACAxB,EAAAA,IAAI,CAACyB,kBAAL,GAA0B,KAAKA,kBAA/B;AACAzB,EAAAA,IAAI,CAACE,cAAL,GAAsB,KAAKA,cAA3B,CAjBsC,CAmBtC;;AACAF,EAAAA,IAAI,CAACY,YAAL,GAAoB,KAAKA,YAAzB;AAEA,SAAO,IAAId,OAAJ,CAAYE,IAAZ,CAAP;AACD,CAvBD;AAyBA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEAH,GAAG,CAACgB,SAAJ,CAAca,OAAd,GAAwB,UAAUC,IAAV,EAAgBC,EAAhB,EAAoB;AAC1C,MAAIC,QAAQ,GAAG,OAAOF,IAAP,KAAgB,QAAhB,IAA4BA,IAAI,KAAKG,SAApD;AACA,MAAIC,GAAG,GAAG,KAAKhB,OAAL,CAAa;AAAEiB,IAAAA,MAAM,EAAE,MAAV;AAAkBL,IAAAA,IAAI,EAAEA,IAAxB;AAA8BE,IAAAA,QAAQ,EAAEA;AAAxC,GAAb,CAAV;AACA,MAAII,IAAI,GAAG,IAAX;AACAF,EAAAA,GAAG,CAACG,EAAJ,CAAO,SAAP,EAAkBN,EAAlB;AACAG,EAAAA,GAAG,CAACG,EAAJ,CAAO,OAAP,EAAgB,UAAUC,GAAV,EAAe;AAC7BF,IAAAA,IAAI,CAACG,OAAL,CAAa,gBAAb,EAA+BD,GAA/B;AACD,GAFD;AAGA,OAAKE,OAAL,GAAeN,GAAf;AACD,CATD;AAWA;AACA;AACA;AACA;AACA;;;AAEAlC,GAAG,CAACgB,SAAJ,CAAcyB,MAAd,GAAuB,YAAY;AACjC5C,EAAAA,KAAK,CAAC,UAAD,CAAL;AACA,MAAIqC,GAAG,GAAG,KAAKhB,OAAL,EAAV;AACA,MAAIkB,IAAI,GAAG,IAAX;AACAF,EAAAA,GAAG,CAACG,EAAJ,CAAO,MAAP,EAAe,UAAUP,IAAV,EAAgB;AAC7BM,IAAAA,IAAI,CAACM,MAAL,CAAYZ,IAAZ;AACD,GAFD;AAGAI,EAAAA,GAAG,CAACG,EAAJ,CAAO,OAAP,EAAgB,UAAUC,GAAV,EAAe;AAC7BF,IAAAA,IAAI,CAACG,OAAL,CAAa,gBAAb,EAA+BD,GAA/B;AACD,GAFD;AAGA,OAAKK,OAAL,GAAeT,GAAf;AACD,CAXD;AAaA;AACA;AACA;AACA;AACA;AACA;;;AAEA,SAASjC,OAAT,CAAkBE,IAAlB,EAAwB;AACtB,OAAKgC,MAAL,GAAchC,IAAI,CAACgC,MAAL,IAAe,KAA7B;AACA,OAAKhB,GAAL,GAAWhB,IAAI,CAACgB,GAAhB;AACA,OAAKR,EAAL,GAAU,CAAC,CAACR,IAAI,CAACQ,EAAjB;AACA,OAAKE,EAAL,GAAU,CAAC,CAACV,IAAI,CAACU,EAAjB;AACA,OAAK+B,KAAL,GAAa,UAAUzC,IAAI,CAACyC,KAA5B;AACA,OAAKd,IAAL,GAAYG,SAAS,KAAK9B,IAAI,CAAC2B,IAAnB,GAA0B3B,IAAI,CAAC2B,IAA/B,GAAsC,IAAlD;AACA,OAAKV,KAAL,GAAajB,IAAI,CAACiB,KAAlB;AACA,OAAKY,QAAL,GAAgB7B,IAAI,CAAC6B,QAArB;AACA,OAAKf,cAAL,GAAsBd,IAAI,CAACc,cAA3B;AACA,OAAKI,UAAL,GAAkBlB,IAAI,CAACkB,UAAvB;AACA,OAAKhB,cAAL,GAAsBF,IAAI,CAACE,cAA3B,CAXsB,CAatB;;AACA,OAAKiB,GAAL,GAAWnB,IAAI,CAACmB,GAAhB;AACA,OAAKC,GAAL,GAAWpB,IAAI,CAACoB,GAAhB;AACA,OAAKC,UAAL,GAAkBrB,IAAI,CAACqB,UAAvB;AACA,OAAKC,IAAL,GAAYtB,IAAI,CAACsB,IAAjB;AACA,OAAKC,EAAL,GAAUvB,IAAI,CAACuB,EAAf;AACA,OAAKC,OAAL,GAAexB,IAAI,CAACwB,OAApB;AACA,OAAKC,kBAAL,GAA0BzB,IAAI,CAACyB,kBAA/B,CApBsB,CAsBtB;;AACA,OAAKb,YAAL,GAAoBZ,IAAI,CAACY,YAAzB;AAEA,OAAK8B,MAAL;AACD;AAED;AACA;AACA;;;AAEAlD,OAAO,CAACM,OAAO,CAACe,SAAT,CAAP;AAEA;AACA;AACA;AACA;AACA;;AAEAf,OAAO,CAACe,SAAR,CAAkB6B,MAAlB,GAA2B,YAAY;AACrC,MAAI1C,IAAI,GAAG;AAAEiB,IAAAA,KAAK,EAAE,KAAKA,KAAd;AAAqB0B,IAAAA,OAAO,EAAE,KAAKnC,EAAnC;AAAuCoC,IAAAA,OAAO,EAAE,KAAKlC,EAArD;AAAyDQ,IAAAA,UAAU,EAAE,KAAKA;AAA1E,GAAX,CADqC,CAGrC;;AACAlB,EAAAA,IAAI,CAACmB,GAAL,GAAW,KAAKA,GAAhB;AACAnB,EAAAA,IAAI,CAACoB,GAAL,GAAW,KAAKA,GAAhB;AACApB,EAAAA,IAAI,CAACqB,UAAL,GAAkB,KAAKA,UAAvB;AACArB,EAAAA,IAAI,CAACsB,IAAL,GAAY,KAAKA,IAAjB;AACAtB,EAAAA,IAAI,CAACuB,EAAL,GAAU,KAAKA,EAAf;AACAvB,EAAAA,IAAI,CAACwB,OAAL,GAAe,KAAKA,OAApB;AACAxB,EAAAA,IAAI,CAACyB,kBAAL,GAA0B,KAAKA,kBAA/B;AAEA,MAAIoB,GAAG,GAAG,KAAKA,GAAL,GAAW,IAAIxD,cAAJ,CAAmBW,IAAnB,CAArB;AACA,MAAIiC,IAAI,GAAG,IAAX;;AAEA,MAAI;AACFvC,IAAAA,KAAK,CAAC,iBAAD,EAAoB,KAAKsC,MAAzB,EAAiC,KAAKhB,GAAtC,CAAL;AACA6B,IAAAA,GAAG,CAACC,IAAJ,CAAS,KAAKd,MAAd,EAAsB,KAAKhB,GAA3B,EAAgC,KAAKyB,KAArC;;AACA,QAAI;AACF,UAAI,KAAK7B,YAAT,EAAuB;AACrBiC,QAAAA,GAAG,CAACE,qBAAJ,CAA0B,IAA1B;;AACA,aAAK,IAAIC,CAAT,IAAc,KAAKpC,YAAnB,EAAiC;AAC/B,cAAI,KAAKA,YAAL,CAAkBqC,cAAlB,CAAiCD,CAAjC,CAAJ,EAAyC;AACvCH,YAAAA,GAAG,CAACK,gBAAJ,CAAqBF,CAArB,EAAwB,KAAKpC,YAAL,CAAkBoC,CAAlB,CAAxB;AACD;AACF;AACF;AACF,KATD,CASE,OAAOG,CAAP,EAAU,CAAE;;AACd,QAAI,KAAKrC,cAAT,EAAyB;AACvB;AACA;AACA+B,MAAAA,GAAG,CAACO,YAAJ,GAAmB,aAAnB;AACD;;AAED,QAAI,WAAW,KAAKpB,MAApB,EAA4B;AAC1B,UAAI;AACF,YAAI,KAAKH,QAAT,EAAmB;AACjBgB,UAAAA,GAAG,CAACK,gBAAJ,CAAqB,cAArB,EAAqC,0BAArC;AACD,SAFD,MAEO;AACLL,UAAAA,GAAG,CAACK,gBAAJ,CAAqB,cAArB,EAAqC,0BAArC;AACD;AACF,OAND,CAME,OAAOC,CAAP,EAAU,CAAE;AACf;;AAED,QAAI;AACFN,MAAAA,GAAG,CAACK,gBAAJ,CAAqB,QAArB,EAA+B,KAA/B;AACD,KAFD,CAEE,OAAOC,CAAP,EAAU,CAAE,CA/BZ,CAiCF;;;AACA,QAAI,qBAAqBN,GAAzB,EAA8B;AAC5BA,MAAAA,GAAG,CAACQ,eAAJ,GAAsB,IAAtB;AACD;;AAED,QAAI,KAAKnD,cAAT,EAAyB;AACvB2C,MAAAA,GAAG,CAACS,OAAJ,GAAc,KAAKpD,cAAnB;AACD;;AAED,QAAI,KAAKqD,MAAL,EAAJ,EAAmB;AACjBV,MAAAA,GAAG,CAACW,MAAJ,GAAa,YAAY;AACvBvB,QAAAA,IAAI,CAACwB,MAAL;AACD,OAFD;;AAGAZ,MAAAA,GAAG,CAACa,OAAJ,GAAc,YAAY;AACxBzB,QAAAA,IAAI,CAACG,OAAL,CAAaS,GAAG,CAACc,YAAjB;AACD,OAFD;AAGD,KAPD,MAOO;AACLd,MAAAA,GAAG,CAACe,kBAAJ,GAAyB,YAAY;AACnC,YAAI,MAAMf,GAAG,CAACgB,UAAd,EAA0B;;AAC1B,YAAI,QAAQhB,GAAG,CAACiB,MAAZ,IAAsB,SAASjB,GAAG,CAACiB,MAAvC,EAA+C;AAC7C7B,UAAAA,IAAI,CAACwB,MAAL;AACD,SAFD,MAEO;AACL;AACA;AACAM,UAAAA,UAAU,CAAC,YAAY;AACrB9B,YAAAA,IAAI,CAACG,OAAL,CAAaS,GAAG,CAACiB,MAAjB;AACD,WAFS,EAEP,CAFO,CAAV;AAGD;AACF,OAXD;AAYD;;AAEDpE,IAAAA,KAAK,CAAC,aAAD,EAAgB,KAAKiC,IAArB,CAAL;AACAkB,IAAAA,GAAG,CAACmB,IAAJ,CAAS,KAAKrC,IAAd;AACD,GAlED,CAkEE,OAAOwB,CAAP,EAAU;AACV;AACA;AACA;AACAY,IAAAA,UAAU,CAAC,YAAY;AACrB9B,MAAAA,IAAI,CAACG,OAAL,CAAae,CAAb;AACD,KAFS,EAEP,CAFO,CAAV;AAGA;AACD;;AAED,MAAIhD,MAAM,CAAC8D,QAAX,EAAqB;AACnB,SAAKC,KAAL,GAAapE,OAAO,CAACqE,aAAR,EAAb;AACArE,IAAAA,OAAO,CAACsE,QAAR,CAAiB,KAAKF,KAAtB,IAA+B,IAA/B;AACD;AACF,CA/FD;AAiGA;AACA;AACA;AACA;AACA;;;AAEApE,OAAO,CAACe,SAAR,CAAkBwD,SAAlB,GAA8B,YAAY;AACxC,OAAKC,IAAL,CAAU,SAAV;AACA,OAAKC,OAAL;AACD,CAHD;AAKA;AACA;AACA;AACA;AACA;;;AAEAzE,OAAO,CAACe,SAAR,CAAkB0B,MAAlB,GAA2B,UAAUZ,IAAV,EAAgB;AACzC,OAAK2C,IAAL,CAAU,MAAV,EAAkB3C,IAAlB;AACA,OAAK0C,SAAL;AACD,CAHD;AAKA;AACA;AACA;AACA;AACA;;;AAEAvE,OAAO,CAACe,SAAR,CAAkBuB,OAAlB,GAA4B,UAAUD,GAAV,EAAe;AACzC,OAAKmC,IAAL,CAAU,OAAV,EAAmBnC,GAAnB;AACA,OAAKoC,OAAL,CAAa,IAAb;AACD,CAHD;AAKA;AACA;AACA;AACA;AACA;;;AAEAzE,OAAO,CAACe,SAAR,CAAkB0D,OAAlB,GAA4B,UAAUC,SAAV,EAAqB;AAC/C,MAAI,gBAAgB,OAAO,KAAK3B,GAA5B,IAAmC,SAAS,KAAKA,GAArD,EAA0D;AACxD;AACD,GAH8C,CAI/C;;;AACA,MAAI,KAAKU,MAAL,EAAJ,EAAmB;AACjB,SAAKV,GAAL,CAASW,MAAT,GAAkB,KAAKX,GAAL,CAASa,OAAT,GAAmB3D,KAArC;AACD,GAFD,MAEO;AACL,SAAK8C,GAAL,CAASe,kBAAT,GAA8B7D,KAA9B;AACD;;AAED,MAAIyE,SAAJ,EAAe;AACb,QAAI;AACF,WAAK3B,GAAL,CAAS4B,KAAT;AACD,KAFD,CAEE,OAAOtB,CAAP,EAAU,CAAE;AACf;;AAED,MAAIhD,MAAM,CAAC8D,QAAX,EAAqB;AACnB,WAAOnE,OAAO,CAACsE,QAAR,CAAiB,KAAKF,KAAtB,CAAP;AACD;;AAED,OAAKrB,GAAL,GAAW,IAAX;AACD,CAtBD;AAwBA;AACA;AACA;AACA;AACA;;;AAEA/C,OAAO,CAACe,SAAR,CAAkB4C,MAAlB,GAA2B,YAAY;AACrC,MAAI9B,IAAJ;;AACA,MAAI;AACF,QAAI+C,WAAJ;;AACA,QAAI;AACFA,MAAAA,WAAW,GAAG,KAAK7B,GAAL,CAAS8B,iBAAT,CAA2B,cAA3B,EAA2CC,KAA3C,CAAiD,GAAjD,EAAsD,CAAtD,CAAd;AACD,KAFD,CAEE,OAAOzB,CAAP,EAAU,CAAE;;AACd,QAAIuB,WAAW,KAAK,0BAApB,EAAgD;AAC9C/C,MAAAA,IAAI,GAAG,KAAKkB,GAAL,CAASgC,QAAT,IAAqB,KAAKhC,GAAL,CAASc,YAArC;AACD,KAFD,MAEO;AACL,UAAI,CAAC,KAAK7C,cAAV,EAA0B;AACxBa,QAAAA,IAAI,GAAG,KAAKkB,GAAL,CAASc,YAAhB;AACD,OAFD,MAEO;AACL,YAAI;AACFhC,UAAAA,IAAI,GAAGmD,MAAM,CAACC,YAAP,CAAoBC,KAApB,CAA0B,IAA1B,EAAgC,IAAIC,UAAJ,CAAe,KAAKpC,GAAL,CAASgC,QAAxB,CAAhC,CAAP;AACD,SAFD,CAEE,OAAO1B,CAAP,EAAU;AACV,cAAI+B,MAAM,GAAG,IAAID,UAAJ,CAAe,KAAKpC,GAAL,CAASgC,QAAxB,CAAb;AACA,cAAIM,SAAS,GAAG,EAAhB;;AACA,eAAK,IAAIC,GAAG,GAAG,CAAV,EAAaC,MAAM,GAAGH,MAAM,CAACG,MAAlC,EAA0CD,GAAG,GAAGC,MAAhD,EAAwDD,GAAG,EAA3D,EAA+D;AAC7DD,YAAAA,SAAS,CAACG,IAAV,CAAeJ,MAAM,CAACE,GAAD,CAArB;AACD;;AAEDzD,UAAAA,IAAI,GAAGmD,MAAM,CAACC,YAAP,CAAoBC,KAApB,CAA0B,IAA1B,EAAgCG,SAAhC,CAAP;AACD;AACF;AACF;AACF,GAxBD,CAwBE,OAAOhC,CAAP,EAAU;AACV,SAAKf,OAAL,CAAae,CAAb;AACD;;AACD,MAAI,QAAQxB,IAAZ,EAAkB;AAChB,SAAKY,MAAL,CAAYZ,IAAZ;AACD;AACF,CAhCD;AAkCA;AACA;AACA;AACA;AACA;;;AAEA7B,OAAO,CAACe,SAAR,CAAkB0C,MAAlB,GAA2B,YAAY;AACrC,SAAO,gBAAgB,OAAOpD,MAAM,CAACoF,cAA9B,IAAgD,CAAC,KAAK7E,EAAtD,IAA4D,KAAKQ,UAAxE;AACD,CAFD;AAIA;AACA;AACA;AACA;AACA;;;AAEApB,OAAO,CAACe,SAAR,CAAkB4D,KAAlB,GAA0B,YAAY;AACpC,OAAKF,OAAL;AACD,CAFD;AAIA;AACA;AACA;AACA;AACA;;;AAEAzE,OAAO,CAACqE,aAAR,GAAwB,CAAxB;AACArE,OAAO,CAACsE,QAAR,GAAmB,EAAnB;;AAEA,IAAIjE,MAAM,CAAC8D,QAAX,EAAqB;AACnB,MAAI9D,MAAM,CAACqF,WAAX,EAAwB;AACtBrF,IAAAA,MAAM,CAACqF,WAAP,CAAmB,UAAnB,EAA+BC,aAA/B;AACD,GAFD,MAEO,IAAItF,MAAM,CAACuF,gBAAX,EAA6B;AAClCvF,IAAAA,MAAM,CAACuF,gBAAP,CAAwB,cAAxB,EAAwCD,aAAxC,EAAuD,KAAvD;AACD;AACF;;AAED,SAASA,aAAT,GAA0B;AACxB,OAAK,IAAIzC,CAAT,IAAclD,OAAO,CAACsE,QAAtB,EAAgC;AAC9B,QAAItE,OAAO,CAACsE,QAAR,CAAiBnB,cAAjB,CAAgCD,CAAhC,CAAJ,EAAwC;AACtClD,MAAAA,OAAO,CAACsE,QAAR,CAAiBpB,CAAjB,EAAoByB,KAApB;AACD;AACF;AACF","sourcesContent":["/**\n * Module requirements.\n */\n\nvar XMLHttpRequest = require('xmlhttprequest-ssl');\nvar Polling = require('./polling');\nvar Emitter = require('component-emitter');\nvar inherit = require('component-inherit');\nvar debug = require('debug')('engine.io-client:polling-xhr');\n\n/**\n * Module exports.\n */\n\nmodule.exports = XHR;\nmodule.exports.Request = Request;\n\n/**\n * Empty function\n */\n\nfunction empty () {}\n\n/**\n * XHR Polling constructor.\n *\n * @param {Object} opts\n * @api public\n */\n\nfunction XHR (opts) {\n  Polling.call(this, opts);\n  this.requestTimeout = opts.requestTimeout;\n\n  if (global.location) {\n    var isSSL = 'https:' === location.protocol;\n    var port = location.port;\n\n    // some user agents have empty `location.port`\n    if (!port) {\n      port = isSSL ? 443 : 80;\n    }\n\n    this.xd = opts.hostname !== global.location.hostname ||\n      port !== opts.port;\n    this.xs = opts.secure !== isSSL;\n  } else {\n    this.extraHeaders = opts.extraHeaders;\n  }\n}\n\n/**\n * Inherits from Polling.\n */\n\ninherit(XHR, Polling);\n\n/**\n * XHR supports binary\n */\n\nXHR.prototype.supportsBinary = true;\n\n/**\n * Creates a request.\n *\n * @param {String} method\n * @api private\n */\n\nXHR.prototype.request = function (opts) {\n  opts = opts || {};\n  opts.uri = this.uri();\n  opts.xd = this.xd;\n  opts.xs = this.xs;\n  opts.agent = this.agent || false;\n  opts.supportsBinary = this.supportsBinary;\n  opts.enablesXDR = this.enablesXDR;\n\n  // SSL options for Node.js client\n  opts.pfx = this.pfx;\n  opts.key = this.key;\n  opts.passphrase = this.passphrase;\n  opts.cert = this.cert;\n  opts.ca = this.ca;\n  opts.ciphers = this.ciphers;\n  opts.rejectUnauthorized = this.rejectUnauthorized;\n  opts.requestTimeout = this.requestTimeout;\n\n  // other options for Node.js client\n  opts.extraHeaders = this.extraHeaders;\n\n  return new Request(opts);\n};\n\n/**\n * Sends data.\n *\n * @param {String} data to send.\n * @param {Function} called upon flush.\n * @api private\n */\n\nXHR.prototype.doWrite = function (data, fn) {\n  var isBinary = typeof data !== 'string' && data !== undefined;\n  var req = this.request({ method: 'POST', data: data, isBinary: isBinary });\n  var self = this;\n  req.on('success', fn);\n  req.on('error', function (err) {\n    self.onError('xhr post error', err);\n  });\n  this.sendXhr = req;\n};\n\n/**\n * Starts a poll cycle.\n *\n * @api private\n */\n\nXHR.prototype.doPoll = function () {\n  debug('xhr poll');\n  var req = this.request();\n  var self = this;\n  req.on('data', function (data) {\n    self.onData(data);\n  });\n  req.on('error', function (err) {\n    self.onError('xhr poll error', err);\n  });\n  this.pollXhr = req;\n};\n\n/**\n * Request constructor\n *\n * @param {Object} options\n * @api public\n */\n\nfunction Request (opts) {\n  this.method = opts.method || 'GET';\n  this.uri = opts.uri;\n  this.xd = !!opts.xd;\n  this.xs = !!opts.xs;\n  this.async = false !== opts.async;\n  this.data = undefined !== opts.data ? opts.data : null;\n  this.agent = opts.agent;\n  this.isBinary = opts.isBinary;\n  this.supportsBinary = opts.supportsBinary;\n  this.enablesXDR = opts.enablesXDR;\n  this.requestTimeout = opts.requestTimeout;\n\n  // SSL options for Node.js client\n  this.pfx = opts.pfx;\n  this.key = opts.key;\n  this.passphrase = opts.passphrase;\n  this.cert = opts.cert;\n  this.ca = opts.ca;\n  this.ciphers = opts.ciphers;\n  this.rejectUnauthorized = opts.rejectUnauthorized;\n\n  // other options for Node.js client\n  this.extraHeaders = opts.extraHeaders;\n\n  this.create();\n}\n\n/**\n * Mix in `Emitter`.\n */\n\nEmitter(Request.prototype);\n\n/**\n * Creates the XHR object and sends the request.\n *\n * @api private\n */\n\nRequest.prototype.create = function () {\n  var opts = { agent: this.agent, xdomain: this.xd, xscheme: this.xs, enablesXDR: this.enablesXDR };\n\n  // SSL options for Node.js client\n  opts.pfx = this.pfx;\n  opts.key = this.key;\n  opts.passphrase = this.passphrase;\n  opts.cert = this.cert;\n  opts.ca = this.ca;\n  opts.ciphers = this.ciphers;\n  opts.rejectUnauthorized = this.rejectUnauthorized;\n\n  var xhr = this.xhr = new XMLHttpRequest(opts);\n  var self = this;\n\n  try {\n    debug('xhr open %s: %s', this.method, this.uri);\n    xhr.open(this.method, this.uri, this.async);\n    try {\n      if (this.extraHeaders) {\n        xhr.setDisableHeaderCheck(true);\n        for (var i in this.extraHeaders) {\n          if (this.extraHeaders.hasOwnProperty(i)) {\n            xhr.setRequestHeader(i, this.extraHeaders[i]);\n          }\n        }\n      }\n    } catch (e) {}\n    if (this.supportsBinary) {\n      // This has to be done after open because Firefox is stupid\n      // http://stackoverflow.com/questions/13216903/get-binary-data-with-xmlhttprequest-in-a-firefox-extension\n      xhr.responseType = 'arraybuffer';\n    }\n\n    if ('POST' === this.method) {\n      try {\n        if (this.isBinary) {\n          xhr.setRequestHeader('Content-type', 'application/octet-stream');\n        } else {\n          xhr.setRequestHeader('Content-type', 'text/plain;charset=UTF-8');\n        }\n      } catch (e) {}\n    }\n\n    try {\n      xhr.setRequestHeader('Accept', '*/*');\n    } catch (e) {}\n\n    // ie6 check\n    if ('withCredentials' in xhr) {\n      xhr.withCredentials = true;\n    }\n\n    if (this.requestTimeout) {\n      xhr.timeout = this.requestTimeout;\n    }\n\n    if (this.hasXDR()) {\n      xhr.onload = function () {\n        self.onLoad();\n      };\n      xhr.onerror = function () {\n        self.onError(xhr.responseText);\n      };\n    } else {\n      xhr.onreadystatechange = function () {\n        if (4 !== xhr.readyState) return;\n        if (200 === xhr.status || 1223 === xhr.status) {\n          self.onLoad();\n        } else {\n          // make sure the `error` event handler that's user-set\n          // does not throw in the same tick and gets caught here\n          setTimeout(function () {\n            self.onError(xhr.status);\n          }, 0);\n        }\n      };\n    }\n\n    debug('xhr data %s', this.data);\n    xhr.send(this.data);\n  } catch (e) {\n    // Need to defer since .create() is called directly fhrom the constructor\n    // and thus the 'error' event can only be only bound *after* this exception\n    // occurs.  Therefore, also, we cannot throw here at all.\n    setTimeout(function () {\n      self.onError(e);\n    }, 0);\n    return;\n  }\n\n  if (global.document) {\n    this.index = Request.requestsCount++;\n    Request.requests[this.index] = this;\n  }\n};\n\n/**\n * Called upon successful response.\n *\n * @api private\n */\n\nRequest.prototype.onSuccess = function () {\n  this.emit('success');\n  this.cleanup();\n};\n\n/**\n * Called if we have data.\n *\n * @api private\n */\n\nRequest.prototype.onData = function (data) {\n  this.emit('data', data);\n  this.onSuccess();\n};\n\n/**\n * Called upon error.\n *\n * @api private\n */\n\nRequest.prototype.onError = function (err) {\n  this.emit('error', err);\n  this.cleanup(true);\n};\n\n/**\n * Cleans up house.\n *\n * @api private\n */\n\nRequest.prototype.cleanup = function (fromError) {\n  if ('undefined' === typeof this.xhr || null === this.xhr) {\n    return;\n  }\n  // xmlhttprequest\n  if (this.hasXDR()) {\n    this.xhr.onload = this.xhr.onerror = empty;\n  } else {\n    this.xhr.onreadystatechange = empty;\n  }\n\n  if (fromError) {\n    try {\n      this.xhr.abort();\n    } catch (e) {}\n  }\n\n  if (global.document) {\n    delete Request.requests[this.index];\n  }\n\n  this.xhr = null;\n};\n\n/**\n * Called upon load.\n *\n * @api private\n */\n\nRequest.prototype.onLoad = function () {\n  var data;\n  try {\n    var contentType;\n    try {\n      contentType = this.xhr.getResponseHeader('Content-Type').split(';')[0];\n    } catch (e) {}\n    if (contentType === 'application/octet-stream') {\n      data = this.xhr.response || this.xhr.responseText;\n    } else {\n      if (!this.supportsBinary) {\n        data = this.xhr.responseText;\n      } else {\n        try {\n          data = String.fromCharCode.apply(null, new Uint8Array(this.xhr.response));\n        } catch (e) {\n          var ui8Arr = new Uint8Array(this.xhr.response);\n          var dataArray = [];\n          for (var idx = 0, length = ui8Arr.length; idx < length; idx++) {\n            dataArray.push(ui8Arr[idx]);\n          }\n\n          data = String.fromCharCode.apply(null, dataArray);\n        }\n      }\n    }\n  } catch (e) {\n    this.onError(e);\n  }\n  if (null != data) {\n    this.onData(data);\n  }\n};\n\n/**\n * Check if it has XDomainRequest.\n *\n * @api private\n */\n\nRequest.prototype.hasXDR = function () {\n  return 'undefined' !== typeof global.XDomainRequest && !this.xs && this.enablesXDR;\n};\n\n/**\n * Aborts the request.\n *\n * @api public\n */\n\nRequest.prototype.abort = function () {\n  this.cleanup();\n};\n\n/**\n * Aborts pending requests when unloading the window. This is needed to prevent\n * memory leaks (e.g. when using IE) and to ensure that no spurious error is\n * emitted.\n */\n\nRequest.requestsCount = 0;\nRequest.requests = {};\n\nif (global.document) {\n  if (global.attachEvent) {\n    global.attachEvent('onunload', unloadHandler);\n  } else if (global.addEventListener) {\n    global.addEventListener('beforeunload', unloadHandler, false);\n  }\n}\n\nfunction unloadHandler () {\n  for (var i in Request.requests) {\n    if (Request.requests.hasOwnProperty(i)) {\n      Request.requests[i].abort();\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"script"}